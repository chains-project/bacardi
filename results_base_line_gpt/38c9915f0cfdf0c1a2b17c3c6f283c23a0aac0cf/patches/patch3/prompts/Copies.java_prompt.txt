 Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.
 the following client code fails:
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2023 Yegor Bugayenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package io.zold.api;

import io.zold.api.Copies.Copy;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.cactoos.collection.ArrayListOf;
import org.cactoos.iterable.IterableEnvelope;
import org.cactoos.iterable.IterableOf;
import org.cactoos.iterable.Joined;
import org.cactoos.iterable.Mapped;

/**
 * Multiple copies of a Wallet.
 * @since 1.0
 */
public final class Copies extends IterableEnvelope<Copy> {

    /**
     * Ctor.
     * @param id Id of the wallet to pull.
     * @param remotes Remote nodes.
     */
    Copies(final long id, final Iterable<Remote> remotes) {
        super(() -> copies(id, remotes));
    }

    /**
     * Builds copies from remotes.
     * @param id Wallet's id
     * @param remotes List of remotes
     * @return Iterable Iterable of Copy
     * @throws IOException If fails
     */
    @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops")
    private static Iterable<Copy> copies(final long id,
        final Iterable<Remote> remotes) throws IOException {
        final List<Copy> copies = new ArrayList<>(10);
        for (final Remote remote : remotes) {
            final Wallet wallet = remote.pull(id);
            boolean updated = false;
            for (int idx = 0; idx < copies.size(); idx += 1) {
                final Copy copy = copies.get(idx);
                if (Copies.equalWallets(copies.get(idx).wallet(), wallet)) {
                    copies.set(idx, copy.with(remote));
                    updated = true;
                }
            }
            if (!updated) {
                copies.add(new Copy(wallet, remote));
            }
        }
        return new IterableOf<>(copies);
    }

    /**
     * Checks if content of two wallets is equal.
     * @param first First wallet
     * @param second Second wallet
     * @return Boolean Boolean
     * @throws IOException If fails
     * @todo #56:30min Compare the entire content of two wallets. In addition
     *  to id, compare RSA key and all transactions one by one. Entire content
     *  of each transaction should be compared.
     */
    private static boolean equalWallets(final Wallet first,
        final Wallet second) throws IOException {
        return first.id() == second.id() && new ArrayListOf<>(
            first.ledger()
        ).size() == new ArrayListOf<>(second.ledger()).size();
    }

    /**
     * One copy of a {@link Wallet}.
     * @since 1.0
     */
    static final class Copy implements Comparable<Copy> {

        /**
         * The wallet.
         */
        private final Wallet wlt;

        /**
         * The remote nodes where the wallet was found.
         */
        private final Iterable<Remote> remotes;

        /**
         * Ctor.
         * @param wallet The wallet.
         * @param remotes The remote nodes where the wallet was found.
         */
        Copy(final Wallet wallet, final Remote... remotes) {
            this(wallet, new IterableOf<>(remotes));
        }

        /**
         * Ctor.
         * @param wallet The wallet.
         * @param remotes The remote nodes where the wallet was found.
         */
        Copy(final Wallet wallet, final Iterable<Remote> remotes) {
            this.wlt = wallet;
            this.remotes = remotes;
        }

        /**
         * Creates new Copy instance with additional remote.
         * @param remote Remote
         * @return Copy Copy
         */
        public Copy with(final Remote remote) {
            return new Copy(this.wallet(), new Joined<>(remote, this.remotes));
        }

        /**
         * The wallet.
         * @return The wallet.
         */
        public Wallet wallet() {
            return this.wlt;
        }

        /**
         * The summary of the score of all the remote nodes.
         * @return The score.
         */
        public Score score() {
            return new Score.Summed(new Mapped<>(Remote::score, this.remotes));
        }

        @Override
        public int compareTo(final Copy other) {
            return this.score().compareTo(other.score());
        }
    }
}

 with the following error information:
[ERROR] /java-api/src/main/java/io/zold/api/Copies.java:[30,30] cannot find symbol
  symbol:   class ArrayListOf
  location: package org.cactoos.collection




 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error.
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
 