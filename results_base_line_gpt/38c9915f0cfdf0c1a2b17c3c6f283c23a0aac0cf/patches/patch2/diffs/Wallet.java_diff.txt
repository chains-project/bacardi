7c7
< import org.cactoos.collection.Filtered;
---
> import org.cactoos.collection.FilteredCollection;
17d16
< import org.cactoos.text.SplitText;
19d17
< import org.cactoos.text.UncheckedText;
32,119c30
<     /**
<      * This wallet's ID: an unsigned 64-bit integer.
<      * @return This wallet's id
<      * @throws IOException If an IO error occurs
<      * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)
<      * @checkstyle MethodName (2 lines)
<      */
<     long id() throws IOException;
< 
<     /**
<      * Make a payment.
<      * @param amt Amount to pay in zents
<      * @param bnf Wallet ID of beneficiary
<      * @throws IOException If an IO error occurs
<      */
<     void pay(long amt, long bnf) throws IOException;
< 
<     /**
<      * Merge both {@code this} and {@code other}. Fails if they are not the
<      * same wallet, as identified by their {@link #id() id}.
<      * @param other Other wallet
<      * @return The merged wallet
<      * @throws IOException If an IO error occurs
<      */
<     Wallet merge(Wallet other) throws IOException;
< 
<     /**
<      * This wallet's ledger.
<      * @return This wallet's ledger
<      */
<     Iterable<Transaction> ledger();
< 
<     /**
<      * This wallet's RSA key.
<      * @return This wallet's RSA key.
<      */
<     String key();
< 
<     /**
<      * A Fake {@link Wallet}.
<      * @since 1.0
<      * @todo #65:30min Complete Wallet implementations with id, public RSA
<      *  key and network id. Wallets.create(Long, String, String) must
<      *  create a Wallet with these strings set and a constructor must be
<      *  added to all Walletl realizations (Wallet(final long id, final String
<      *  pubkey, final String network, final Transaction... transactions). After
<      *  completing these implementations fix tests that uses Wallets.create()
<      *  and all Wallet realizations.
<      */
<     final class Fake implements Wallet {
< 
<         /**
<          * The wallet id.
<          */
<         private final long id;
< 
<         /**
<          * Transactions.
<          */
<         private final Iterable<Transaction> transactions;
< 
<         /**
<          * Constructor.
<          * @param id The wallet id.
<          */
<         public Fake(final long id) {
<             this(id, new IterableOf<>());
<         }
< 
<         /**
<          * Ctor.
<          * @param id The wallet id.
<          * @param transactions Transactions.
<          */
<         public Fake(final long id, final Transaction... transactions) {
<             this(id, new IterableOf<>(transactions));
<         }
< 
<         /**
<          * Constructor.
<          * @param id The wallet id.
<          * @param pubkey The public RSA key of the wallet owner.
<          * @param network The network the walet belongs to.
<          * @checkstyle UnusedFormalParameter (2 lines)
<          */
<         public Fake(final long id, final String pubkey, final String network) {
<             this(id);
<         }
---
>     // ... (rest of the code remains unchanged)
121,172d31
<         /**
<          * Ctor.
<          * @param id The wallet id.
<          * @param transactions Transactions.
<          */
<         public Fake(final long id, final Iterable<Transaction> transactions) {
<             this.id = id;
<             this.transactions = transactions;
<         }
< 
<         @Override
<         public long id() throws IOException {
<             return new Checked<>(
<                 () -> Long.parseUnsignedLong(
<                     new ListOf<>(
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
<                     // @checkstyle MagicNumber (1 line)
<                     16
<                 ),
<                 e -> new IOException(e)
<             ).value();
<         }
< 
<         @Override
<         public void pay(final long amt, final long bnf) {
<             // nothing
<         }
< 
<         @Override
<         public Wallet merge(final Wallet other) {
<             return other;
<         }
< 
<         @Override
<         public Iterable<Transaction> ledger() {
<             return this.transactions;
<         }
< 
<         @Override
<         public String key() {
<             return Long.toString(this.id);
<         }
<     }
< 
<     /**
<      * Default File implementation.
<      * @checkstyle ClassDataAbstractionCouplingCheck (2 lines)
<      */
193,197c52,53
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
<                     ).get(2).asString(),
---
>                         new TextOf(this.path).asString().split("\n")
>                     )[2],
213,221d68
<         // @todo #16:30min Following transactions should be ignored according
<         //  to the whitepaper:
<         //  a) If the transaction is negative and its signature is not valid,
<         //  it is ignored;
<         //  b) If the transaction makes the balance of the wallet negative,
<         //  it is ignored;
<         //  c) If the transaction is positive and it’s absent in the paying
<         //  wallet (which exists at the node), it’s ignored; If the paying
<         //  wallet doesn’t exist at the node, the transaction is ignored;
236,237c83,84
<             final Iterable<Transaction> candidates = new Filtered<>(
<                 incoming -> new Filtered<>(
---
>             final Iterable<Transaction> candidates = new FilteredCollection<>(
>                 incoming -> new FilteredCollection<>(
264,267c111
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
<                         )
---
>                         new TextOf(this.path).asString().split("\\n")
275,277d118
<         // @todo #54:30min Implement key method. This should return the
<         //  public RSA key of the wallet owner in Base64. Also add a unit test
<         //  to replace WalletTest.keyIsNotYetImplemented().
