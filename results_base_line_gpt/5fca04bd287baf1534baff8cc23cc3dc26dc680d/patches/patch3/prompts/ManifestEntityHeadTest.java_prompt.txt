 Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.
 the following client code fails:
/*
 * The MIT License (MIT) Copyright (c) 2020-2021 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker.http;

import com.artipie.docker.ExampleStorage;
import com.artipie.docker.asto.AstoDocker;
import com.artipie.http.Response;
import com.artipie.http.headers.Header;
import com.artipie.http.hm.RsHasHeaders;
import com.artipie.http.hm.RsHasStatus;
import com.artipie.http.rq.RequestLine;
import com.artipie.http.rq.RqMethod;
import com.artipie.http.rs.RsStatus;
import io.reactivex.Flowable;
import org.hamcrest.Matcher;
import org.hamcrest.MatcherAssert;
import org.hamcrest.core.AllOf;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.hamcrest.core.IsEqual;

/**
 * Tests for {@link DockerSlice}.
 * Manifest HEAD endpoint.
 *
 * @since 0.2
 * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)
 * @checkstyle MagicNumberCheck (500 lines)
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
class ManifestEntityHeadTest {

    /**
     * Slice being tested.
     */
    private DockerSlice slice;

    @BeforeEach
    void setUp() {
        this.slice = new DockerSlice(new AstoDocker(new ExampleStorage()));
    }

    @Test
    void shouldRespondOkWhenManifestFoundByTag() {
        MatcherAssert.assertThat(
            this.slice.response(
                new RequestLine(RqMethod.HEAD, "/v2/my-alpine/manifests/1").toString(),
                new Headers(),
                Flowable.empty()
            ),
            new ResponseMatcher(
                "sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221",
                528
            )
        );
    }

    @Test
    void shouldRespondOkWhenManifestFoundByDigest() {
        final String digest = String.format(
            "%s:%s",
            "sha256",
            "cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221"
        );
        MatcherAssert.assertThat(
            this.slice.response(
                new RequestLine(
                    RqMethod.HEAD,
                    String.format("/v2/my-alpine/manifests/%s", digest)
                ).toString(),
                new Headers(),
                Flowable.empty()
            ),
            new ResponseMatcher(digest, 528)
        );
    }

    @Test
    void shouldReturnNotFoundForUnknownTag() {
        MatcherAssert.assertThat(
            this.slice.response(
                new RequestLine(RqMethod.HEAD, "/v2/my-alpine/manifests/2").toString(),
                new Headers(),
                Flowable.empty()
            ),
            new IsErrorsResponse(RsStatus.NOT_FOUND, "MANIFEST_UNKNOWN")
        );
    }

    @Test
    void shouldReturnNotFoundForUnknownDigest() {
        MatcherAssert.assertThat(
            this.slice.response(
                new RequestLine(
                    RqMethod.HEAD,
                    String.format(
                        "/v2/my-alpine/manifests/%s",
                        "sha256:0123456789012345678901234567890123456789012345678901234567890123"
                    )).toString(),
                new Headers(),
                Flowable.empty()
            ),
            new IsErrorsResponse(RsStatus.NOT_FOUND, "MANIFEST_UNKNOWN")
        );
    }

    /**
     * Headers set for getting manifest.
     *
     * @since 0.4
     */
    private static class Headers extends com.artipie.http.Headers.Wrap {

        Headers() {
            super(
                new Headers.From(
                    // @checkstyle LineLengthCheck (1 line)
                    new Header("Accept", "application/vnd.docker.distribution.manifest.v2+json, application/xml;q=0.9, image/*")
                )
            );
        }
    }

    /**
     * Manifest entity head response matcher.
     * @since 0.3
     */
    private static final class ResponseMatcher extends AllOf<Response> {

        /**
         * Ctor.
         *
         * @param digest Expected `Docker-Content-Digest` header value.
         * @param size Expected `Content-Length` header value.
         */
        ResponseMatcher(final String digest, final long size) {
            super(
                new IsEqual[] {
                    new RsHasStatus(RsStatus.OK),
                    new RsHasHeaders(
                        new Header(
                            "Content-type", "application/vnd.docker.distribution.manifest.v2+json"
                        ),
                        new Header("Docker-Content-Digest", digest),
                        new Header("Content-Length", String.valueOf(size))
                    )
                }
            );
        }

    }

}

 with the following error information:
[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/ManifestEntityHeadTest.java:[142,21] incompatible types: com.artipie.http.hm.RsHasHeaders cannot be converted to org.hamcrest.core.IsEqual

[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/ManifestEntityHeadTest.java:[141,21] incompatible types: com.artipie.http.hm.RsHasStatus cannot be converted to org.hamcrest.core.IsEqual




 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error.
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
 