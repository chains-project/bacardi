 Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.
 the following client code fails:
//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.7 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.08.19 at 10:48:51 PM GMT 
//


package com.premiumminds.billy.portugal.services.export.saftpt.v1_04_01.schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy; // Ensure this import exists


/**
 * <p>Java class for CustomsDetails complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CustomsDetails"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:OECD:StandardAuditFile-Tax:PT_1.04_01}CNCode" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:OECD:StandardAuditFile-Tax:PT_1.04_01}UNNumber" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CustomsDetails", propOrder = {
    "cnCode",
    "unNumber"
})
public class CustomsDetails implements ToString2
{

    @XmlElement(name = "CNCode")
    protected List<String> cnCode;
    @XmlElement(name = "UNNumber")
    protected List<String> unNumber;

    /**
     * Gets the value of the cnCode property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cnCode property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCNCode().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getCNCode() {
        if (cnCode == null) {
            cnCode = new ArrayList<String>();
        }
        return this.cnCode;
    }

    /**
     * Gets the value of the unNumber property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the unNumber property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUNNumber().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getUNNumber() {
        if (unNumber == null) {
            unNumber = new ArrayList<String>();
        }
        return this.unNumber;
    }

    @Override
    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.getInstance(); // Updated method to get an instance
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    @Override
    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    @Override
    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<String> theCNCode;
            theCNCode = (((this.cnCode!= null)&&(!this.cnCode.isEmpty()))?this.getCNCode():null);
            strategy.appendField(locator, this, "cnCode", buffer, theCNCode, ((this.cnCode!= null)&&(!this.cnCode.isEmpty())));
        }
        {
            List<String> theUNNumber;
            theUNNumber = (((this.unNumber!= null)&&(!this.unNumber.isEmpty()))?this.getUNNumber():null);
            strategy.appendField(locator, this, "unNumber", buffer, theUNNumber, ((this.unNumber!= null)&&(!this.unNumber.isEmpty())));
        }
        return buffer;
    }

}

 with the following error information:
[ERROR] /billy/billy-portugal/src-generated/main/java/com/premiumminds/billy/portugal/services/export/saftpt/v1_04_01/schema/CustomsDetails.java:[116,64] cannot find symbol
  symbol:   method getInstance()
  location: class org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy




 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error.
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
 