 Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.
 the following client code fails:
package com.github.knaufk.flink.faker;

import java.sql.Timestamp;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import net.datafaker.DateAndTime;
import net.datafaker.Faker;

public class DateTime extends DateAndTime {

  protected DateTime(Faker faker) {
    super(faker);
  }

  public Timestamp past(int atMost, TimeUnit unit) {
    Date date = super.past(atMost, unit);
    return new Timestamp(date.getTime());
  }

  public Timestamp past(int atMost, int minimum, TimeUnit unit) {
    Date date = super.past(atMost, minimum, unit);
    return new Timestamp(date.getTime());
  }

  public Timestamp future(int atMost, TimeUnit unit) {
    Date date = super.future(atMost, unit);
    return new Timestamp(date.getTime());
  }

  public Timestamp future(int atMost, int minimum, TimeUnit unit) {
    Date date = super.future(atMost, minimum, unit);
    return new Timestamp(date.getTime());
  }

  public Timestamp future(int atMost, TimeUnit unit, Date referenceDate) {
    Date date = super.future(atMost, unit, referenceDate);
    return new Timestamp(date.getTime());
  }

  public Timestamp past(int atMost, TimeUnit unit, Date referenceDate) {
    Date date = super.past(atMost, unit, referenceDate);
    return new Timestamp(date.getTime());
  }

  public Timestamp between(Date from, Date to) throws IllegalArgumentException {
    Date date = super.between(from, to);
    return new Timestamp(date.getTime());
  }

  public Timestamp birthday() {
    Date date = super.birthday();
    return new Timestamp(date.getTime());
  }

  public Timestamp birthday(int minAge, int maxAge) {
    Date date = super.birthday(minAge, maxAge);
    return new Timestamp(date.getTime());
  }
}

 with the following error information:
[ERROR] /flink-faker/src/main/java/com/github/knaufk/flink/faker/DateTime.java:[46,31] incompatible types: java.util.Date cannot be converted to java.sql.Timestamp




 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error.
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
 