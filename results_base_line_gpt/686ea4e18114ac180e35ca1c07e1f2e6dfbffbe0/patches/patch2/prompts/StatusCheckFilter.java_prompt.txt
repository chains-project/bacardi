 Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.
 the following client code fails:
package com.wire.lithium.server.monitoring;

import ch.qos.logback.access.spi.IAccessEvent;
import ch.qos.logback.core.filter.Filter;
import ch.qos.logback.core.spi.FilterReply;
import com.fasterxml.jackson.annotation.JsonTypeName;
import ch.qos.logback.core.spi.FilterFactory; // Updated import


@JsonTypeName("status-filter-factory")
public class StatusCheckFilter implements FilterFactory<IAccessEvent> {
    @Override
    public Filter<IAccessEvent> build() {
        return new Filter<>() {
            @Override
            public FilterReply decide(IAccessEvent event) {
                if (event.getRequestURI().contains("/status")) {
                    return FilterReply.DENY;
                }
                if (event.getRequestURI().contains("/swagger")) {
                    return FilterReply.DENY;
                }
                if (event.getRequestURI().contains("/metrics")) {
                    return FilterReply.DENY;
                }
                return FilterReply.NEUTRAL;
            }
        };
    }
}

 with the following error information:
[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java:[11,43] cannot find symbol
  symbol: class FilterFactory

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/StatusCheckFilter.java:[7,31] cannot find symbol
  symbol:   class FilterFactory
  location: package ch.qos.logback.core.spi




 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error.
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
 