```java
package org.sonatype.maven.polyglot.yaml;

import org.apache.maven.model.Contributor;
import org.apache.maven.model.Dependency;
import org.apache.maven.model.Developer;
import org.apache.maven.model.Model;
import org.apache.maven.model.Plugin;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import org.yaml.snakeyaml.error.YAMLException;
import org.yaml.snakeyaml.introspector.Property;
import org.yaml.snakeyaml.nodes.Node;
import org.yaml.snakeyaml.nodes.NodeTuple;
import org.yaml.snakeyaml.nodes.Tag;
import org.yaml.snakeyaml.representer.Represent;
import org.yaml.snakeyaml.representer.Representer;

import java.beans.IntrospectionException;
import java.util.*;

import static java.lang.String.format;

class ModelRepresenter extends Representer {
  public ModelRepresenter() {
    super(); // Explicitly call the super constructor
    this.representers.put(Xpp3Dom.class, new RepresentXpp3Dom());
    Represent stringRepresenter = this.representers.get(String.class);
    this.representers.put(Boolean.class, stringRepresenter);
    this.multiRepresenters.put(Number.class, stringRepresenter);
    this.multiRepresenters.put(Date.class, stringRepresenter);
    this.multiRepresenters.put(Enum.class, stringRepresenter);
    this.multiRepresenters.put(Calendar.class, stringRepresenter);
  }

  protected Set<Property> getProperties(Class<? extends Object> type) throws IntrospectionException {
    if (type.isAssignableFrom(Model.class)) {
      return sortTypeWithOrder(type, ORDER_MODEL);
    } else if (type.isAssignableFrom(Developer.class)) {
      return sortTypeWithOrder(type, ORDER_DEVELOPER);
    } else if (type.isAssignableFrom(Contributor.class)) {
      return sortTypeWithOrder(type, ORDER_CONTRIBUTOR);
    } else if (type.isAssignableFrom(Dependency.class)) {
      return sortTypeWithOrder(type, ORDER_DEPENDENCY);
    } else if (type.isAssignableFrom(Plugin.class)) {
      return sortTypeWithOrder(type, ORDER_PLUGIN);
    } else {
      return super.getProperties(type);
    }
  }

  private Set<Property> sortTypeWithOrder(Class<? extends Object> type, List<String> order) throws IntrospectionException {
    Set<Property> standard = super.getProperties(type);
    Set<Property> sorted = new TreeSet<Property>(new ModelPropertyComparator(order));
    sorted.addAll(standard);
    return sorted;
  }

  private class ModelPropertyComparator implements Comparator<Property> {
    private List<String> names;

    public ModelPropertyComparator(List<String> names) {
      this.names = names;
    }

    public int compare(Property o1, Property o2) {
      for (String name : names) {
        int c = compareByName(o1, o2, name);
        if (c != 0) {
          return c;
        }
      }
      return o1.compareTo(o2);
    }

    private int compareByName(Property o1, Property o2, String name) {
      if (o1.getName().equals(name)) {
        return -1;
      } else if (o2.getName().equals(name)) {
        return 1;
      }
      return 0;
    }
  }
}
```
