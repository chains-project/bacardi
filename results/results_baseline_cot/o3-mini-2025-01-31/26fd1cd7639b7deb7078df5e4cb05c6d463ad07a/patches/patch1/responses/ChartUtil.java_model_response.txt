<code_analysis>
1. Error message analysis:
   - The error indicates that the class ScriptResult and its package com.gargoylesoftware.htmlunit are not available.
   - The error messages at line 35 (in getChartDataById) and line 60 (in getDataOfOnlyChartOnPageWithGivenToolAttribute) point to the use of ScriptResult.
   - This is likely due to a breaking dependency update where HtmlUnit is no longer included or has changed its API.

2. Client code analysis:
   - In both methods getChartDataById and getDataOfOnlyChartOnPageWithGivenToolAttribute, the code instantiates a ScriptResult from the output of pageObject.executeScript.
   - The ScriptResult is then used to call getJavaScriptResult().
   - Since the dependency no longer provides ScriptResult, we need to remove its usage and directly use the result from executeScript.

3. Proposed changes:
   - Remove the import for com.gargoylesoftware.htmlunit.ScriptResult.
   - In both getChartDataById and getDataOfOnlyChartOnPageWithGivenToolAttribute, remove the instantiation of ScriptResult.
   - Instead, directly cast or check for null on the result from pageObject.executeScript and convert it to string if not null.
   - For getDataOfOnlyChartOnPageWithGivenToolAttribute, also adjust the querySelector (removing an extra space) for consistency.
   - All function signatures remain unchanged.

4. Side effects and checks:
   - The patch assumes that pageObject.executeScript now returns the actual JavaScript result directly.
   - No changes are made to the logic of the code aside from the dependency-specific modifications.
</code_analysis>

```java
package io.jenkins.plugins.coverage.util;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;

// Removed the HtmlUnit ScriptResult import since it's no longer available.
// import com.gargoylesoftware.htmlunit.ScriptResult;

import org.jenkinsci.test.acceptance.po.PageObject;

/**
 * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.
 */
@SuppressWarnings("hideutilityclassconstructor")
// TODO: Move this code to ATH so we can reuse it from other plugins
public class ChartUtil {
    private static final int MAX_ATTEMPTS = 5;

    /**
     * Returns a chart's data by its id.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return data as json
     */
    public static String getChartDataById(final PageObject pageObject, final String elementId) {
        if (isChartDisplayedByElementId(pageObject, elementId)) {
            Object result = pageObject.executeScript(String.format(
                    "delete(window.Array.prototype.toJSON); " +
                    "return JSON.stringify(echarts.getInstanceByDom(document.getElementById('%s')).getOption());",
                    elementId));
            return result != null ? result.toString() : null;
        }
        return null;
    }

    /**
     * Returns data of only chart with given tool attribute value on page.
     *
     * @param pageObject
     *         which contains only one chart with given tool attribute value
     * @param toolAttribute
     *         value in div tag of chart
     *
     * @return data as json
     */
    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,
            final String toolAttribute) {
        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {
            for (int i = 0; i < MAX_ATTEMPTS; i++) {
                Object result = pageObject.executeScript(String.format(
                        "delete(window.Array.prototype.toJSON); " +
                        "return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\"div[tool='%s']\")).getOption());",
                        toolAttribute));
                if (result != null) {
                    return result.toString();
                }
                pageObject.elasticSleep(1000);
            }
        }
        throw new java.util.NoSuchElementException("Found no trend chart with tool attribute: " + toolAttribute);
    }

    /**
     * Returns if chart is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {
        try {
            WebElement chart = pageObject.find(By.id(elementId));
            return chart != null && chart.isDisplayed();
        }
        catch (NoSuchElementException exception) {
            return false;
        }
    }

    /**
     * Returns if a chart with given tool attribute in div tag is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param toolAttribute
     *         of div tag of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {
        try {
            WebElement chart = pageObject.find(By.cssSelector("div[tool='" + toolAttribute + "']"));
            return chart != null && chart.isDisplayed();
        }
        catch (NoSuchElementException exception) {
            return false;
        }
    }
}
```
