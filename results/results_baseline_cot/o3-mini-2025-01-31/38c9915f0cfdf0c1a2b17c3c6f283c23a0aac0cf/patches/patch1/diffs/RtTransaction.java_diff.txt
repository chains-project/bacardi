30c30
< import java.util.List;
---
> import java.util.Arrays;
32,44d31
< import org.cactoos.Text;
< import org.cactoos.iterable.LengthOf;
< import org.cactoos.list.ListOf;
< import org.cactoos.scalar.IoCheckedScalar;
< import org.cactoos.scalar.ItemAt;
< import org.cactoos.scalar.StickyScalar;
< import org.cactoos.scalar.UncheckedScalar;
< import org.cactoos.text.FormattedText;
< import org.cactoos.text.SplitText;
< import org.cactoos.text.TextOf;
< import org.cactoos.text.TrimmedText;
< import org.cactoos.text.UncheckedText;
< import org.cactoos.time.ZonedDateTimeOf;
60d46
<         //@checkstyle LineLengthCheck (1 line)
77,78c63
<     private static final Pattern DTLS =
<         Pattern.compile("[A-Za-z0-9 -.]{1,512}");
---
>     private static final Pattern DTLS = Pattern.compile("[A-Za-z0-9 -.]{1,512}");
86c71
<      * String representation of transaction.
---
>      * The original transaction string.
88c73,78
<     private final IoCheckedScalar<String> transaction;
---
>     private final String transaction;
> 
>     /**
>      * The split parts of the transaction.
>      */
>     private final String[] parts;
92a83
>      * @throws IOException if the transaction string is invalid
94,105c85,92
<     RtTransaction(final String trnsct) {
<         this.transaction = new IoCheckedScalar<>(
<             new StickyScalar<>(
<                 () -> {
<                     if (
<                         new TrimmedText(
<                             new TextOf(trnsct)
<                         ).asString().isEmpty()
<                     ) {
<                         throw new IOException(
<                             "Invalid transaction string: string is empty"
<                         );
---
>     RtTransaction(final String trnsct) throws IOException {
>         if (trnsct == null || trnsct.trim().isEmpty()) {
>             throw new IOException("Invalid transaction string: string is empty");
>         }
>         String[] fields = trnsct.split(";", -1);
>         if (fields.length != 7) {
>             throw new IOException(String.format(
>                 "Invalid transaction string: expected 7 fields, but found %d", fields.length));
107,124c94,95
<                     final List<Text> pieces =
<                         new ListOf<>(
<                             new SplitText(trnsct, ";")
<                         );
<                     // @checkstyle MagicNumberCheck (1 line)
<                     if (new LengthOf(pieces).intValue() != 7) {
<                         throw new IOException(
<                             new FormattedText(
<                                 // @checkstyle LineLength (1 line)
<                                 "Invalid transaction string: expected 7 fields, but found %d",
<                                 pieces.size()
<                             ).asString()
<                         );
<                     }
<                     return trnsct;
<                 }
<             )
<         );
---
>         this.transaction = trnsct;
>         this.parts = fields;
130,136c101
<         final String ident = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     0, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         final String ident = this.parts[0].trim();
138,141c103
<             throw new IOException(
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
---
>             throw new IOException(String.format(
143,146c105
<                         ident
<                     )
<                 ).asString()
<             );
---
>                 ident));
148d106
<         // @checkstyle MagicNumber (1 line)
154,163c112,117
<         return new ZonedDateTimeOf(
<             new UncheckedText(
<                 new IoCheckedScalar<>(
<                     new ItemAt<>(
<                         1, new SplitText(this.transaction.value(), ";")
<                     )
<                 ).value()
<             ).asString(),
<             DateTimeFormatter.ISO_OFFSET_DATE_TIME
<         ).value();
---
>         final String timeStr = this.parts[1].trim();
>         try {
>             return ZonedDateTime.parse(timeStr, DateTimeFormatter.ISO_OFFSET_DATE_TIME);
>         } catch (Exception e) {
>             throw new IOException("Invalid time format: " + timeStr, e);
>         }
168,174c122
<         final String amnt = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     2, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
---
>         final String amnt = this.parts[2].trim();
176,179c124
<             throw new IOException(
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
---
>             throw new IOException(String.format(
181,184c126
<                         amnt
<                     )
<                 ).asString()
<             );
---
>                 amnt));
186d127
<         // @checkstyle MagicNumber (1 line)
192,201c133,134
<         final String prefix = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     3, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         //@checkstyle MagicNumberCheck (1 line)
<         if (prefix.length() < 8 || prefix.length() > 32) {
---
>         final String pfx = this.parts[3].trim();
>         if (pfx.length() < 8 || pfx.length() > 32) {
204c137
<         if (!RtTransaction.PREFIX.matcher(prefix).matches()) {
---
>         if (!RtTransaction.PREFIX.matcher(pfx).matches()) {
207c140
<         return prefix;
---
>         return pfx;
212,229c145,148
<         final String bnf = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     4, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         if (!RtTransaction.HEX.matcher(bnf).matches()) {
<             throw new IOException(
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
<                         "Invalid bnf string '%s', expecting hex string with 16 symbols",
<                         bnf
<                     )
<                 ).asString()
<             );
---
>         final String bnfStr = this.parts[4].trim();
>         if (!RtTransaction.HEX.matcher(bnfStr).matches()) {
>             throw new IOException(String.format(
>                 "Invalid bnf string '%s', expecting hex string with 16 symbols", bnfStr));
231c150
<         return bnf;
---
>         return bnfStr;
236,248c155,157
<         final String dtls = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     5, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         if (!RtTransaction.DTLS.matcher(dtls).matches()) {
<             throw new IOException(
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
---
>         final String dtlsStr = this.parts[5].trim();
>         if (!RtTransaction.DTLS.matcher(dtlsStr).matches()) {
>             throw new IOException(String.format(
250,253c159
<                         dtls, RtTransaction.DTLS
<                     )
<                 ).asString()
<             );
---
>                 dtlsStr, DTLS.pattern()));
255c161
<         return dtls;
---
>         return dtlsStr;
260,279c166,169
<         final String sign = new UncheckedText(
<             new IoCheckedScalar<>(
<                 new ItemAt<>(
<                     //@checkstyle MagicNumberCheck (1 line)
<                     6, new SplitText(this.transaction.value(), ";")
<                 )
<             ).value()
<         ).asString();
<         // @checkstyle MagicNumber (1 line)
<         if (sign.length() != 684
<             || !RtTransaction.SIGN.matcher(sign).matches()) {
<             throw new IOException(
<                 new UncheckedText(
<                     new FormattedText(
<                         // @checkstyle LineLength (1 line)
<                         "Invalid signature '%s', expecting base64 string with 684 characters",
<                         sign
<                     )
<                 ).asString()
<             );
---
>         final String sign = this.parts[6].trim();
>         if (sign.length() != 684 || !RtTransaction.SIGN.matcher(sign).matches()) {
>             throw new IOException(String.format(
>                 "Invalid signature '%s', expecting base64 string with 684 characters", sign));
286c176
<         return new UncheckedScalar<>(this.transaction).value();
---
>         return this.transaction;
