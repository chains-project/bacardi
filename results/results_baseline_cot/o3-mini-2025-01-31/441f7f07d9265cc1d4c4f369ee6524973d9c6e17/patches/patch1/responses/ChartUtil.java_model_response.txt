<code_analysis>
1. Analysis of the error message:
   - The errors indicate that the class ScriptResult and its package (com.gargoylesoftware.htmlunit) cannot be found. This suggests that a dependency update has removed or relocated the ScriptResult class.
   - The errors occur in getChartDataById (line 35) and getDataOfOnlyChartOnPageWithGivenToolAttribute (line 60) where ScriptResult is used.
2. Review of the client code:
   - The code calls pageObject.executeScript() and then wraps its result in a ScriptResult object.
   - Since ScriptResult is no longer available after the dependency update, the code should handle the returned Object directly.
3. Proposed changes (constraints followed):
   - Remove the import for com.gargoylesoftware.htmlunit.ScriptResult.
   - In both methods, eliminate the use of ScriptResult and just check the result from executeScript. If non-null, convert it to string and return it.
   - Keep the method signatures unchanged; simply remove the dependency on ScriptResult.
4. Summary of modifications:
   - Remove the ScriptResult import.
   - In getChartDataById: Replace the creation of a new ScriptResult with a check on the returned Object.
   - In getDataOfOnlyChartOnPageWithGivenToolAttribute: Do the same replacement for ScriptResult usage.
</code_analysis>

Below is the complete, fixed Java class:

```java
package io.jenkins.plugins.coverage.util;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.jenkinsci.test.acceptance.po.PageObject;

/**
 * Charts are displayed on multiple PageObjects. This util provides some helper methods to deal with charts.
 */
@SuppressWarnings("hideutilityclassconstructor")
// TODO: Move this code to ATH so we can reuse it from other plugins
public class ChartUtil {
    private static final int MAX_ATTEMPTS = 5;

    /**
     * Returns a chart's data by its id.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return data as json
     */
    public static String getChartDataById(final PageObject pageObject, final String elementId) {
        if (isChartDisplayedByElementId(pageObject, elementId)) {
            Object scriptResult = pageObject.executeScript(String.format(
                    "delete(window.Array.prototype.toJSON) %n"
                    + "return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\"%s\")).getOption())",
                    elementId));
            if (scriptResult != null) {
                return scriptResult.toString();
            }
        }
        return null;
    }

    /**
     * Returns data of only chart with given tool attribute value on page.
     *
     * @param pageObject
     *         which contains only one chart with given tool attribute value
     * @param toolAttribute
     *         value in div tag of chart
     *
     * @return data as json
     */
    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,
            final String toolAttribute) {
        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {
            for (int i = 0; i < MAX_ATTEMPTS; i++) {
                Object scriptResult = pageObject.executeScript(String.format(
                        "delete(window.Array.prototype.toJSON) %n"
                        + "return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\"div [tool='%s']\")).getOption())",
                        toolAttribute));

                if (scriptResult != null) {
                    return scriptResult.toString();
                }
                pageObject.elasticSleep(1000);
            }
        }
        throw new java.util.NoSuchElementException("Found no trend chart with ID '" + toolAttribute + "'");
    }

    /**
     * Returns if chart is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {
        try {
            WebElement chart = pageObject.find(By.id(elementId));
            return chart != null && chart.isDisplayed();
        } catch (NoSuchElementException exception) {
            return false;
        }
    }

    /**
     * Returns if a chart with given tool attribute in div tag is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param toolAttribute
     *         of div tag of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {
        try {
            WebElement chart = pageObject.find(By.cssSelector("div[tool='" + toolAttribute + "']"));
            return chart != null && chart.isDisplayed();
        } catch (NoSuchElementException exception) {
            return false;
        }
    }
}
```
