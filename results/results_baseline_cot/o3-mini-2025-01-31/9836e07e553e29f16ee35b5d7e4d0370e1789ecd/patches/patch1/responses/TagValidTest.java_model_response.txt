<code_analysis>
1. Error analysis:
   - The error message indicates that the constructor for StringContains is being called with two parameters (a boolean and a String), but the updated dependency version now only accepts a single String argument. The errors occur on the lines constructing new StringContains(true, "Invalid tag") and new StringContains(false, original).
   - This change in the dependency (Hamcrest) breaks the previous constructor signature that accepted a boolean flag.

2. Code review:
   - In the test method shouldFailToGetValueWhenInvalid, two matchers are constructed:
       • new StringContains(true, "Invalid tag")
       • new StringContains(false, original)
   - The first matcher is intended to assert that the exception message contains the substring "Invalid tag".
   - The second matcher is intended to assert that the exception message does NOT contain the original invalid tag.
   
3. Proposed fixes:
   - Change new StringContains(true, "Invalid tag") to new StringContains("Invalid tag") for checking that the message includes "Invalid tag".
   - Replace new StringContains(false, original) with a negated matcher. We can use IsNot.not(new StringContains(original)) to check that the message does not include the original string.
   - Add the required import for org.hamcrest.core.IsNot.

4. Side effects:
   - Only the matcher construction is modified. No function signatures are changed.
   - This fix directly addresses the incompatibility with the updated dependency without removing or altering any functionality beyond the compilation issue.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2022 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker;

import com.artipie.docker.error.InvalidTagNameException;
import java.util.Arrays;
import org.hamcrest.MatcherAssert;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNot;
import org.hamcrest.core.StringContains;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

/**
 * Tests for {@link Tag.Valid}.
 *
 * @since 0.2
 */
class TagValidTest {

    @ParameterizedTest
    @ValueSource(strings = {
        "latest",
        "1.0",
        "my-tag",
        "MY_TAG",
        "My.Tag.1",
        "_some_tag",
        // @checkstyle LineLengthCheck (1 line)
        "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"
    })
    void shouldGetValueWhenValid(final String original) {
        final Tag.Valid tag = new Tag.Valid(original);
        MatcherAssert.assertThat(tag.valid(), new IsEqual<>(true));
        MatcherAssert.assertThat(tag.value(), new IsEqual<>(original));
    }

    @ParameterizedTest
    @ValueSource(strings = {
        "",
        ".0",
        "*",
        "\u00ea",
        "-my-tag",
        // @checkstyle LineLengthCheck (1 line)
        "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678"
    })
    void shouldFailToGetValueWhenInvalid(final String original) {
        final Tag.Valid tag = new Tag.Valid(original);
        MatcherAssert.assertThat(tag.valid(), new IsEqual<>(false));
        final Throwable throwable = Assertions.assertThrows(
            InvalidTagNameException.class,
            tag::value
        );
        MatcherAssert.assertThat(
            throwable.getMessage(),
            new AllOf<>(
                Arrays.asList(
                    new StringContains("Invalid tag"),
                    IsNot.not(new StringContains(original))
                )
            )
        );
    }
}
```
