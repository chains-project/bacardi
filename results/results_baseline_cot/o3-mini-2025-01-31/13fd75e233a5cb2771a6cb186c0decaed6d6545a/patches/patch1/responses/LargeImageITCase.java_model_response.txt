<code_analysis>
1. The error message indicates that the constructor for org.hamcrest.core.StringContains now expects only a single String argument rather than a boolean and a String. The specific errors are on the lines where StringContains is instantiated with two parameters. This implies a breaking change in the dependency update (likely an update of the Hamcrest library).

2. In the client code, in the tests largeImagePullWorks() and largeImageUploadWorks(), the following lines are problematic:
   - In largeImagePullWorks(): new StringContains(false, String.format(...))
   - In largeImageUploadWorks(): new StringContains(false, "Pushed")
   These calls no longer match the updated constructor signature.

3. To fix this issue, we need to remove the boolean argument. Since the older boolean was used to indicate case-sensitivity and by default the new constructor uses case-sensitive matching, removing it should maintain the intended behavior.

4. The necessary changes are:
   - Replace new StringContains(false, String.format(...)) with new StringContains(String.format(...))
   - Replace new StringContains(false, "Pushed") with new StringContains("Pushed")
   No other changes are necessary, and function signatures must remain unchanged.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2023 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker.http;

import com.artipie.asto.fs.FileStorage;
import com.artipie.asto.test.TestResource;
import com.artipie.docker.asto.AstoDocker;
import com.artipie.docker.junit.DockerClient;
import com.artipie.docker.junit.DockerClientSupport;
import com.artipie.docker.junit.DockerRepository;
import java.nio.file.Path;
import org.hamcrest.MatcherAssert;
import org.hamcrest.core.StringContains;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledOnOs;
import org.junit.jupiter.api.condition.OS;
import org.junit.jupiter.api.io.TempDir;

/**
 * Integration test for large file pushing scenario of {@link DockerSlice}.
 *
 * @since 0.3
 */
@DockerClientSupport
@DisabledOnOs(OS.WINDOWS)
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public final class LargeImageITCase {
    /**
     * Docker image name.
     */
    private static final String IMAGE = "large-image";

    /**
     * Docker client.
     */
    private DockerClient client;

    /**
     * Docker repository.
     */
    private DockerRepository repository;

    @BeforeEach
    void setUp(final @TempDir Path storage) {
        this.repository = new DockerRepository(
            new AstoDocker(new FileStorage(storage))
        );
        this.repository.start();
    }

    @AfterEach
    void tearDown() {
        this.repository.stop();
    }

    @Test
    void largeImagePullWorks() throws Exception {
        try {
            this.buildImage();
            this.client.run("push", this.remote());
            this.client.run("image", "rm", this.remote());
            final String output = this.client.run("pull", this.remote());
            MatcherAssert.assertThat(
                output,
                new StringContains(String.format("Status: Downloaded newer image for %s", this.remote()))
            );
        } finally {
            this.client.run("rmi", this.remote());
        }
    }

    @Test
    void largeImageUploadWorks() throws Exception {
        try {
            this.buildImage();
            final String output = this.client.run("push", this.remote());
            MatcherAssert.assertThat(output, new StringContains("Pushed"));
        } finally {
            this.client.run("rmi", this.remote());
        }
    }

    private void buildImage() throws Exception {
        this.client.run("build", this.dockerFile().getParent().toString(), "-t", this.remote());
    }

    private Path dockerFile() {
        return new TestResource("large-image/Dockerfile").asPath();
    }

    private String remote() {
        return String.format("%s/%s", this.repository.url(), LargeImageITCase.IMAGE);
    }
}
```
