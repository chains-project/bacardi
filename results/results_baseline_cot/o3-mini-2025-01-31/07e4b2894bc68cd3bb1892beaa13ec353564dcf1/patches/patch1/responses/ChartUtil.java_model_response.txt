<code_analysis>
1. Error message analysis:
   - The error indicates that the class ScriptResult cannot be found, and the package com.gargoylesoftware.htmlunit (which provided ScriptResult in earlier versions) no longer exists in the updated dependency.
   - The error points to its usage in both getChartDataById (line around 35) and getDataOfOnlyChartOnPageWithGivenToolAttribute (line around 60).

2. Client code review:
   - The ScriptResult class is used to wrap the result of a call to pageObject.executeScript, and then its JavaScript result is extracted.
   - The dependency in question (htmlunit’s ScriptResult) has been removed or updated in the new dependency version, leading to compilation errors.

3. Proposed fixes:
   - Remove the import statement for com.gargoylesoftware.htmlunit.ScriptResult.
   - Remove the usage of ScriptResult in both methods and instead directly work with the result returned by pageObject.executeScript.
   - Since pageObject.executeScript already returns an Object (most likely the JSON string desired), the code can be simplified by checking for null and converting the result to a string.
   - No change to function signatures or other logic that doesn’t directly cause a compile error.

4. Changes summary:
   - Remove the import for ScriptResult.
   - In getChartDataById: eliminate "new ScriptResult(result)" and directly return result.toString() if result is not null.
   - In getDataOfOnlyChartOnPageWithGivenToolAttribute: do the same for the script result handling.
   - These changes address the dependency update while retaining the intended functionality.
</code_analysis>

```java
package io.jenkins.plugins.coverage.util;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.jenkinsci.test.acceptance.po.PageObject;

/**
 * Charts are displayed on multiple PageObjects. This util provides some helper methods to deal with charts.
 */
// Note: The usage of ScriptResult from com.gargoylesoftware.htmlunit has been removed due to dependency updates.
@SuppressWarnings("hideutilityclassconstructor")
// TODO: Move this code to ATH so we can reuse it from other plugins
public class ChartUtil {
    private static final int MAX_ATTEMPTS = 5;

    /**
     * Returns a chart's data by its id.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return data as json
     */
    public static String getChartDataById(final PageObject pageObject, final String elementId) {
        if (isChartDisplayedByElementId(pageObject, elementId)) {
            Object result = pageObject.executeScript(String.format(
                    "delete(window.Array.prototype.toJSON) %n"
                    + "return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\"%s\")).getOption())",
                    elementId));
            return result != null ? result.toString() : null;
        }
        return null;
    }

    /**
     * Returns data of only chart with given tool attribute value on page.
     *
     * @param pageObject
     *         which contains only one chart with given tool attribute value
     * @param toolAttribute
     *         value in div tag of chart
     *
     * @return data as json
     */
    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,
            final String toolAttribute) {
        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {
            for (int i = 0; i < MAX_ATTEMPTS; i++) {
                Object result = pageObject.executeScript(String.format(
                        "delete(window.Array.prototype.toJSON) %n"
                        + "return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\"div [tool='%s']\")).getOption())",
                        toolAttribute));

                if (result != null) {
                    return result.toString();
                }
                pageObject.elasticSleep(1000);
            }
        }
        throw new java.util.NoSuchElementException("Found no trend chart with ID '%s''" + toolAttribute);
    }

    /**
     * Returns if chart is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {
        try {
            WebElement chart = pageObject.find(By.id(elementId));
            return chart != null && chart.isDisplayed();
        } catch (NoSuchElementException exception) {
            return false;
        }
    }

    /**
     * Returns if a chart with given tool attribute in div tag is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param toolAttribute
     *         of div tag of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {
        try {
            WebElement chart = pageObject.find(By.cssSelector("div[tool='" + toolAttribute + "']"));
            return chart != null && chart.isDisplayed();
        } catch (NoSuchElementException exception) {
            return false;
        }
    }
}
```
