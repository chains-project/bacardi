 Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.
 the following client code fails:

```java
package com.redislabs.redisgraph.impl.api;

import java.util.List;

import com.redislabs.redisgraph.RedisGraphContext;
import com.redislabs.redisgraph.ResultSet;
import com.redislabs.redisgraph.exceptions.JRedisGraphException;
import com.redislabs.redisgraph.impl.Utils;
import com.redislabs.redisgraph.impl.graph_cache.RedisGraphCaches;
import com.redislabs.redisgraph.impl.resultset.ResultSetImpl;

import redis.clients.jedis.Client;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.exceptions.JedisDataException;
import redis.clients.jedis.util.SafeEncoder;

/**
 * An implementation of RedisGraphContext. Allows sending RedisGraph and some Redis commands,
 * within a specific connection context
 */
public class ContextedRedisGraph extends AbstractRedisGraph implements RedisGraphContext, RedisGraphCacheHolder {

    private final Jedis connectionContext;
    private RedisGraphCaches caches;

    /**
     * Generates a new instance with a specific Jedis connection
     * @param connectionContext
     */
    public ContextedRedisGraph(Jedis connectionContext) {
        this.connectionContext = connectionContext;
    }

    /**
     * Overrides the abstract method. Return the instance only connection
     * @return
     */
    @Override
    protected Jedis getConnection() {
        return this.connectionContext;
    }

    /**
     * Sends the query over the instance only connection
     * @param graphId graph to be queried
     * @param preparedQuery prepared query
     * @return Result set with the query answer
     */
    @Override
    protected ResultSet sendQuery(String graphId, String preparedQuery) {
        Jedis conn = getConnection();
        try {
            @SuppressWarnings("unchecked")
            List<Object> rawResponse = (List<Object>) conn.sendCommand(RedisGraphCommand.QUERY, graphId, preparedQuery, Utils.COMPACT_STRING);
            return new ResultSetImpl(rawResponse, this, caches.getGraphCache(graphId));
        } catch (JRedisGraphException rt) {
            throw rt;
        } catch (JedisDataException j) {
            throw new JRedisGraphException(j);
        }
    }

    /**
     * Sends the read-only query over the instance only connection
     * @param graphId graph to be queried
     * @param preparedQuery prepared query
     * @return Result set with the query answer
     */
    @Override
    protected ResultSet sendReadOnlyQuery(String graphId, String preparedQuery) {
        Jedis conn = getConnection();
        try {
            @SuppressWarnings("unchecked")
            List<Object> rawResponse = (List<Object>) conn.sendCommand(RedisGraphCommand.RO_QUERY, graphId, preparedQuery, Utils.COMPACT_STRING);
            return new ResultSetImpl(rawResponse, this, caches.getGraphCache(graphId));
        } catch (JRedisGraphException ge) {
            throw ge;
        } catch (JedisDataException de) {
            throw new JRedisGraphException(de);
        }
    }

    /**
     * Sends the query over the instance only connection
     * @param graphId graph to be queried
     * @param timeout
     * @param preparedQuery prepared query
     * @return Result set with the query answer
     */
    @Override
    protected ResultSet sendQuery(String graphId, String preparedQuery, long timeout) {
        Jedis conn = getConnection();
        try {
            @SuppressWarnings("unchecked")
            List<Object> rawResponse = (List<Object>) conn.sendBlockingCommand(RedisGraphCommand.QUERY,
                    graphId, preparedQuery, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING, Long.toString(timeout));
            return new ResultSetImpl(rawResponse, this, caches.getGraphCache(graphId));
        } catch (JRedisGraphException rt) {
            throw rt;
        } catch (JedisDataException j) {
            throw new JRedisGraphException(j);
        }
    }

    /**
     * Sends the read-only query over the instance only connection
     * @param graphId graph to be queried
     * @param timeout
     * @param preparedQuery prepared query
     * @return Result set with the query answer
     */
    @Override
    protected ResultSet sendReadOnlyQuery(String graphId, String preparedQuery, long timeout) {
        Jedis conn = getConnection();
        try {
            @SuppressWarnings("unchecked")
            List<Object> rawResponse = (List<Object>) conn.sendBlockingCommand(RedisGraphCommand.RO_QUERY,
                    graphId, preparedQuery, Utils.COMPACT_STRING, Utils.TIMEOUT_STRING, Long.toString(timeout));
            return new ResultSetImpl(rawResponse, this, caches.getGraphCache(graphId));
        } catch (JRedisGraphException ge) {
            throw ge;
        } catch (JedisDataException de) {
            throw new JRedisGraphException(de);
        }
    }

    /**
     * @return Returns the instance Jedis connection.
     */
    @Override
    public Jedis getConnectionContext() {
        return this.connectionContext;
    }

    /**
     * Creates a new RedisGraphTransaction transactional object
     * @return new RedisGraphTransaction
     */
    @Override
    public RedisGraphTransaction multi() {
        Jedis jedis = getConnection();
        Client client = jedis.getClient();
        client.multi();
        client.getOne();
        RedisGraphTransaction transaction = new RedisGraphTransaction(client, this);
        transaction.setRedisGraphCaches(caches);
        return transaction;
    }

    /**
     * Creates a new RedisGraphPipeline pipeline object
     * @return new RedisGraphPipeline
     */
    @Override
    public RedisGraphPipeline pipelined() {
        Jedis jedis = getConnection();
        Client client = jedis.getClient();
        RedisGraphPipeline pipeline = new RedisGraphPipeline(client, this);
        pipeline.setRedisGraphCaches(caches);
        return pipeline;
    }

    /**
     * Perfrom watch over given Redis keys
     * @param keys
     * @return "OK"
     */
    @Override
    public String watch(String... keys) {
        return this.getConnection().watch(keys);
    }

    /**
     * Removes watch from all keys
     * @return
     */
    @Override
    public String unwatch() {
        return this.getConnection().unwatch();
    }

    /**
     * Deletes the entire graph
     * @param graphId graph to delete
     * @return delete running time statistics
     */
    @Override
    public String deleteGraph(String graphId) {
        Jedis conn = getConnection();
        Object response;
        try {
            response = conn.sendCommand(RedisGraphCommand.DELETE, graphId);
        } catch (Exception e) {
            conn.close();
            throw e;
        }
        //clear local state
        caches.removeGraphCache(graphId);
        return SafeEncoder.encode((byte[]) response);
    }

    /**
     * closes the Jedis connection
     */
    @Override
    public void close() {
        this.connectionContext.close();

    }

    @Override
    public void setRedisGraphCaches(RedisGraphCaches caches) {
        this.caches = caches;
    }

}

```

 with the following error information:
[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/impl/api/ContextedRedisGraph.java:[157,9] cannot find symbol
  symbol:   class Client
  location: class com.redislabs.redisgraph.impl.api.ContextedRedisGraph

[ERROR] /JRedisGraph/src/main/java/com/redislabs/redisgraph/impl/api/ContextedRedisGraph.java:[142,9] cannot find symbol
  symbol:   class Client
  location: class com.redislabs.redisgraph.impl.api.ContextedRedisGraph


The error is caused by a change in the API of the dependency. The new library version includes the following changes:
Method redis.clients.jedis.Transaction.getClient(java.lang.String) has been removed in the new version of the dependency.
Method redis.clients.jedis.BinaryJedis.getClient() has been removed in the new version of the dependency.
Method redis.clients.jedis.Transaction.getClient(byte[]) has been removed in the new version of the dependency.
Method redis.clients.jedis.PipelineBase.getClient(byte[]) has been removed in the new version of the dependency.
Method redis.clients.jedis.PipelineBase.getClient(java.lang.String) has been removed in the new version of the dependency.
Method redis.clients.jedis.Jedis.getClient() has been added in the new version of the dependency.
Method redis.clients.jedis.ShardedJedisPipeline.getClient(byte[]) has been removed in the new version of the dependency.
Method redis.clients.jedis.Pipeline.getClient(byte[]) has been removed in the new version of the dependency.
Method redis.clients.jedis.Pipeline.getClient(java.lang.String) has been removed in the new version of the dependency.
Method redis.clients.jedis.ShardedJedisPipeline.getClient(java.lang.String) has been removed in the new version of the dependency.
Method redis.clients.jedis.Transaction.getClient(java.lang.String) has been removed in the new version of the dependency.
Method redis.clients.jedis.BinaryJedis.getClient() has been removed in the new version of the dependency.
Method redis.clients.jedis.Transaction.getClient(byte[]) has been removed in the new version of the dependency.
Method redis.clients.jedis.PipelineBase.getClient(byte[]) has been removed in the new version of the dependency.
Method redis.clients.jedis.PipelineBase.getClient(java.lang.String) has been removed in the new version of the dependency.
Method redis.clients.jedis.Jedis.getClient() has been added in the new version of the dependency.
Method redis.clients.jedis.ShardedJedisPipeline.getClient(byte[]) has been removed in the new version of the dependency.
Method redis.clients.jedis.Pipeline.getClient(byte[]) has been removed in the new version of the dependency.
Method redis.clients.jedis.Pipeline.getClient(java.lang.String) has been removed in the new version of the dependency.
Method redis.clients.jedis.ShardedJedisPipeline.getClient(java.lang.String) has been removed in the new version of the dependency.




 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Oxverride annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error. Don't use the comment "// ... (rest of the class remains unchanged)".
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
 