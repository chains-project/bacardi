1,16d0
< /*
<  * Copyright (C) 2007-2009 Jive Software. All rights reserved.
<  *
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  *
<  *     http://www.apache.org/licenses/LICENSE-2.0
<  *
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
< 
30a15
> import com.hazelcast.cluster.MemberSelector;
75,80d59
< /**
<  * CacheFactory implementation to use when using Hazelcast in cluster mode.
<  *
<  * @author Tom Evans
<  * @author Gaston Dombiak
<  */
137,140d115
<     /**
<      * Keep serialization strategy the server was using before we set our strategy. We will
<      * restore old strategy when plugin is unloaded.
<      */
142,145d116
< 
<     /**
<      * Storage for cache statistics
<      */
147d117
< 
153,156d122
< 
<     /**
<      * Keeps that running state. Initial state is stopped.
<      */
158,161d123
< 
<     /**
<      * Used to limit the amount of duplicate warnings logged.
<      */
166c128
<         pluginClassLoaderWarnings.setMaxLifetime(Duration.ofHours(1).toMillis()); // Minimum duration between logged warnings.
---
>         pluginClassLoaderWarnings.setMaxLifetime(Duration.ofHours(1).toMillis());
174d135
<         // Set the serialization strategy to use for transmitting objects between node clusters
178d138
<         // Store previous class loader (in case we change it)
205d164
<                 // CacheFactory is now using clustered caches. We can add our listeners.
230d188
<             // Restore previous class loader
238d195
<         // Stop the cache services.
240d196
<         // Update the running state of the cluster
242,244d197
< 
<         // Fire the leftClusterEvent before we leave the cluster - we need to access the clustered data before the
<         // cluster is shutdown so it can be copied in to the non-clustered, DefaultCache
246d198
<         // Stop the cluster
254,255d205
< 
<         // Reset packet router to use to deliver packets to remote cluster nodes
257d206
<         // Reset the session locator to use
259d207
<         // Set the old serialization strategy was using before clustering was loaded
265d212
<         // Check if cluster is being started up
267d213
<             // Wait until cluster is fully started (or failed)
271d216
<                 // Ignore
277d221
<         // Determine the time to live. Note that in Hazelcast 0 means "forever", not -1
280d223
<         // Determine the max cache size. Note that in Hazelcast the max cache size must be positive and is in megabytes
283d225
<         // It's only possible to create a dynamic config if a static one doesn't already exist
294d235
<         // TODO: Better genericize this method in CacheFactoryStrategy so we can stop suppressing this warning
324d264
<         // No longer depends on license code so just return a big number
331c271,276
<             final Member oldest = cluster.getMembers().iterator().next();
---
>             final Member oldest = cluster.getMembers(new MemberSelector() {
>                 @Override
>                 public boolean select(Member member) {
>                     return true;
>                 }
>             }).iterator().next();
347,353d291
<     /**
<      * Gets the pseudo-synchronized time from the cluster. While the cluster members may
<      * have varying system times, this method is expected to return a timestamp that is
<      * synchronized (or nearly so; best effort) across the cluster.
<      *
<      * @return Synchronized time for all cluster members
<      */
359,363d296
<     /*
<      * Execute the given task on the other (non-local) cluster members.
<      * Note that this method does not provide the result set for the given
<      * task, as the task is run asynchronously across the cluster.
<      */
366d298
< 
372,374c304,307
<         for (final Member member : cluster.getMembers()) {
<             if (!member.getUuid().equals(current.getUuid())) {
<                 members.add(member);
---
>         for (final Member member : cluster.getMembers(new MemberSelector() {
>             @Override
>             public boolean select(Member member) {
>                 return !member.getUuid().equals(current.getUuid());
375a309,310
>         })) {
>             members.add(member);
378d312
< 
380d313
<             // Asynchronously execute the task on the other cluster members
389,393d321
<     /*
<      * Execute the given task on the given cluster member.
<      * Note that this method does not provide the result set for the given
<      * task, as the task is run asynchronously across the cluster.
<      */
400d327
<         // Check that the requested member was found
402d328
<             // Asynchronously execute the task on the target member
413,417d338
<     /*
<      * Execute the given task on the designated cluster members.
<      * Note that this method blocks for up to MAX_CLUSTER_EXECUTION_TIME
<      * (seconds) per member until the task is run on all members.
<      */
425,427c346,349
<         for (final Member member : cluster.getMembers()) {
<             if (includeLocalMember || (!member.getUuid().equals(current.getUuid()))) {
<                 members.add(member);
---
>         for (final Member member : cluster.getMembers(new MemberSelector() {
>             @Override
>             public boolean select(Member member) {
>                 return includeLocalMember || !member.getUuid().equals(current.getUuid());
428a351,352
>         })) {
>             members.add(member);
432d355
<             // Asynchronously execute the task on the other cluster members
454,458d376
<     /*
<      * Execute the given task on the designated cluster member.
<      * Note that this method blocks for up to MAX_CLUSTER_EXECUTION_TIME
<      * (seconds) until the task is run on the given member.
<      */
466d383
<         // Check that the requested member was found
468d384
<             // Asynchronously execute the task on the target member
503c419,424
<         for (final Member member : cluster.getMembers()) {
---
>         for (final Member member : cluster.getMembers(new MemberSelector() {
>             @Override
>             public boolean select(Member member) {
>                 return true;
>             }
>         })) {
514d434
<             // Create the cacheStats map if necessary.
522,524d441
<                 // The following information is published:
<                 // current size, max size, num elements, cache
<                 // hits, cache misses.
533d449
<             // Publish message
548d463
<         // TODO: Update CacheFactoryStrategy so the signature is getLock(final Serializable key, Cache<Serializable, Serializable> cache)
553,561d467
<     /**
<      * ClusterTasks that are executed should not be provided by a plugin. These will cause issues related to class
<      * loading when the providing plugin is reloaded. This method verifies if an instance of a task is
<      * loaded by a plugin class loader, and logs a warning to the log files when it is. The amount of warnings logged is
<      * limited by a time interval.
<      *
<      * @param o the instance for which to verify the class loader
<      * @see <a href="https://github.com/igniterealtime/openfire-hazelcast-plugin/issues/74">Issue #74: Warn against usage of plugin-provided classes in Hazelcast</a>
<      */
566d471
<             // Try to determine what plugin loaded the offending class.
583c488
<             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now()); // Note that this Instant is unused.
---
>             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now());
684,685d588
<             // Add a listener at the ultimate end of the list of all listeners, to detect that left-cluster event handling
<             // has been invoked for all before proceeding.
699d601
< 
701,703d602
< 
< 
< 
