 Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.
 the following client code fails:

```java
/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
package org.codehaus.plexus.archiver.zip;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.nio.file.Files;

import org.apache.commons.io.output.ThresholdingOutputStream;

/**
 * Offloads to disk when a given memory consumption has been reacehd
 */
class OffloadingOutputStream extends ThresholdingOutputStream
{

    // ----------------------------------------------------------- Data members

    /**
     * The output stream to which data will be written prior to the theshold
     * being reached.
     */
    private ByteArrayOutputStream memoryOutputStream;

    /**
     * The output stream to which data will be written at any given time. This
     * will always be one of <code>memoryOutputStream</code> or
     * <code>diskOutputStream</code>.
     */
    private OutputStream currentOutputStream;

    /**
     * The file to which output will be directed if the threshold is exceeded.
     */
    private File outputFile = null;

    /**
     * The temporary file prefix.
     */
    private final String prefix;

    /**
     * The temporary file suffix.
     */
    private final String suffix;

    /**
     * The directory to use for temporary files.
     */
    private final File directory;

    /**
     * True when close() has been called successfully.
     */
    private boolean closed = false;

    // ----------------------------------------------------------- Constructors

    /**
     * Constructs an instance of this class which will trigger an event at the
     * specified threshold, and save data to a temporary file beyond that point.
     *
     * @param threshold The number of bytes at which to trigger an event.
     * @param prefix Prefix to use for the temporary file.
     * @param suffix Suffix to use for the temporary file.
     * @param directory Temporary file directory.
     *
     * @since 1.4
     */
    public OffloadingOutputStream( int threshold, String prefix, String suffix, File directory )
    {
        this( threshold, null, prefix, suffix, directory );
        if ( prefix == null )
        {
            throw new IllegalArgumentException( "Temporary file prefix is missing" );
        }
    }

    /**
     * Constructs an instance of this class which will trigger an event at the
     * specified threshold, and save data either to a file beyond that point.
     *
     * @param threshold The number of bytes at which to trigger an event.
     * @param outputFile The file to which data is saved beyond the threshold.
     * @param prefix Prefix to use for the temporary file.
     * @param suffix Suffix to use for the temporary file.
     * @param directory Temporary file directory.
     */
    private OffloadingOutputStream( int threshold, File outputFile, String prefix, String suffix, File directory )
    {
        super( threshold );
        this.outputFile = outputFile;

        memoryOutputStream = new ByteArrayOutputStream( threshold / 10 );
        currentOutputStream = memoryOutputStream;
        this.prefix = prefix;
        this.suffix = suffix;
        this.directory = directory;
    }

    // --------------------------------------- ThresholdingOutputStream methods

    /**
     * Returns the current output stream. This may be memory based or disk
     * based, depending on the current state with respect to the threshold.
     *
     * @return The underlying output stream.
     *
     * @exception java.io.IOException if an error occurs.
     */
    @Override
    protected OutputStream getStream() throws IOException
    {
        return currentOutputStream;
    }

    /**
     * Switches the underlying output stream from a memory based stream to one
     * that is backed by disk. This is the point at which we realise that too
     * much data is being written to keep in memory, so we elect to switch to
     * disk-based storage.
     *
     * @exception java.io.IOException if an error occurs.
     */
    @Override
    protected void thresholdReached() throws IOException
    {
        if ( prefix != null )
        {
            outputFile = File.createTempFile( prefix, suffix, directory );
        }
        currentOutputStream = Files.newOutputStream( outputFile.toPath() );
    }

    public InputStream getInputStream() throws IOException
    {

        InputStream memoryAsInput = memoryOutputStream.toInputStream();
        if ( outputFile == null )
        {
            return memoryAsInput;
        }
        return new SequenceInputStream( memoryAsInput, Files.newInputStream( outputFile.toPath() ) );
    }

    // --------------------------------------------------------- Public methods

    /**
     * Returns the data for this output stream as an array of bytes, assuming
     * that the data has been retained in memory. If the data was written to
     * disk, this method returns <code>null</code>.
     *
     * @return The data for this output stream, or <code>null</code> if no such
     * data is available.
     */
    public byte[] getData()
    {
        if ( memoryOutputStream != null )
        {
            return memoryOutputStream.toByteArray();
        }
        return null;
    }

    /**
     * Returns either the output file specified in the constructor or
     * the temporary file created or null.
     * <p>
     * If the constructor specifying the file is used then it returns that
     * same output file, even when threshold has not been reached.
     * <p>
     * If constructor specifying a temporary file prefix/suffix is used
     * then the temporary file created once the threshold is reached is returned
     * If the threshold was not reached then <code>null</code> is returned.
     *
     * @return The file for this output stream, or <code>null</code> if no such
     * file exists.
     */
    public File getFile()
    {
        return outputFile;
    }

    /**
     * Closes underlying output stream, and mark this as closed
     *
     * @exception java.io.IOException if an error occurs.
     */
    @Override
    public void close() throws IOException
    {
        super.close();
        closed = true;
        currentOutputStream.close();
    }

}

```

 with the following error information:
[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[210,9] cannot find symbol
  symbol:   variable super
  location: class org.codehaus.plexus.archiver.zip.OffloadingOutputStream

[ERROR] /plexus-archiver/src/main/java/org/codehaus/plexus/archiver/zip/OffloadingOutputStream.java:[32,38] cannot find symbol
  symbol: class ThresholdingOutputStream


The error is caused by a change in the API of the dependency. The new library version includes the following changes:
Method org.apache.commons.io.input.ProxyInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ClosedReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.SwappedDataInputStream.close() has been added in the new version of the dependency.
Method org.apache.commons.io.input.NullReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.ProxyInputStream.close() has been added in the new version of the dependency.
Method org.apache.commons.io.input.BoundedReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.BrokenOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.BrokenWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.ProxyOutputStream.close() has been added in the new version of the dependency.
Method org.apache.commons.io.output.NullWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.ThresholdingOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.LineIterator.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.StringBuilderWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.NullInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.TeeReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ReaderInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ObservableInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.BrokenReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.compress.tar.TarInputStream.close() has been added in the new version of the dependency.
Method org.apache.commons.io.input.XmlStreamReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.XmlStreamWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.ClosedWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.ProxyWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ProxyReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.buffer.CircularBufferInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.compress.tar.TarOutputStream.close() has been added in the new version of the dependency.
Method org.apache.commons.io.input.BoundedInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.RandomAccessFileInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.AppendableWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.FilterCollectionWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.AutoCloseInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.CloseShieldInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.AbstractByteArrayOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.CloseShieldWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.CloseShieldReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.IOUtils.close(java.io.Closeable[]) has been removed in the new version of the dependency.
Method org.apache.commons.io.input.CharSequenceInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ReversedLinesFileReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.CloseShieldOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.TeeInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.WriterOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.IOUtils.close(java.net.URLConnection) has been removed in the new version of the dependency.
Method org.apache.commons.io.IOUtils.close(java.io.Closeable) has been removed in the new version of the dependency.
Method org.apache.commons.io.input.WindowsLineEndingInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.ProxyCollectionWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.IOUtils.close(java.io.Closeable,org.apache.commons.io.function.IOConsumer) has been removed in the new version of the dependency.
Method org.apache.commons.io.output.ProxyOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.BrokenInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ReadAheadInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.BufferedFileChannelInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.UnixLineEndingInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.DeferredFileOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.SequenceReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.CharSequenceReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.FileWriterWithEncoding.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ProxyInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ClosedReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.SwappedDataInputStream.close() has been added in the new version of the dependency.
Method org.apache.commons.io.input.NullReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.ProxyInputStream.close() has been added in the new version of the dependency.
Method org.apache.commons.io.input.BoundedReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.BrokenOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.BrokenWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.ProxyOutputStream.close() has been added in the new version of the dependency.
Method org.apache.commons.io.output.NullWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.ThresholdingOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.LineIterator.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.StringBuilderWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.NullInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.TeeReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ReaderInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ObservableInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.BrokenReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.compress.tar.TarInputStream.close() has been added in the new version of the dependency.
Method org.apache.commons.io.input.XmlStreamReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.XmlStreamWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.ClosedWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.ProxyWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ProxyReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.buffer.CircularBufferInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.compress.tar.TarOutputStream.close() has been added in the new version of the dependency.
Method org.apache.commons.io.input.BoundedInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.RandomAccessFileInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.AppendableWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.FilterCollectionWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.AutoCloseInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.CloseShieldInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.AbstractByteArrayOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.CloseShieldWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.CloseShieldReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.IOUtils.close(java.io.Closeable[]) has been removed in the new version of the dependency.
Method org.apache.commons.io.input.CharSequenceInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ReversedLinesFileReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.CloseShieldOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.TeeInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.WriterOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.IOUtils.close(java.net.URLConnection) has been removed in the new version of the dependency.
Method org.apache.commons.io.IOUtils.close(java.io.Closeable) has been removed in the new version of the dependency.
Method org.apache.commons.io.input.WindowsLineEndingInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.ProxyCollectionWriter.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.IOUtils.close(java.io.Closeable,org.apache.commons.io.function.IOConsumer) has been removed in the new version of the dependency.
Method org.apache.commons.io.output.ProxyOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.BrokenInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.ReadAheadInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.BufferedFileChannelInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.UnixLineEndingInputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.DeferredFileOutputStream.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.SequenceReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.input.CharSequenceReader.close() has been removed in the new version of the dependency.
Method org.apache.commons.io.output.FileWriterWithEncoding.close() has been removed in the new version of the dependency.




 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Oxverride annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error. Don't use the comment "// ... (rest of the class remains unchanged)".
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
 