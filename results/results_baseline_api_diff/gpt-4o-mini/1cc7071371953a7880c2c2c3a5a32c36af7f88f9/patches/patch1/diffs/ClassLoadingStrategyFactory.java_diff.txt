16,18d15
< import org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector;
< import org.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy;
< 
29,32c26
<     static ClassLoadingStrategy<ClassLoader> classLoadingStrategy(Class<?> assertClass) {
<         if (ClassInjector.UsingReflection.isAvailable()) {
<             return ClassLoadingStrategy.Default.INJECTION;
<         } else if (ClassInjector.UsingLookup.isAvailable() && PRIVATE_LOOKUP_IN != null) {
---
>     static Object classLoadingStrategy(Class<?> assertClass) {
34c28
<                 return ClassLoadingStrategy.UsingLookup.of(PRIVATE_LOOKUP_IN.invoke(null, assertClass, LOOKUP));
---
>             return Class.forName("org.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default").getDeclaredField("INJECTION").get(null);
36,39c30
<                 throw new IllegalStateException("Could not access package of " + assertClass, e);
<             }
<         } else {
<             throw new IllegalStateException("No code generation strategy available");
---
>             throw new IllegalStateException("No code generation strategy available", e);
