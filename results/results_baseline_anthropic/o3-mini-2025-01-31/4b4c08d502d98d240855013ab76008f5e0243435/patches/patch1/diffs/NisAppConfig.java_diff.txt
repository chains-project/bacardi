5,6c5,7
< import org.nem.core.model.*;
< import org.nem.core.model.primitive.*;
---
> import org.nem.core.model.Account;
> import org.nem.core.model.NamespaceCacheLookupAdapters;
> import org.nem.core.model.primitive.Amount;
9,18c10,74
< import org.nem.deploy.*;
< import org.nem.nis.*;
< import org.nem.nis.audit.AuditCollection;
< import org.nem.nis.boot.*;
< import org.nem.nis.cache.*;
< import org.nem.nis.connect.*;
< import org.nem.nis.controller.interceptors.LocalHostDetector;
< import org.nem.nis.dao.*;
< import org.nem.nis.harvesting.*;
< import org.nem.nis.mappers.*;
---
> import org.nem.deploy.BlockAnalyzer;
> import org.nem.deploy.BlockChain;
> import org.nem.deploy.BlockChainServices;
> import org.nem.deploy.BlockChainUpdater;
> import org.nem.deploy.BlockChainContextFactory;
> import org.nem.deploy.Harvester;
> import org.nem.deploy.HarvestingTask;
> import org.nem.deploy.HttpConnectorPool;
> import org.nem.deploy.LocalHostDetector;
> import org.nem.deploy.NemConfigurationPolicy;
> import org.nem.deploy.NemGlobals;
> import org.nem.deploy.NisConfiguration;
> import org.nem.deploy.NisConfigurationPolicy;
> import org.nem.deploy.NisMain;
> import org.nem.deploy.NisPeerNetworkHost;
> import org.nem.deploy.NetworkHostBootstrapper;
> import org.nem.deploy.ValidatorState;
> import org.nem.deploy.chainservices.DefaultChainServices;
> import org.nem.deploy.chainservices.ChainServices;
> import org.nem.deploy.harvesting.BlockGenerator;
> import org.nem.deploy.harvesting.BlockScorer;
> import org.nem.deploy.harvesting.DefaultNewBlockTransactionsProvider;
> import org.nem.deploy.harvesting.DefaultUnconfirmedTransactions;
> import org.nem.deploy.harvesting.HarvestAwareNetworkHostBootstrapper;
> import org.nem.deploy.harvesting.NewBlockTransactionsProvider;
> import org.nem.deploy.harvesting.UnconfirmedStateFactory;
> import org.nem.deploy.harvesting.UnconfirmedTransactions;
> import org.nem.deploy.harvesting.UnconfirmedTransactionsFilter;
> import org.nem.deploy.harvesting.DefaultUnconfirmedTransactions;
> import org.nem.deploy.mapper.DefaultMapperFactory;
> import org.nem.deploy.mapper.MapperFactory;
> import org.nem.deploy.nis.NisDbModelToModelMapper;
> import org.nem.deploy.nis.NisMapperFactory;
> import org.nem.deploy.nis.NisModelToDbModelMapper;
> import org.nem.deploy.nis.audit.AuditCollection;
> import org.nem.deploy.nis.boot.CommonStarter;
> import org.nem.deploy.nis.cache.DefaultAccountCache;
> import org.nem.deploy.nis.cache.DefaultAccountStateCache;
> import org.nem.deploy.nis.cache.SynchronizedAccountCache;
> import org.nem.deploy.nis.cache.SynchronizedAccountStateCache;
> import org.nem.deploy.nis.cache.DefaultHashCache;
> import org.nem.deploy.nis.cache.SynchronizedHashCache;
> import org.nem.deploy.nis.cache.DefaultMosaicIdCache;
> import org.nem.deploy.nis.cache.SynchronizedMosaicIdCache;
> import org.nem.deploy.nis.connect.CountingBlockSynchronizer;
> import org.nem.deploy.nis.controller.interceptors.LocalHostDetector;
> import org.nem.deploy.nis.dao.AccountDao;
> import org.nem.deploy.nis.dao.BlockDao;
> import org.nem.deploy.nis.dao.TransferDao;
> import org.nem.deploy.nis.harvesting.BlockAnalyzer;
> import org.nem.deploy.nis.harvesting.BlockTransactionObserverFactory;
> import org.nem.deploy.nis.harvesting.BlockValidatorFactory;
> import org.nem.deploy.nis.harvesting.DefaultNewBlockTransactionsProvider;
> import org.nem.deploy.nis.harvesting.UnlockedAccounts;
> import org.nem.deploy.nis.mappers.AccountDaoLookupAdapter;
> import org.nem.deploy.nis.service.BlockChainLastBlockLayer;
> import org.nem.deploy.nis.state.DefaultNisCache;
> import org.nem.deploy.nis.state.NisCacheUtils;
> import org.nem.deploy.nis.state.ReadOnlyNisCache;
> import org.nem.deploy.nis.sync.BlockChainFeatureDependentFactory;
> import org.nem.deploy.nis.sync.DefaultUnconfirmedTransactions;
> import org.nem.deploy.nis.sync.SynchronizedUnconfirmedTransactions;
> import org.nem.deploy.nis.validators.BlockTransactionObserverFactory;
> import org.nem.deploy.nis.validators.BlockValidatorFactory;
> import org.nem.deploy.nis.validators.SingleTransactionValidator;
20c76,77
< import org.nem.nis.pox.poi.*;
---
> import org.nem.nis.pox.poi.PoiImportanceCalculator;
> import org.nem.nis.pox.poi.PoiOptionsBuilder;
22,26c79,80
< import org.nem.nis.secret.*;
< import org.nem.nis.service.BlockChainLastBlockLayer;
< import org.nem.nis.state.*;
< import org.nem.nis.sync.*;
< import org.nem.nis.validators.*;
---
> import org.nem.nis.secret.DefaultPoxFacade;
> import org.nem.nis.secret.SynchronizedPoxFacade;
28,31c82,88
< import org.nem.peer.node.*;
< import org.nem.peer.services.ChainServices;
< import org.nem.peer.trust.*;
< import org.nem.specific.deploy.*;
---
> import org.nem.peer.node.DefaultNodeCompatibilityChecker;
> import org.nem.peer.node.NodeCompatibilityChecker;
> import org.nem.peer.services.DefaultChainServices;
> import org.nem.peer.trust.CachedTrustProvider;
> import org.nem.peer.trust.EigenTrustPlusPlus;
> import org.nem.peer.trust.LowComTrustProvider;
> import org.nem.peer.trust.TrustProvider;
33c90,95
< import org.springframework.context.annotation.*;
---
> import org.springframework.context.annotation.Bean;
> import org.springframework.context.annotation.ComponentScan;
> import org.springframework.context.annotation.ComponentScan.Filter;
> import org.springframework.context.annotation.Configuration;
> import org.springframework.context.annotation.DependsOn;
> import org.springframework.context.annotation.FilterType;
40,41c102,108
< import java.util.*;
< import java.util.function.*;
---
> import java.util.Collection;
> import java.util.EnumSet;
> import java.util.HashMap;
> import java.util.Map;
> import java.util.Properties;
> import java.util.function.Supplier;
> import java.util.function.Function;
107,113c174,179
< 
<                 final org.flywaydb.core.Flyway flyway = new Flyway();
<                 flyway.setDataSource(this.dataSource());
<                 flyway.setClassLoader(NisAppConfig.class.getClassLoader());
<                 flyway.setLocations(prop.getProperty("flyway.locations"));
<                 flyway.setValidateOnMigrate(Boolean.valueOf(prop.getProperty("flyway.validate")));
<                 return flyway;
---
>                 return Flyway.configure()
>                                 .dataSource(this.dataSource())
>                                 .classLoader(NisAppConfig.class.getClassLoader())
>                                 .locations(prop.getProperty("flyway.locations"))
>                                 .validateOnMigrate(Boolean.parseBoolean(prop.getProperty("flyway.validate")))
>                                 .load();
