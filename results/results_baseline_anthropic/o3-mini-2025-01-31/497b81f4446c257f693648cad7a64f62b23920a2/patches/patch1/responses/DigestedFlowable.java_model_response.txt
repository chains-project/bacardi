<code_analysis>
1. Examine the error message:
   - The error indicates that the packages "org.cactoos.io" and "org.cactoos.text" (and the classes BytesOf and HexOf) are no longer available in the updated dependency version.
   - Specifically, the error is thrown on the lines where these classes are imported and used (line 15, 16, and 57).

2. Review the client code:
   - The client code uses "new HexOf(new BytesOf(sha.digest())).asString()" to convert the byte array resulting from sha.digest() into a hexadecimal string.
   - The missing classes suggest that the cactoos library (or a portion of it) was removed or refactored in the dependency update.

3. Consider potential fixes:
   - Remove the imports and usage of org.cactoos.io.BytesOf and org.cactoos.text.HexOf.
   - Replace the conversion logic with an equivalent method that converts a byte array to a hex string using standard Java code.
   - This change does not affect the function signatures and adheres to the constraints.

4. Plan the necessary changes:
   - Remove import statements for BytesOf and HexOf.
   - Create a private static helper method (e.g., bytesToHex) to perform the conversion of byte array to hexadecimal string.
   - Replace the usage in doOnComplete() with a call to bytesToHex(sha.digest()).

The following patch implements these modifications. It removes the dependency on the missing classes and provides an equivalent implementation that compiles and functions correctly.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2021 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker.misc;

import com.artipie.asto.Remaining;
import com.artipie.asto.ext.Digests;
import com.artipie.docker.Digest;
import io.reactivex.Flowable;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;

/**
 * {@link Flowable} that calculates digest of origin {@link Publisher} bytes when they pass by.
 *
 * @since 0.12
 */
public final class DigestedFlowable extends Flowable<ByteBuffer> {

    /**
     * Origin publisher.
     */
    private final Publisher<ByteBuffer> origin;

    /**
     * Calculated digest.
     */
    private final AtomicReference<Digest> dig;

    /**
     * Ctor.
     *
     * @param origin Origin publisher.
     */
    public DigestedFlowable(final Publisher<ByteBuffer> origin) {
        this.dig = new AtomicReference<>();
        this.origin = origin;
    }

    @Override
    public void subscribeActual(final Subscriber<? super ByteBuffer> subscriber) {
        final MessageDigest sha = Digests.SHA256.get();
        Flowable.fromPublisher(this.origin)
            .map(buf -> {
                sha.update(new Remaining(buf, true).bytes());
                return buf;
            })
            .doOnComplete(() -> this.dig.set(
                new Digest.Sha256(bytesToHex(sha.digest()))
            ))
            .subscribe(subscriber);
    }

    /**
     * Calculated digest.
     *
     * @return Digest.
     */
    public Digest digest() {
        return Objects.requireNonNull(this.dig.get(), "Digest is not yet calculated.");
    }
    
    /**
     * Converts a byte array to a hexadecimal string.
     *
     * @param bytes The byte array.
     * @return Hexadecimal string representation of the byte array.
     */
    private static String bytesToHex(final byte[] bytes) {
        final StringBuilder hexString = new StringBuilder();
        for (final byte b : bytes) {
            hexString.append(String.format("%02x", b));
        }
        return hexString.toString();
    }
}
```
