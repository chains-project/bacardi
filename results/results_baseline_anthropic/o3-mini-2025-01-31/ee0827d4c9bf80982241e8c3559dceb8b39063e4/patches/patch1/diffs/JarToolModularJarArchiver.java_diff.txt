22a23
> import java.io.OutputStream;
41d41
< import org.apache.commons.io.output.NullPrintStream;
67,68c67
<     private static final String MODULE_DESCRIPTOR_FILE_NAME
<         = "module-info.class";
---
>     private static final String MODULE_DESCRIPTOR_FILE_NAME = "module-info.class";
70,71c69,79
<     private static final Pattern MRJAR_VERSION_AREA
<         = Pattern.compile( "META-INF/versions/\\d+/" );
---
>     private static final Pattern MRJAR_VERSION_AREA = Pattern.compile( "META-INF/versions/\\d+/" );
> 
>     // Define a dummy PrintStream that discards output, replacing the missing NullPrintStream.
>     private static final PrintStream NULL_PRINT_STREAM = new PrintStream(new OutputStream()
>     {
>         @Override
>         public void write(int b) throws IOException
>         {
>             // Discard the byte.
>         }
>     });
83,86c91,92
<             Class<?> toolProviderClass =
<                 Class.forName( "java.util.spi.ToolProvider" );
<             Object jarToolOptional = toolProviderClass
<                 .getMethod( "findFirst", String.class )
---
>             Class<?> toolProviderClass = Class.forName( "java.util.spi.ToolProvider" );
>             Object jarToolOptional = toolProviderClass.getMethod( "findFirst", String.class )
129,130c135
<             getLogger().debug( "Using the jar tool to " +
<                 "update the archive to modular JAR." );
---
>             getLogger().debug( "Using the jar tool to update the archive to modular JAR." );
159,160c164
<             throw new ArchiverException( "Exception occurred " +
<                 "while creating modular JAR file", e );
---
>             throw new ArchiverException( "Exception occurred while creating modular JAR file", e );
195,196c199
<      * Returns {@code true} if {@code path}
<      * is a module descriptor.
---
>      * Returns {@code true} if {@code path} is a module descriptor.
202,206c205,206
<             String prefix = path.substring( 0,
<                 path.lastIndexOf( MODULE_DESCRIPTOR_FILE_NAME ) );
< 
<             // the path is a module descriptor if it located
<             // into the root of the archive or into the
---
>             String prefix = path.substring( 0, path.lastIndexOf( MODULE_DESCRIPTOR_FILE_NAME ) );
>             // the path is a module descriptor if it located into the root of the archive or into the
208,209c208
<             return prefix.isEmpty() ||
<                 MRJAR_VERSION_AREA.matcher( prefix ).matches();
---
>             return prefix.isEmpty() || MRJAR_VERSION_AREA.matcher( prefix ).matches();
219,220c218
<      * It takes into account the module version,
<      * main class, etc.
---
>      * It takes into account the module version, main class, etc.
300,301c298
<             PrintStream nullPrintStream = NullPrintStream.NULL_PRINT_STREAM;
<             Integer result = (Integer) runMethod.invoke( jarTool, nullPrintStream, nullPrintStream, args );
---
>             Integer result = (Integer) runMethod.invoke( jarTool, NULL_PRINT_STREAM, NULL_PRINT_STREAM, args );
310d306
< 
