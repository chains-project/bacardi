29d28
< import org.apache.commons.io.input.ClosedInputStream;
31,51d29
< /**
<  * This class implements an output stream in which the data is
<  * written into a byte array. The buffer automatically grows as data
<  * is written to it.
<  * <p>
<  * The data can be retrieved using <code>toByteArray()</code> and
<  * <code>toString()</code>.
<  * <p>
<  * Closing a {@code ByteArrayOutputStream} has no effect. The methods in
<  * this class can be called after the stream has been closed without
<  * generating an {@code IOException}.
<  * <p>
<  * This is an alternative implementation of the {@link java.io.ByteArrayOutputStream}
<  * class. The original implementation only allocates 32 bytes at the beginning.
<  * As this class is designed for heavy duty it starts at 1024 bytes. In contrast
<  * to the original it doesn't reallocate the whole memory block but allocates
<  * additional buffers. This way no buffers need to be garbage collected and
<  * the contents don't have to be copied to the new buffer. This class is
<  * designed to behave exactly like the original. The only exception is the
<  * deprecated toString(int) method that has been ignored.
<  */
348c326,330
<         return toBufferedInputStream( input, 1024 );
---
>         // It does not matter if a ByteArrayOutputStream is not closed as close() is a no-op
>         @SuppressWarnings( "resource" )
>         final ByteArrayOutputStream output = new ByteArrayOutputStream( 1024 );
>         output.write( input );
>         return output.toInputStream();
401c383
<             return new ClosedInputStream();
---
>             return new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
