1,23d0
< /*
<  * The MIT License (MIT)
<  *
<  * Copyright (c) 2018-2023 Yegor Bugayenko
<  *
<  * Permission is hereby granted, free of charge, to any person obtaining a copy
<  * of this software and associated documentation files (the "Software"), to deal
<  * in the Software without restriction, including without limitation the rights
<  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
<  * copies of the Software, and to permit persons to whom the Software is
<  * furnished to do so, subject to the following conditions:
<  *
<  * The above copyright notice and this permission notice shall be included
<  * in all copies or substantial portions of the Software.
<  *
<  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
<  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
<  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
<  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
<  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
<  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
<  * SOFTWARE.
<  */
37,38c14
< import org.cactoos.scalar.IoCheckedScalar;
< import org.cactoos.scalar.SolidScalar;
---
> import org.cactoos.scalar.Sticky;
40c16
< import org.cactoos.text.JoinedText;
---
> import org.cactoos.text.Joined;
53c29
<     private final IoCheckedScalar<Path> path;
---
>     private final Scalar<Path> path;
103,105c79
<         this.path = new IoCheckedScalar<>(
<             new SolidScalar<>(pth)
<         );
---
>         this.path = new Sticky<>(pth);
118,119c92,94
<         final Path wpth = this.path.value().resolve(
<             new JoinedText(
---
>         final Path base = this.base();
>         final Path wpth = base.resolve(
>             new Joined(
156c131
<                 new Filtered<>(this.filter, new Directory(this.path.value()))
---
>                 new Filtered<>(this.filter, new Directory(this.base()))
161a137,149
>     
>     /**
>      * Returns the base path from the scalar, wrapping any exception into an IOException.
>      * @return Base path.
>      * @throws IOException if obtaining the path fails.
>      */
>     private Path base() throws IOException {
>         try {
>             return this.path.value();
>         } catch (final Exception ex) {
>             throw new IOException(ex);
>         }
>     }
