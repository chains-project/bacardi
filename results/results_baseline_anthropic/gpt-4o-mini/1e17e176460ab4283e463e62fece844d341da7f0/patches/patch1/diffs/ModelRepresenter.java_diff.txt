1,7d0
< /**
<  * Copyright (c) 2012 to original author or authors
<  * All rights reserved. This program and the accompanying materials
<  * are made available under the terms of the Eclipse Public License v1.0
<  * which accompanies this distribution, and is available at
<  * http://www.eclipse.org/legal/epl-v10.html
<  */
29,35d21
< /**
<  * YAML model representer.
<  *
<  * @author jvanzyl
<  * @author bentmann
<  * @since 0.7
<  */
37a24
>     super(); // Explicitly call the super constructor
50d36
<       // "pomFile" is not a part of POM http://maven.apache.org/xsd/maven-4.0.0.xsd
64d49
<       //skip optional if it is false
66d50
<       //skip type if it is jar
70d53
<       //skip extensions if it is false
72d54
<       //skip inherited if it is true
94d75
< 
123c104
<           if (isList) { // check for eventual list construction
---
>           if (isList) {
168,170c149
<   // Model elements order {
<   //TODO move to polyglot-common, or to org.apache.maven:maven-model
<   private static List<String> ORDER_MODEL = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_MODEL = new ArrayList<>(Arrays.asList(
178d156
< 
191d168
< 
198,199d174
<           //"repositories",
<           //"pluginRepositories",
204c179
<   private static List<String> ORDER_DEVELOPER = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_DEVELOPER = new ArrayList<>(Arrays.asList(
206c181
<   private static List<String> ORDER_CONTRIBUTOR = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_CONTRIBUTOR = new ArrayList<>(Arrays.asList(
208c183
<   private static List<String> ORDER_DEPENDENCY = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_DEPENDENCY = new ArrayList<>(Arrays.asList(
210c185
<   private static List<String> ORDER_PLUGIN = new ArrayList<String>(Arrays.asList(
---
>   private static List<String> ORDER_PLUGIN = new ArrayList<>(Arrays.asList(
212d186
<   //}
214,216d187
<   /*
<    * Change the default order. Important data goes first.
<    */
238c209
<       Set<Property> sorted = new TreeSet<Property>(new ModelPropertyComparator(order));
---
>     Set<Property> sorted = new TreeSet<>(new ModelPropertyComparator(order));
251d221
<       // important go first
258d227
<       // all the rest
268c237
<       return 0;// compare further
---
>       return 0;
