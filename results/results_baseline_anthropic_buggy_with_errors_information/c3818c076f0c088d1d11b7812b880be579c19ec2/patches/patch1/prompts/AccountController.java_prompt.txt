 You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates.
Your task is to analyze the provided code and error message, then propose a patch that can be applied to the client code to resolve the issue.

 Here is the client code that is failing:
```java
package org.nem.nis.controller;

import org.nem.core.crypto.*;
import org.nem.core.model.*;
import org.nem.core.model.ncc.*;
import org.nem.core.serialization.*;
import org.nem.nis.cache.ReadOnlyAccountStateCache;
import org.nem.nis.controller.annotations.*;
import org.nem.nis.controller.requests.*;
import org.nem.nis.controller.viewmodels.AccountImportanceViewModel;
import org.nem.nis.harvesting.*;
import org.nem.nis.service.AccountIo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.*;
import java.util.stream.Collectors;

/**
 * REST API for interacting with Account objects.
 */
@RestController
public class AccountController {
	private static final int MAX_UNCONFIRMED_TRANSACTIONS = 25;
	private final UnconfirmedTransactionsFilter unconfirmedTransactions;
	private final UnlockedAccounts unlockedAccounts;
	private final AccountIo accountIo;
	private final ReadOnlyAccountStateCache accountStateCache;

	@Autowired(required = true)
	AccountController(final UnconfirmedTransactionsFilter unconfirmedTransactions, final UnlockedAccounts unlockedAccounts,
			final AccountIo accountIo, final ReadOnlyAccountStateCache accountStateCache) {
		this.unconfirmedTransactions = unconfirmedTransactions;
		this.unlockedAccounts = unlockedAccounts;
		this.accountIo = accountIo;
		this.accountStateCache = accountStateCache;
	}

	/**
	 * Unlocks an account for harvesting.
	 *
	 * @param privateKey The private key of the account to unlock.
	 */
	@RequestMapping(value = "/account/unlock", method = RequestMethod.POST)
	@ClientApi
	public void accountUnlock(@Valid @RequestBody final PrivateKey privateKey) {
		final KeyPair keyPair = new KeyPair(privateKey);
		final Account account = new Account(keyPair);
		final UnlockResult result = this.unlockedAccounts.addUnlockedAccount(account);

		if (UnlockResult.SUCCESS != result) {
			throw new IllegalArgumentException(result.toString());
		}
	}

	/**
	 * Locks an account from harvesting.
	 *
	 * @param privateKey The private key of the account to lock.
	 */
	@RequestMapping(value = "/account/lock", method = RequestMethod.POST)
	@ClientApi
	public void accountLock(@Valid @RequestBody final PrivateKey privateKey) {
		final Account account = new Account(new KeyPair(privateKey));
		this.unlockedAccounts.removeUnlockedAccount(account);
	}

	// region [/local]/account/isunlocked

	/**
	 * Checks if the given account is unlocked.
	 *
	 * @param address The address of the account to check.
	 * @return "ok" if account is unlocked.
	 */
	@RequestMapping(value = "/account/isunlocked", method = RequestMethod.POST)
	@ClientApi
	public String isAccountUnlocked(@RequestBody final Address address) {
		final Account account = new Account(address);
		return this.unlockedAccounts.isAccountUnlocked(account) ? "ok" : "nope";
	}

	/**
	 * Checks if the given account is unlocked.
	 *
	 * @param privateKey The private key of the account to check.
	 * @return "ok" if account is unlocked.
	 */
	@RequestMapping(value = "/local/account/isunlocked", method = RequestMethod.POST)
	@TrustedApi
	@ClientApi
	public String isAccountUnlocked(@Valid @RequestBody final PrivateKey privateKey) {
		return this.isAccountUnlocked(Address.fromPublicKey(new KeyPair(privateKey).getPublicKey()));
	}

	// endregion

	// region unlocked/info

	/**
	 * Gets information about the unlocked accounts.
	 *
	 * @return The unlocked accounts information.
	 */
	@RequestMapping(value = "/account/unlocked/info", method = RequestMethod.POST)
	@ClientApi
	public SerializableEntity unlockedInfo() {
		return serializer -> {
			serializer.writeInt("num-unlocked", this.unlockedAccounts.size());
			serializer.writeInt("max-unlocked", this.unlockedAccounts.maxSize());
		};
	}

	// endregion

	/**
	 * Gets unconfirmed transaction information for the specified account.
	 *
	 * @param builder The account id builder.
	 * @return Information about matching transactions
	 */
	@RequestMapping(value = "/account/unconfirmedTransactions", method = RequestMethod.GET)
	@ClientApi
	public SerializableList<UnconfirmedTransactionMetaDataPair> transactionsUnconfirmed(final AccountIdBuilder builder) {
		final Address address = builder.build().getAddress();
		final Collection<Transaction> transactions = this.unconfirmedTransactions.getMostRecentTransactionsForAccount(address,
				MAX_UNCONFIRMED_TRANSACTIONS);
		final Collection<UnconfirmedTransactionMetaDataPair> pairs = transactions.stream().map(t -> {
			if (TransactionTypes.MULTISIG == t.getType()) {
				final MultisigTransaction multisig = (MultisigTransaction) t;
				return new UnconfirmedTransactionMetaDataPair(t, new UnconfirmedTransactionMetaData(multisig.getOtherTransactionHash()));
			} else {
				return new UnconfirmedTransactionMetaDataPair(t, new UnconfirmedTransactionMetaData((Hash) null));
			}
		}).collect(Collectors.toList());
		return new SerializableList<>(pairs);
	}

	/**
	 * Gets information about harvested blocks.
	 *
	 * @param idBuilder The id builder.
	 * @param pageBuilder The page builder.
	 * @return Information about harvested blocks.
	 */
	@RequestMapping(value = "/account/harvests", method = RequestMethod.GET)
	@ClientApi
	public SerializableList<HarvestInfo> accountHarvests(final AccountIdBuilder idBuilder, final DefaultPageBuilder pageBuilder) {
		final Address address = idBuilder.build().getAddress();
		final DefaultPage page = pageBuilder.build();
		return this.accountIo.getAccountHarvests(address, page.getId(), page.getPageSize());
	}

	/**
	 * Gets the current account importance information for all accounts.
	 *
	 * @return Account importance information.
	 */
	@RequestMapping(value = "/account/importances", method = RequestMethod.GET)
	@PublicApi
	public SerializableList<AccountImportanceViewModel> getImportances() {
		final List<AccountImportanceViewModel> viewModels = this.accountStateCache.contents().stream()
				.map(a -> new AccountImportanceViewModel(a.getAddress(), a.getImportanceInfo())).collect(Collectors.toList());

		return new SerializableList<>(viewModels);
	}

	/**
	 * API for creating new account data.
	 *
	 * @return A key pair view model.
	 */
	@RequestMapping(value = "/account/generate", method = RequestMethod.GET)
	@TrustedApi
	public KeyPairViewModel generateAccount() {
		final NetworkInfo networkInfo = NetworkInfos.getDefault();
		final KeyPair keyPair = new KeyPair();
		return new KeyPairViewModel(keyPair, networkInfo.getVersion());
	}
}

```

 the error is triggered in the following specific lines in the previous code:

```java
import javax.validation.Valid;
```
```java
public void accountLock(@Valid @RequestBody final PrivateKey privateKey) {
```
```java
public String isAccountUnlocked(@Valid @RequestBody final PrivateKey privateKey) {
```
```java
public void accountUnlock(@Valid @RequestBody final PrivateKey privateKey) {
```


 And here is the error message:
[ERROR] /nem/nis/src/main/java/org/nem/nis/controller/AccountController.java:[16,24] package javax.validation does not exist

[ERROR] /nem/nis/src/main/java/org/nem/nis/controller/AccountController.java:[64,34] cannot find symbol
  symbol:   class Valid
  location: class org.nem.nis.controller.AccountController

[ERROR] /nem/nis/src/main/java/org/nem/nis/controller/AccountController.java:[93,42] cannot find symbol
  symbol:   class Valid
  location: class org.nem.nis.controller.AccountController

[ERROR] /nem/nis/src/main/java/org/nem/nis/controller/AccountController.java:[47,36] cannot find symbol
  symbol:   class Valid
  location: class org.nem.nis.controller.AccountController



 Before proposing a fix, please analyze the error message and client code. Wrap your analysis inside <code_analysis> tags:

<code_analysis>
1. Examine the error message:
   - Identify the specific issue related to the dependency update.
   - Note the line number or method where the error occurs.
   - Determine which dependency and version is causing the issue.

2. Review the client code:
   - Locate the problematic areas mentioned in the error message.
   - Identify any related code that might be affected by the changes.

3. Consider potential fixes that adhere to the following constraints:
   - Do not change any function signatures.
   - Only remove the @Override annotation if the method no longer overrides a method in the updated dependency version.
   - Ensure correct imports are used, considering the newer dependency version.
   - Avoid removing existing code unless it directly causes a compilation or functionality error.

4. Plan the necessary changes to fix the issue:
   - List the specific modifications required.
   - Consider potential side effects of the proposed changes.
   - Ensure the fix addresses the root cause of the error.
</code_analysis>

Based on your analysis, propose a patch to fix the issue. Your response should be a complete and compilable Java class in a fenced code block. Adhere to these guidelines:

1. Do not change any function signatures.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Avoid removing any existing code unless it directly causes a compilation or functionality error.
6. Ensure the entire class is included and that it will compile correctly. Don't use the comment "// ... (rest of the class remains unchanged)".

Please provide your fixed class in the following format:

```java
// Your complete, fixed Java class here
```

Remember to focus specifically on issues related to the dependency update when proposing your fix.
 