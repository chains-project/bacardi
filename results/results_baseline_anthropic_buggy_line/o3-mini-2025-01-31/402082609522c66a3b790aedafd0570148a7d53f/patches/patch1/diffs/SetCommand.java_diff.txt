11a12,13
> import org.spongepowered.api.command.Command;
> import org.spongepowered.api.command.CommandExecutor;
13,17c15,17
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.args.GenericArguments;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.source.CommandSource;
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
21,24d20
< import static org.spongepowered.api.command.args.GenericArguments.flags;
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
< 
35a32,34
>     // Updated the execute method to match the new Sponge 8 command API.
>     // Previously it accepted (CommandSource, CommandContext); now the single CommandContext
>     // gives access to the source via its cause.
37c36,37
<     public CommandResult execute(CommandSource src, CommandContext args) {
---
>     public CommandResult execute(CommandContext context) {
>         CommandSource src = context.cause().first(CommandSource.class).orElse(null);
43c43,44
<         UUID uniqueId = ((Player) src).getUniqueId();
---
>         Player receiver = (Player) src;
>         UUID uniqueId = receiver.getUniqueId();
49,51c50,52
<         Player receiver = (Player) src;
<         String targetSkin = args.<String>getOne("skin").get();
<         boolean keepSkin = args.hasAny("keep");
---
>         String targetSkin = context.requireOne("skin");
>         // The new parameter for the "keep" flag is a Boolean parameter (defaulting to false)
>         boolean keepSkin = context.one("keep").orElse(false);
74a76,77
>     // Updated buildSpec() to use the new Command builder and Parameter API.
>     // The old CommandSpec class has been replaced by Command in the new dependency version.
76,77c79,80
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
---
>     public Command buildSpec() {
>         return Command.builder()
79,81c82,84
<                 .arguments(
<                         string(of("skin")),
<                         flags().flag("keep").buildWith(GenericArguments.none()))
---
>                 .parameters(
>                         Parameter.string().key("skin").build(),
>                         Parameter.bool().key("keep").setDefault(false).build())
