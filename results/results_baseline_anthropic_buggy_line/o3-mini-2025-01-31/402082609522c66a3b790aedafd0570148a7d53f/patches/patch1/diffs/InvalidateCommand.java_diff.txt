7a8
> import org.spongepowered.api.command.Command;
9,12c10,11
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.source.CommandSource;
> import org.spongepowered.api.command.parameter.CommandContext;
16c15,17
< public class InvalidateCommand implements CommandExecutor, ChangeSkinCommand {
---
> import java.util.Optional;
> 
> public class InvalidateCommand implements ChangeSkinCommand {
21c22
<     InvalidateCommand(ChangeSkinSponge plugin) {
---
>     public InvalidateCommand(ChangeSkinSponge plugin) {
25c26,27
<     @Override
---
>     // This method is kept intact from the original client code.
>     // Note: The @Override annotation has been removed because it no longer overrides any method in the new dependency.
36a39,48
>     // New method that conforms to the new Sponge command API executor,
>     // extracting the CommandSource from the CommandContext and delegating to the existing execute method.
>     public CommandResult process(CommandContext args) {
>         Optional<CommandSource> sourceOpt = args.cause().first(CommandSource.class);
>         if (!sourceOpt.isPresent()) {
>             return CommandResult.empty();
>         }
>         return execute(sourceOpt.get(), args);
>     }
> 
38,40c50,52
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
<                 .executor(this)
---
>     public Command buildSpec() {
>         return Command.builder()
>                 .executor(this::process)
