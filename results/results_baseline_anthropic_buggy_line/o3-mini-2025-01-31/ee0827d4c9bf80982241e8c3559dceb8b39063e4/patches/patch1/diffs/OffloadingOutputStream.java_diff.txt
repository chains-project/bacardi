1,17d0
< /*
<  *  Licensed to the Apache Software Foundation (ASF) under one or more
<  *  contributor license agreements.  See the NOTICE file distributed with
<  *  this work for additional information regarding copyright ownership.
<  *  The ASF licenses this file to You under the Apache License, Version 2.0
<  *  (the "License"); you may not use this file except in compliance with
<  *  the License.  You may obtain a copy of the License at
<  *
<  *      http://www.apache.org/licenses/LICENSE-2.0
<  *
<  *  Unless required by applicable law or agreed to in writing, software
<  *  distributed under the License is distributed on an "AS IS" BASIS,
<  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  *  See the License for the specific language governing permissions and
<  *  limitations under the License.
<  *
<  */
19a3,4
> import java.io.ByteArrayInputStream;
> import java.io.ByteArrayOutputStream;
27,28d11
< import org.apache.commons.io.output.ThresholdingOutputStream;
< 
30c13
<  * Offloads to disk when a given memory consumption has been reacehd
---
>  * Minimal replacement for the deprecated Apache Commons IO ThresholdingOutputStream.
31a15,61
> abstract class ThresholdingOutputStream extends OutputStream {
>     private final int threshold;
>     private int written;
>     private boolean thresholdExceeded;
> 
>     public ThresholdingOutputStream(int threshold) {
>         this.threshold = threshold;
>         this.written = 0;
>         this.thresholdExceeded = false;
>     }
> 
>     // Abstract hook methods to be implemented by subclasses.
>     protected abstract OutputStream getStream() throws IOException;
>     protected abstract void thresholdReached() throws IOException;
> 
>     @Override
>     public void write(int b) throws IOException {
>         checkThreshold(1);
>         getStream().write(b);
>         written++;
>     }
> 
>     @Override
>     public void write(byte[] b, int off, int len) throws IOException {
>         checkThreshold(len);
>         getStream().write(b, off, len);
>         written += len;
>     }
> 
>     private void checkThreshold(int count) throws IOException {
>         if (!thresholdExceeded && (written + count > threshold)) {
>             thresholdReached();
>             thresholdExceeded = true;
>         }
>     }
> 
>     @Override
>     public void flush() throws IOException {
>         getStream().flush();
>     }
> 
>     @Override
>     public void close() throws IOException {
>         getStream().close();
>     }
> }
> 
34d63
< 
38c67
<      * The output stream to which data will be written prior to the theshold
---
>      * The output stream to which data will be written prior to the threshold
45,46c74
<      * will always be one of <code>memoryOutputStream</code> or
<      * <code>diskOutputStream</code>.
---
>      * will always be one of memoryOutputStream or diskOutputStream.
155,156c183
< 
<         InputStream memoryAsInput = memoryOutputStream.toInputStream();
---
>         InputStream memoryAsInput = new ByteArrayInputStream(memoryOutputStream.toByteArray());
169c196
<      * disk, this method returns <code>null</code>.
---
>      * disk, this method returns null.
171c198
<      * @return The data for this output stream, or <code>null</code> if no such
---
>      * @return The data for this output stream, or null if no such
192c219
<      * If the threshold was not reached then <code>null</code> is returned.
---
>      * If the threshold was not reached then null is returned.
194c221
<      * @return The file for this output stream, or <code>null</code> if no such
---
>      * @return The file for this output stream, or null if no such
