<code_analysis>
1. Examine the error message:
   - The error message indicates that the constructor for StringContains is now defined to accept only one argument (a String), but the client code is still using the old two-argument version with a boolean flag and a String.
   - The errors occur on the lines where new StringContains(true, "Unsupported reference") and new StringContains(false, string) are invoked.
   - The dependency update (Hamcrest) has removed the two-argument constructor in favor of a single-argument constructor.

2. Review the client code:
   - In the failsToResolveInvalid() test, two matchers are created using the two-argument StringContains constructor.
   - The first matcher was intended to perform a case-insensitive match for "Unsupported reference" (boolean true), while the second was a case-sensitive match for the provided string (boolean false). 
   - With the new dependency version, only the single-argument constructor is available.

3. Consider potential fixes:
   - Remove the boolean parameters from the StringContains construction calls, leaving only the substring as an argument.
   - As the new constructor performs a case-sensitive match by default, the tests will still verify that the error message contains the appropriate substrings.
   - No method signatures or functionality apart from the matchers change; only the way we construct the matchers is adjusted.

4. Plan the necessary changes:
   - Remove the boolean values from the two calls to new StringContains on lines where errors were triggered.
   - Ensure that the test still accesses the exception message and verifies that it contains "Unsupported reference" and the invalid string.
   - Validate that the imports remain correct and no additional code removal is necessary.
</code_analysis>

Below is the complete, fixed Java class:

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2022 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */

package com.artipie.docker.ref;

import com.artipie.docker.Digest;
import com.artipie.docker.Tag;
import java.util.Arrays;
import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.StringContains;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

/**
 * Test case for {@link ManifestRef}.
 * @since 0.1
 */
public final class ManifestRefTest {

    @Test
    void resolvesDigestString() {
        MatcherAssert.assertThat(
            new ManifestRef.FromString("sha256:1234").link().string(),
            Matchers.equalTo("revisions/sha256/1234/link")
        );
    }

    @Test
    void resolvesTagString() {
        MatcherAssert.assertThat(
            new ManifestRef.FromString("1.0").link().string(),
            Matchers.equalTo("tags/1.0/current/link")
        );
    }

    @ParameterizedTest
    @ValueSource(strings = {
        "",
        "a:b:c",
        ".123"
    })
    void failsToResolveInvalid(final String string) {
        final Throwable throwable = Assertions.assertThrows(
            IllegalStateException.class,
            () -> new ManifestRef.FromString(string).link().string()
        );
        MatcherAssert.assertThat(
            throwable.getMessage(),
            new AllOf<>(
                Arrays.asList(
                    new StringContains("Unsupported reference"),
                    new StringContains(string)
                )
            )
        );
    }

    @Test
    void resolvesDigestLink() {
        MatcherAssert.assertThat(
            new ManifestRef.FromDigest(new Digest.Sha256("0000")).link().string(),
            Matchers.equalTo("revisions/sha256/0000/link")
        );
    }

    @Test
    void resolvesTagLink() {
        MatcherAssert.assertThat(
            new ManifestRef.FromTag(new Tag.Valid("latest")).link().string(),
            Matchers.equalTo("tags/latest/current/link")
        );
    }

    @Test
    void stringFromDigestRef() {
        MatcherAssert.assertThat(
            new ManifestRef.FromDigest(new Digest.Sha256("0123")).string(),
            Matchers.equalTo("sha256:0123")
        );
    }

    @Test
    void stringFromTagRef() {
        final String tag = "0.2";
        MatcherAssert.assertThat(
            new ManifestRef.FromTag(new Tag.Valid(tag)).string(),
            Matchers.equalTo(tag)
        );
    }

    @Test
    void stringFromStringRef() {
        final String value = "whatever";
        MatcherAssert.assertThat(
            new ManifestRef.FromString(value).string(),
            Matchers.equalTo(value)
        );
    }
}
```
