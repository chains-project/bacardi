5a6
> import java.util.concurrent.ThreadLocalRandom;
43c44
<   @Override
---
>   // Removed the @Override annotation, as the parent no longer provides this method.
45c46,60
<     return new Timestamp(super.between(from, to).getTime());
---
>     if (from == null || to == null) {
>       throw new IllegalArgumentException("Dates must not be null");
>     }
>     if (from.after(to)) {
>       throw new IllegalArgumentException("Invalid date range: 'from' is after 'to'");
>     }
>     long startMillis = from.getTime();
>     long endMillis = to.getTime();
>     // If both dates are equal, return that timestamp.
>     if (startMillis == endMillis) {
>       return new Timestamp(startMillis);
>     }
>     // Generate a random millisecond value between startMillis (inclusive) and endMillis (inclusive).
>     long randomMillis = ThreadLocalRandom.current().nextLong(startMillis, endMillis + 1);
>     return new Timestamp(randomMillis);
