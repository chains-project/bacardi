<code_analysis>
1. Error Message Analysis:
   - The error indicates that the constructor for org.hamcrest.core.StringContains now expects a single String argument instead of two (a boolean and a String).
   - The problematic lines are in the shouldPush() and shouldPull() tests where new StringContains() is called with a boolean and a string.
   - This issue arises after updating the Hamcrest dependency, where the constructor signature has changed.

2. Client Code Review:
   - In the shouldPush() test, the problematic call is:
     new StringContains(false, String.format("latest: digest: %s", original.digest()))
   - In the shouldPull() test, a similar pattern is used:
     new StringContains(false, String.format("Status: Downloaded newer image for %s", image))
   - The boolean flag (false) for case sensitivity is no longer supported by this constructor in the new dependency version.

3. Potential Fix:
   - Remove the boolean argument from the StringContains constructors. The resulting calls become:
     new StringContains(String.format("latest: digest: %s", original.digest()))
     new StringContains(String.format("Status: Downloaded newer image for %s", image))
   - This change adheres to the constraints: function signatures remain unchanged and only the necessary code is modified to satisfy the updated API.

4. Proposed Changes:
   - Remove the boolean argument from the constructor calls for StringContains in both tests.
   - Ensure the code compiles and maintains its functionality (note that this may alter case sensitivity behavior if it was previously enabled via the boolean, but the tests are expected to work given the updated dependency API).
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2022 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker.http;

import com.artipie.asto.memory.InMemoryStorage;
import com.artipie.docker.asto.AstoDocker;
import com.artipie.docker.junit.DockerClient;
import com.artipie.docker.junit.DockerClientSupport;
import com.artipie.docker.junit.DockerRepository;
import com.artipie.http.auth.BasicAuthScheme;
import org.hamcrest.MatcherAssert;
import org.hamcrest.core.StringContains;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * Integration test for authentication in {@link DockerSlice}.
 *
 * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)
 * @since 0.4
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
@DockerClientSupport
final class DockerAuthITCase {

    /**
     * Docker client.
     */
    private DockerClient cli;

    /**
     * Docker repository.
     */
    private DockerRepository repo;

    @BeforeEach
    void setUp() throws Exception {
        final TestAuthentication.User user = TestAuthentication.ALICE;
        this.repo = new DockerRepository(
            new DockerSlice(
                new AstoDocker(new InMemoryStorage()),
                (identity, action) -> user.name().equals(identity.name()),
                new BasicAuthScheme(new TestAuthentication())
            )
        );
        this.repo.start();
        this.cli.run(
            "login",
            "--username", user.name(),
            "--password", user.password(),
            this.repo.url()
        );
    }

    @AfterEach
    void tearDown() {
        this.repo.stop();
    }

    @Test
    void shouldPush() throws Exception {
        final Image original = new Image.ForOs();
        final String image = this.copy(original);
        final String output = this.cli.run("push", image);
        MatcherAssert.assertThat(
            output,
            new StringContains(String.format("latest: digest: %s", original.digest()))
        );
    }

    @Test
    void shouldPull() throws Exception {
        final String image = this.copy(new Image.ForOs());
        this.cli.run("push", image);
        this.cli.run("image", "rm", image);
        final String output = this.cli.run("pull", image);
        MatcherAssert.assertThat(
            output,
            new StringContains(String.format("Status: Downloaded newer image for %s", image))
        );
    }

    private String copy(final Image original) throws Exception {
        this.cli.run("pull", original.remoteByDigest());
        final String copy = String.format("%s/my-test/latest", this.repo.url());
        this.cli.run("tag", original.remoteByDigest(), copy);
        return copy;
    }
}
```
