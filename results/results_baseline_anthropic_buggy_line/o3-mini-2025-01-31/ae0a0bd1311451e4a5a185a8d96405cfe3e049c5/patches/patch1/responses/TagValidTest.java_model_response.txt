<code_analysis>
1. Examine the error message:
   - The error message shows that the constructor StringContains(boolean, String) is not available in the updated Hamcrest dependency.
   - Lines 62 and 63 in TagValidTest.java call new StringContains(true, "Invalid tag") and new StringContains(false, original), respectively.
   - The updated dependency expects a single String argument for StringContains, so the additional boolean parameter causes the compilation error.

2. Review the client code:
   - The test in shouldFailToGetValueWhenInvalid uses StringContains to verify that the exception message contains "Invalid tag" and does not contain the original invalid string.
   - The boolean parameter was likely used to differentiate between a “contains” and “does not contain” match, but the updated Hamcrest now provides a static method for the "containsString" matcher and the "not" matcher from CoreMatchers.

3. Consider potential fixes:
   - Replace new StringContains(true, "Invalid tag") with StringContains.containsString("Invalid tag") to verify that the message contains the expected substring.
   - Replace new StringContains(false, original) with CoreMatchers.not(StringContains.containsString(original)) to verify that the message does not include the original invalid tag.
   - The method signatures are to remain unchanged, and only the matcher construction must be updated.

4. Plan the necessary changes:
   - Modify the assertion in shouldFailToGetValueWhenInvalid to use the static method containsString and wrap the second matcher with not().
   - Ensure to import org.hamcrest.CoreMatchers for the not() matcher.
   - This fix addresses the constructor parameter count error and maintains the intended behavior of the test.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2022 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker;

import com.artipie.docker.error.InvalidTagNameException;
import java.util.Arrays;
import org.hamcrest.CoreMatchers;
import org.hamcrest.MatcherAssert;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.StringContains;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

/**
 * Tests for {@link Tag.Valid}.
 *
 * @since 0.2
 */
class TagValidTest {

    @ParameterizedTest
    @ValueSource(strings = {
        "latest",
        "1.0",
        "my-tag",
        "MY_TAG",
        "My.Tag.1",
        "_some_tag",
        // @checkstyle LineLengthCheck (1 line)
        "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"
    })
    void shouldGetValueWhenValid(final String original) {
        final Tag.Valid tag = new Tag.Valid(original);
        MatcherAssert.assertThat(tag.valid(), new IsEqual<>(true));
        MatcherAssert.assertThat(tag.value(), new IsEqual<>(original));
    }

    @ParameterizedTest
    @ValueSource(strings = {
        "",
        ".0",
        "*",
        "\u00ea",
        "-my-tag",
        // @checkstyle LineLengthCheck (1 line)
        "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678"
    })
    void shouldFailToGetValueWhenInvalid(final String original) {
        final Tag.Valid tag = new Tag.Valid(original);
        MatcherAssert.assertThat(tag.valid(), new IsEqual<>(false));
        final Throwable throwable = Assertions.assertThrows(
            InvalidTagNameException.class,
            tag::value
        );
        MatcherAssert.assertThat(
            throwable.getMessage(),
            new AllOf<>(
                Arrays.asList(
                    StringContains.containsString("Invalid tag"),
                    CoreMatchers.not(StringContains.containsString(original))
                )
            )
        );
    }
}
```
