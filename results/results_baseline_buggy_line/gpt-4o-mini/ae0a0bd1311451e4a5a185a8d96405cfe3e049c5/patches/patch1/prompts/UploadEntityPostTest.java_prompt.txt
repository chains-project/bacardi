 Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.
 the following client code fails:
```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2022 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker.http;

import com.artipie.asto.memory.InMemoryStorage;
import com.artipie.docker.Docker;
import com.artipie.docker.RepoName;
import com.artipie.docker.asto.AstoDocker;
import com.artipie.docker.asto.TrustedBlobSource;
import com.artipie.http.Headers;
import com.artipie.http.Response;
import com.artipie.http.headers.Header;
import com.artipie.http.hm.IsHeader;
import com.artipie.http.hm.ResponseMatcher;
import com.artipie.http.hm.SliceHasResponse;
import com.artipie.http.rq.RequestLine;
import com.artipie.http.rq.RqMethod;
import com.artipie.http.rs.RsStatus;
import io.reactivex.Flowable;
import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;
import org.hamcrest.core.IsNot;
import org.hamcrest.core.StringStartsWith;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * Tests for {@link DockerSlice}.
 * Upload PUT endpoint.
 *
 * @since 0.2
 * @checkstyle ClassDataAbstractionCouplingCheck (2 lines)
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
class UploadEntityPostTest {

    /**
     * Docker instance used in tests.
     */
    private Docker docker;

    /**
     * Slice being tested.
     */
    private DockerSlice slice;

    @BeforeEach
    void setUp() {
        this.docker = new AstoDocker(new InMemoryStorage());
        this.slice = new DockerSlice(this.docker);
    }

    @Test
    void shouldStartUpload() {
        final Response response = this.slice.response(
            new RequestLine(RqMethod.POST, "/v2/test/blobs/uploads/").toString(),
            Headers.EMPTY,
            Flowable.empty()
        );
        MatcherAssert.assertThat(response, isUploadStarted());
    }

    @Test
    void shouldStartUploadIfMountNotExists() {
        MatcherAssert.assertThat(
            new DockerSlice(this.docker),
            new SliceHasResponse(
                isUploadStarted(),
                new RequestLine(
                    RqMethod.POST,
                    "/v2/test/blobs/uploads/?mount=sha256:123&from=test"
                )
            )
        );
    }

    @Test
    void shouldMountBlob() {
        final String digest = String.format(
            "%s:%s",
            "sha256",
            "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
        );
        final String from = "my-alpine";
        this.docker.repo(new RepoName.Simple(from)).layers().put(
            new TrustedBlobSource("data".getBytes())
        ).toCompletableFuture().join();
        final String name = "test";
        MatcherAssert.assertThat(
            this.slice,
            new SliceHasResponse(
                new ResponseMatcher(
                    RsStatus.CREATED,
                    new Header("Location", String.format("/v2/%s/blobs/%s", name, digest)),
                    new Header("Content-Length", "0"),
                    new Header("Docker-Content-Digest", digest)
                ),
                new RequestLine(
                    RqMethod.POST,
                    String.format("/v2/%s/blobs/uploads/?mount=%s&from=%s", name, digest, from)
                )
            )
        );
    }

    private static ResponseMatcher isUploadStarted() {
        return new ResponseMatcher(
            RsStatus.ACCEPTED,
            new IsHeader(
                "Location",
                new StringStartsWith(false, "/v2/test/blobs/uploads/")
            ),
            new IsHeader("Range", "0-0"),
            new IsHeader("Content-Length", "0"),
            new IsHeader("Docker-Upload-UUID", new IsNot<>(Matchers.emptyString()))
        );
    }
}

```
the error is triggered in the following specific lines in the previous code:

```java
new StringStartsWith(false, "/v2/test/blobs/uploads/")
```



 with the following error information:
[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/UploadEntityPostTest.java:[113,17] constructor StringStartsWith in class org.hamcrest.core.StringStartsWith cannot be applied to given types;

  required: java.lang.String
  found: boolean,java.lang.String
  reason: actual and formal argument lists differ in length



 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error. Don't use the comment "// ... (rest of the class remains unchanged)".
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
 