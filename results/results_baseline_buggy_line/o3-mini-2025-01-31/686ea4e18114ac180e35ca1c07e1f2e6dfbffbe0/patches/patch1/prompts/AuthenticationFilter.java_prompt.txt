 Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.
 the following client code fails:
```java
package com.wire.lithium.server.filters;

import com.wire.xenon.Const;
import com.wire.xenon.tools.Logger;
import com.wire.xenon.tools.Util;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.Provider;

@Provider
public class AuthenticationFilter implements ContainerRequestFilter {
    @Override
    public void filter(ContainerRequestContext requestContext) {
        String auth = requestContext.getHeaderString(HttpHeaders.AUTHORIZATION);
        if (auth == null) {
            Exception cause = new IllegalArgumentException("Missing Authorization");
            throw new WebApplicationException(cause, Response.Status.UNAUTHORIZED);
        }

        String serviceToken = System.getProperty(Const.WIRE_BOTS_SDK_TOKEN, System.getenv("SERVICE_TOKEN"));

        if (!Util.compareAuthorizations(auth, serviceToken)) {
            Logger.warning("Wrong service token");
            Exception cause = new IllegalArgumentException("Wrong service token");
            throw new WebApplicationException(cause, Response.Status.UNAUTHORIZED);
        }

        requestContext.setProperty("wire-auth", Util.extractToken(auth));
    }
}
```
the error is triggered in the following specific lines in the previous code:

```java
public class AuthenticationFilter implements ContainerRequestFilter {
```
```java
import javax.ws.rs.ext.Provider;
```
```java
import javax.ws.rs.core.HttpHeaders;
```
```java
import javax.ws.rs.container.ContainerRequestFilter;
```
```java
@Provider
```
```java
public void filter(ContainerRequestContext requestContext) {
```
```java
import javax.ws.rs.core.Response;
```
```java
import javax.ws.rs.WebApplicationException;
```
```java
import javax.ws.rs.container.ContainerRequestContext;
```



 with the following error information:
[ERROR] /lithium/src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java:[15,46] cannot find symbol

  symbol: class ContainerRequestFilter
[ERROR] /lithium/src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java:[12,23] package javax.ws.rs.ext does not exist
[ERROR] /lithium/src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java:[10,24] package javax.ws.rs.core does not exist
[ERROR] /lithium/src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java:[9,29] package javax.ws.rs.container does not exist
[ERROR] /lithium/src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java:[14,2] cannot find symbol

  symbol: class Provider
[ERROR] /lithium/src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java:[17,24] cannot find symbol

  symbol:   class ContainerRequestContext
  location: class com.wire.lithium.server.filters.AuthenticationFilter
[ERROR] /lithium/src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java:[11,24] package javax.ws.rs.core does not exist
[ERROR] /lithium/src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java:[7,19] package javax.ws.rs does not exist
[ERROR] /lithium/src/main/java/com/wire/lithium/server/filters/AuthenticationFilter.java:[8,29] package javax.ws.rs.container does not exist



 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error. Don't use the comment "// ... (rest of the class remains unchanged)".
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
 