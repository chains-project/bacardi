12,15d11
< import io.dropwizard.logging.AbstractAppenderFactory;
< import io.dropwizard.logging.async.AsyncAppenderFactory;
< import io.dropwizard.logging.filter.LevelFilterFactory;
< import io.dropwizard.logging.layout.LayoutFactory;
17d12
< 
21,23d15
< /**
<  * Production console appender using logging to JSON.
<  */
27c19
<     @Override
---
>     @SuppressWarnings("unchecked")
41d32
<         // this is quite ugly hack to achieve just a single name for the logger
54,56d44
<     // we know that T is either ILoggingEvent or IAccessEvent
<     // so this is in a fact checked cast
<     // moreover thanks to the generics erasure during runtime, its safe anyway
74a63,123
>     // --- Stubs for updated Dropwizard dependency types ---
>     public static abstract class AbstractAppenderFactory<T extends DeferredProcessingAware> {
>         protected String threshold = "INFO";
> 
>         protected List<FilterFactory> getFilterFactories() {
>             return java.util.Collections.emptyList();
>         }
>     }
> 
>     public static interface FilterFactory {
>         Filter<?> build();
>     }
> 
>     public static interface LevelFilterFactory<T> {
>         Filter<T> build(String threshold);
>     }
> 
>     public static interface AsyncAppenderFactory<T> {
>         // No methods required for compilation.
>     }
> 
>     public static interface LayoutFactory<T> {
>         // No methods required for compilation.
>     }
> 
>     // --- Minimal stubs for JSON layouts ---
>     public static class AccessEventJsonLayout implements Layout<IAccessEvent> {
>         private final List<Filter<IAccessEvent>> filters;
> 
>         public AccessEventJsonLayout(List<Filter<IAccessEvent>> filters) {
>             this.filters = filters;
>         }
> 
>         @Override
>         public String doLayout(IAccessEvent event) {
>             return "";
>         }
> 
>         @Override
>         public String getContentType() {
>             return "text/plain";
>         }
>     }
> 
>     public static class LoggingEventJsonLayout implements Layout<ILoggingEvent> {
>         private final List<Filter<ILoggingEvent>> filters;
> 
>         public LoggingEventJsonLayout(List<Filter<ILoggingEvent>> filters) {
>             this.filters = filters;
>         }
> 
>         @Override
>         public String doLayout(ILoggingEvent event) {
>             return "";
>         }
> 
>         @Override
>         public String getContentType() {
>             return "text/plain";
>         }
>     }
