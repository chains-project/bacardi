26,27d25
< import org.tinspin.index.PointDistanceFunction;
< import org.tinspin.index.PointEntryDist;
28a27,28
> import org.tinspin.index.covertree.DistanceFunction;
> import org.tinspin.index.covertree.CoverTree.Entry;
226c226
<                         final PointEntryDist<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
---
>                         final Entry<PVector> nn = tree.query1NN(new double[] { p.x, p.y, largestR }); // find nearest-neighbour circle
229c229
<                          * nn.dist() does not return the radius (since it's a distance metric used to
---
>                          * nn.distance() does not return the radius (since it's a distance metric used to
645,646c645
<         private static final PointDistanceFunction circleDistanceMetric = (p1, p2) -> {
<                 // from https://stackoverflow.com/a/21975136/
---
>         private static final DistanceFunction circleDistanceMetric = (p1, p2) -> {
653c652
<                 return euclideanDistance + absZDifference; // negative if inside
---
>                 return euclideanDistance + absZDifference;
