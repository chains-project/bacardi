19a20,21
> import java.io.ByteArrayInputStream;
> import java.io.ByteArrayOutputStream;
27,28d28
< import org.apache.commons.io.output.ThresholdingOutputStream;
< 
30c30,113
<  * Offloads to disk when a given memory consumption has been reacehd
---
>  * Minimal replacement for org.apache.commons.io.output.ThresholdingOutputStream.
>  */
> abstract class ThresholdingOutputStream extends OutputStream
> {
>     private final int threshold;
>     private int written = 0;
>     private boolean thresholdExceeded = false;
> 
>     protected ThresholdingOutputStream(int threshold)
>     {
>         this.threshold = threshold;
>     }
> 
>     protected abstract OutputStream getStream() throws IOException;
>     protected abstract void thresholdReached() throws IOException;
> 
>     @Override
>     public void write(int b) throws IOException
>     {
>         if (!thresholdExceeded && (written + 1 > threshold))
>         {
>             thresholdReached();
>             thresholdExceeded = true;
>         }
>         getStream().write(b);
>         written++;
>     }
> 
>     @Override
>     public void write(byte[] b, int off, int len) throws IOException
>     {
>         if (!thresholdExceeded && (written + len > threshold))
>         {
>             int toWrite = threshold - written;
>             if (toWrite > 0)
>             {
>                 getStream().write(b, off, toWrite);
>                 off += toWrite;
>                 len -= toWrite;
>                 written += toWrite;
>             }
>             thresholdReached();
>             thresholdExceeded = true;
>         }
>         getStream().write(b, off, len);
>         written += len;
>     }
> 
>     @Override
>     public void flush() throws IOException
>     {
>         getStream().flush();
>     }
> 
>     @Override
>     public void close() throws IOException
>     {
>         try
>         {
>             flush();
>         }
>         finally
>         {
>             getStream().close();
>         }
>     }
> }
> 
> /*
>  *  Licensed to the Apache Software Foundation (ASF) under one or more
>  *  contributor license agreements.  See the NOTICE file distributed with
>  *  this work for additional information regarding copyright ownership.
>  *  The ASF licenses this file to You under the Apache License, Version 2.0
>  *  (the "License"); you may not use this file except in compliance with
>  *  the License.  You may obtain a copy of the License at
>  *
>  *      http://www.apache.org/licenses/LICENSE-2.0
>  *
>  *  Unless required by applicable law or agreed to in writing, software
>  *  distributed under the License is distributed on an "AS IS" BASIS,
>  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  *  See the License for the specific language governing permissions and
>  *  limitations under the License.
>  *
45,46c128
<      * will always be one of <code>memoryOutputStream</code> or
<      * <code>diskOutputStream</code>.
---
>      * will always be one of memoryOutputStream or diskOutputStream.
155,156c237
< 
<         InputStream memoryAsInput = memoryOutputStream.toInputStream();
---
>         InputStream memoryAsInput = new ByteArrayInputStream(memoryOutputStream.toByteArray());
169c250
<      * disk, this method returns <code>null</code>.
---
>      * disk, this method returns null.
171,172c252
<      * @return The data for this output stream, or <code>null</code> if no such
<      * data is available.
---
>      * @return The data for this output stream, or null if no such data is available.
192c272
<      * If the threshold was not reached then <code>null</code> is returned.
---
>      * If the threshold was not reached then null is returned.
194,195c274
<      * @return The file for this output stream, or <code>null</code> if no such
<      * file exists.
---
>      * @return The file for this output stream, or null if no such file exists.
