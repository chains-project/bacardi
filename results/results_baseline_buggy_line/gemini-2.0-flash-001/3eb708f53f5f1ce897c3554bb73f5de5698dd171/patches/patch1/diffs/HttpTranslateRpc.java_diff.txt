25,28d24
< import com.google.api.services.translate.Translate;
< import com.google.api.services.translate.model.DetectionsResourceItems;
< import com.google.api.services.translate.model.LanguagesResource;
< import com.google.api.services.translate.model.TranslationsResource;
31a28,30
> import com.google.cloud.translate.Translation;
> import com.google.cloud.translate.Detection;
> import com.google.cloud.translate.Language;
37a37
> import com.google.api.services.translate.Translate;
41d40
<   private final TranslateOptions options;
69c68
<   public List<List<DetectionsResourceItems>> detect(List<String> texts) {
---
>   public List<List<Detection>> detect(List<String> texts) {
71,73c70,75
<       List<List<DetectionsResourceItems>> detections =
<           translate.detections().list(texts).setKey(options.getApiKey()).execute().getDetections();
<       return detections != null ? detections : ImmutableList.<List<DetectionsResourceItems>>of();
---
>       Translate.Detections.List request = translate.detections().list(texts);
>       if (options.getApiKey() != null) {
>         request.setKey(options.getApiKey());
>       }
>       List<List<Detection>> detections = request.execute().getDetections();
>       return detections != null ? detections : ImmutableList.<List<Detection>>of();
80c82
<   public List<LanguagesResource> listSupportedLanguages(Map<Option, ?> optionMap) {
---
>   public List<Language> listSupportedLanguages(Map<Option, ?> optionMap) {
82,92c84,91
<       List<LanguagesResource> languages =
<           translate
<               .languages()
<               .list()
<               .setKey(options.getApiKey())
<               .setTarget(
<                   firstNonNull(
<                       Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage()))
<               .execute()
<               .getLanguages();
<       return languages != null ? languages : ImmutableList.<LanguagesResource>of();
---
>       Translate.Languages.List request = translate.languages().list();
>       if (options.getApiKey() != null) {
>         request.setKey(options.getApiKey());
>       }
>       request.setTarget(
>           firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage()));
>       List<Language> languages = request.execute().getLanguages();
>       return languages != null ? languages : ImmutableList.<Language>of();
99c98
<   public List<TranslationsResource> translate(List<String> texts, Map<Option, ?> optionMap) {
---
>   public List<Translation> translate(List<String> texts, Map<Option, ?> optionMap) {
104,113c103,118
<       List<TranslationsResource> translations =
<           translate
<               .translations()
<               .list(texts, targetLanguage)
<               .setSource(sourceLanguage)
<               .setKey(options.getApiKey())
<               .setModel(Option.MODEL.getString(optionMap))
<               .setFormat(Option.FORMAT.getString(optionMap))
<               .execute()
<               .getTranslations();
---
>       Translate.Translations.List request = translate.translations().list(texts, targetLanguage);
>       if (sourceLanguage != null) {
>         request.setSource(sourceLanguage);
>       }
>       if (options.getApiKey() != null) {
>         request.setKey(options.getApiKey());
>       }
>       String model = Option.MODEL.getString(optionMap);
>       if (model != null) {
>         request.setModel(model);
>       }
>       String format = Option.FORMAT.getString(optionMap);
>       if (format != null) {
>         request.setFormat(format);
>       }
>       List<Translation> translations = request.execute().getTranslations();
115,116c120,121
<           translations != null ? translations : ImmutableList.<TranslationsResource>of(),
<           new Function<TranslationsResource, TranslationsResource>() {
---
>           translations != null ? translations : ImmutableList.<Translation>of(),
>           new Function<Translation, Translation>() {
118,120c123,125
<             public TranslationsResource apply(TranslationsResource translationsResource) {
<               if (translationsResource.getDetectedSourceLanguage() == null) {
<                 translationsResource.setDetectedSourceLanguage(sourceLanguage);
---
>             public Translation apply(Translation translationsResource) {
>               if (translationsResource.getSourceLanguage() == null && sourceLanguage != null) {
>                 translationsResource.setSourceLanguage(sourceLanguage);
