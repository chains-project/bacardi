7a8
> import org.spongepowered.api.command.Command;
9,12c10,11
< import org.spongepowered.api.command.CommandSource;
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
14a14
> import org.spongepowered.api.text.Text;
16,17c16
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
---
> import java.util.Collections;
19c18
< public class SelectCommand implements CommandExecutor, ChangeSkinCommand {
---
> public class SelectCommand implements ChangeSkinCommand {
28,29c27
<     @Override
<     public CommandResult execute(CommandSource src, CommandContext args) {
---
>     public CommandResult execute(org.spongepowered.api.command.CommandSource src, CommandContext args) {
35c33,39
<         String skinName = args.<String>getOne("skinName").get().toLowerCase().replace("skin-", "");
---
>         Parameter.Value<String> skinNameValue = args.one(Parameter.string().key("skinName").build());
>         if (!skinNameValue.isPresent()) {
>             plugin.sendMessage(src, "invalid-skin-name");
>             return CommandResult.empty();
>         }
> 
>         String skinName = skinNameValue.get().toLowerCase().replace("skin-", "");
49,54c53,57
<     public CommandSpec buildSpec() {
<         return CommandSpec.builder()
<                 .executor(this)
<                 .arguments(string(of("skinName")))
<                 .permission(PomData.ARTIFACT_ID + ".command.skinselect.base")
<                 .build();
---
>     public Command.Builder buildSpec() {
>         return Command.builder()
>                 .executor(this::execute)
>                 .addParameter(Parameter.string().key("skinName").build())
>                 .permission(PomData.ARTIFACT_ID + ".command.skinselect.base");
