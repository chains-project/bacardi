 Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.
 the following client code fails:
```java
package micycle.pgs;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.jupiter.api.Test;

import processing.core.PShape;

public class PGS_MeshingTests {

	@Test
	void testAreaMerge() {
		PShape mesh = PGS_Triangulation.delaunayTriangulation(PGS_PointSet.random(0, 0, 1000, 1000, 1111, 0));
		List<PShape> faces = PGS_Conversion.getChildren(mesh);
		faces.sort((a, b) -> Double.compare(PGS_ShapePredicates.area(a), PGS_ShapePredicates.area(b)));
		double areaThreshold = PGS_ShapePredicates.area(faces.get(faces.size() / 2));

		PShape mergedMesh = PGS_Meshing.areaMerge(mesh, areaThreshold);
		assertTrue(PGS_Conversion.getChildren(mergedMesh).stream().allMatch(f -> PGS_ShapePredicates.area(f) >= areaThreshold));
		assertTrue(faces.size() >= mergedMesh.getChildCount());
		assertEquals(PGS_ShapePredicates.area(mesh), PGS_ShapePredicates.area(mergedMesh), 1e-6);
	}

}

```
the error is triggered in the following specific lines in the previous code:

```java
assertEquals(PGS_ShapePredicates.area(mesh), PGS_ShapePredicates.area(mergedMesh), 1e-6);
```
```java
import static org.junit.Assert.assertTrue;
```
```java
assertTrue(faces.size() >= mergedMesh.getChildCount());
```
```java
import static org.junit.Assert.assertEquals;
```
```java
assertTrue(PGS_Conversion.getChildren(mergedMesh).stream().allMatch(f -> PGS_ShapePredicates.area(f) >= areaThreshold));
```



 with the following error information:
[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[24,17] cannot find symbol

  symbol:   method assertEquals(double,double,double)
  location: class micycle.pgs.PGS_MeshingTests
[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[4,24] cannot find symbol

  symbol:   class Assert
  location: package org.junit
[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[23,17] cannot find symbol

  symbol:   method assertTrue(boolean)
  location: class micycle.pgs.PGS_MeshingTests
[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[3,24] cannot find symbol

  symbol:   class Assert
  location: package org.junit
[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[22,17] cannot find symbol

  symbol:   method assertTrue(boolean)
  location: class micycle.pgs.PGS_MeshingTests



 propose a patch that can be applied to the code to fix the issue.
 Return only a complete and compilable class in a fenced code block.
 Do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
 You CANNOT change the function signature of any method but may create variables if it simplifies the code.
 You CAN remove the @Override annotation IF AND ONLY IF the method no longer overrides a method in the updated dependency version.
 If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
 Avoid removing any existing code unless it directly causes a compilation or functionality error. Don't use the comment "// ... (rest of the class remains unchanged)".
 Return only the fixed class, ensuring it fully compiles and adheres to these constraints.
 