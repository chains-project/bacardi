33,45c33,35
< import org.jasypt.spring.security.PBEPasswordEncoder;
< /**
<  * Password Encoder using symmetric encryption
<  * 
<  * The salt parameter is not used, this implementation computes a random salt as
<  * default.
<  * 
<  * {@link #isPasswordValid(String, String, Object)}
<  * {@link #encodePassword(String, Object)}
<  * 
<  * @author Lorenzo Natali
<  * 
<  */
---
> 
> // Removed: import org.jasypt.spring.security.PBEPasswordEncoder;
> 
91d80
< 
102,103c91,101
<                         PBEPasswordEncoder encoder = new PBEPasswordEncoder();
<                         encoder.setPbeStringEncryptor(stringEncrypter);
---
>             // Inline implementation of PasswordEncoder to replace the removed PBEPasswordEncoder:
>             PasswordEncoder encoder = new PasswordEncoder() {
>                 @Override
>                 public String encodePassword(String rawPass, Object salt) {
>                     return stringEncrypter.encrypt(rawPass);
>                 }
>                 @Override
>                 public boolean isPasswordValid(String encPass, String rawPass, Object salt) {
>                     return stringEncrypter.decrypt(encPass).equals(rawPass);
>                 }
>             };
127,128c125
<                         public boolean isPasswordValid(String encPass, char[] rawPass,
<                                         Object salt) {
---
>             public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {
145,146c142
<                                         return new String(Base64.getEncoder().encode(byteEncrypter
<                                                         .encrypt(bytes)));
---
>                     return new String(Base64.getEncoder().encode(byteEncrypter.encrypt(bytes)));
157,158c153
<                                 throw new RuntimeException("Keystore: "
<                                                 + keystoreProvider.getFile() + " does not"
---
>                 throw new RuntimeException("Keystore: " + keystoreProvider.getFile() + " does not"
161,162c156
<                         return keystoreProvider.getSecretKey(getKeyAliasInKeyStore())
<                                         .getEncoded();
---
>             return keystoreProvider.getSecretKey(getKeyAliasInKeyStore()).getEncoded();
164,165c158
<                         throw new RuntimeException("Cannot find alias: "
<                                         + getKeyAliasInKeyStore() + " in "
---
>             throw new RuntimeException("Cannot find alias: " + getKeyAliasInKeyStore() + " in "
180d172
< 
185,186c177
<         public char[] decodeToCharArray(String encPass)
<                         throws UnsupportedOperationException {
---
>     public char[] decodeToCharArray(String encPass) throws UnsupportedOperationException {
191d181
< 
200d189
<         
