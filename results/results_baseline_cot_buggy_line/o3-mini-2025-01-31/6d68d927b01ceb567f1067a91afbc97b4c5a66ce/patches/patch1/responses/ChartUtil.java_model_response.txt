<code_analysis>
1. The error message indicates that the class ScriptResult from the package com.gargoylesoftware.htmlunit no longer exists (or is not available) after the dependency update. Both its import and its constructors usages (in getChartDataById and getDataOfOnlyChartOnPageWithGivenToolAttribute) are causing compilation errors.
2. In the client code, the problematic lines are the import of ScriptResult and the instantiation of ScriptResult to extract the JavaScript result. The dependency update appears to have removed or refactored ScriptResult, so the code can no longer use it.
3. To address the issue without changing function signatures, we can remove the dependency on ScriptResult. In the methods that use PageObject.executeScript, the returned Object can be directly used. That is, instead of wrapping the result into a ScriptResult and then calling getJavaScriptResult(), we will check if the result is non-null and simply call toString() on it.
4. The modifications required are:
   - Remove the import statement for com.gargoylesoftware.htmlunit.ScriptResult.
   - Replace the creation and usage of ScriptResult with a null-check on the raw result from pageObject.executeScript.
   - Preserve the same behavior (returning the stringified JavaScript result) without altering the public API.
</code_analysis>

```java
package io.jenkins.plugins.coverage.util;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.jenkinsci.test.acceptance.po.PageObject;

/**
 * Charts are displayed one multiple PageObjects. This util provides some helper methods to deal with charts.
 */
@SuppressWarnings("hideutilityclassconstructor")
// TODO: Move this code to ATH so we can reuse it from other plugins
public class ChartUtil {
    private static final int MAX_ATTEMPTS = 5;

    /**
     * Returns a chart's data by its id.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return data as json
     */
    public static String getChartDataById(final PageObject pageObject, final String elementId) {
        if (isChartDisplayedByElementId(pageObject, elementId)) {
            Object result = pageObject.executeScript(String.format(
                    "delete(window.Array.prototype.toJSON) %n"
                    + "return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\"%s\")).getOption())",
                    elementId));
            if (result != null) {
                return result.toString();
            }
        }
        return null;
    }

    /**
     * Returns data of only chart with given tool attribute value on page.
     *
     * @param pageObject
     *         which contains only one chart with given tool attribute value
     * @param toolAttribute
     *         value in div tag of chart
     *
     * @return data as json
     */
    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,
            final String toolAttribute) {
        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {
            for (int i = 0; i < MAX_ATTEMPTS; i++) {
                Object result = pageObject.executeScript(String.format(
                        "delete(window.Array.prototype.toJSON) %n"
                        + "return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\"div [tool='%s']\")).getOption())",
                        toolAttribute));
                if (result != null) {
                    return result.toString();
                }
                pageObject.elasticSleep(1000);
            }
        }
        throw new java.util.NoSuchElementException("Found no trend chart with ID '" + toolAttribute + "'");
    }

    /**
     * Returns if chart is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {
        try {
            WebElement chart = pageObject.find(By.id(elementId));
            return chart != null && chart.isDisplayed();
        }
        catch (NoSuchElementException exception) {
            return false;
        }
    }

    /**
     * Returns if a chart with given tool attribute in div tag is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param toolAttribute
     *         of div tag of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {
        try {
            WebElement chart = pageObject.find(By.cssSelector("div[tool='" + toolAttribute + "']"));
            return chart != null && chart.isDisplayed();
        }
        catch (NoSuchElementException exception) {
            return false;
        }
    }
}
```
