29d28
< import org.apache.commons.io.input.ClosedInputStream;
31,51d29
< /**
<  * This class implements an output stream in which the data is
<  * written into a byte array. The buffer automatically grows as data
<  * is written to it.
<  * <p>
<  * The data can be retrieved using <code>toByteArray()</code> and
<  * <code>toString()</code>.
<  * <p>
<  * Closing a {@code ByteArrayOutputStream} has no effect. The methods in
<  * this class can be called after the stream has been closed without
<  * generating an {@code IOException}.
<  * <p>
<  * This is an alternative implementation of the {@link java.io.ByteArrayOutputStream}
<  * class. The original implementation only allocates 32 bytes at the beginning.
<  * As this class is designed for heavy duty it starts at 1024 bytes. In contrast
<  * to the original it doesn't reallocate the whole memory block but allocates
<  * additional buffers. This way no buffers need to be garbage collected and
<  * the contents don't have to be copied to the new buffer. This class is
<  * designed to behave exactly like the original. The only exception is the
<  * deprecated toString(int) method that has been ignored.
<  */
131d108
< 
146,148c123
<                 newBufferSize = Math.max(
<                     currentBuffer.length << 1,
<                     newcount - filledBufferSum );
---
>                 newBufferSize = Math.max(currentBuffer.length << 1, newcount - filledBufferSum);
151d125
< 
168,172c142
<         if ( ( off < 0 )
<                  || ( off > b.length )
<                  || ( len < 0 )
<                  || ( ( off + len ) > b.length )
<                  || ( ( off + len ) < 0 ) )
---
>         if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0))
348,377d317
<         return toBufferedInputStream( input, 1024 );
<     }
< 
<     /**
<      * Fetches entire contents of an <code>InputStream</code> and represent
<      * same data as result InputStream.
<      * <p>
<      * This method is useful where,
<      * <ul>
<      * <li>Source InputStream is slow.</li>
<      * <li>It has network resources associated, so we cannot keep it open for
<      * long time.</li>
<      * <li>It has network timeout associated.</li>
<      * </ul>
<      * It can be used in favor of {@link #toByteArray()}, since it
<      * avoids unnecessary allocation and copy of byte[].<br>
<      * This method buffers the input internally, so there is no need to use a
<      * <code>BufferedInputStream</code>.
<      *
<      * @param input Stream to be fully buffered.
<      * @param size the initial buffer size
<      *
<      * @return A fully buffered stream.
<      *
<      * @throws java.io.IOException if an I/O error occurs
<      * @since 2.5
<      */
<     public static InputStream toBufferedInputStream( final InputStream input, int size )
<         throws IOException
<     {
380c320
<         final ByteArrayOutputStream output = new ByteArrayOutputStream( size );
---
>         final ByteArrayOutputStream output = new ByteArrayOutputStream(1024);
401c341
<             return new ClosedInputStream();
---
>             return new ByteArrayInputStream(EMPTY_BYTE_ARRAY);
