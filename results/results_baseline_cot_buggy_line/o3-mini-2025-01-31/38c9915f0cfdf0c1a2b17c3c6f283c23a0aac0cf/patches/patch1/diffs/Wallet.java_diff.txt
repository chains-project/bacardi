30c30
< import org.cactoos.collection.Filtered;
---
> import org.cactoos.iterable.Filtered; // Updated: moved from org.cactoos.collection
36c36
< import org.cactoos.scalar.CheckedScalar;
---
> import org.cactoos.scalar.IoCheckedScalar; // Updated: using IoCheckedScalar instead of CheckedScalar
38d37
< import org.cactoos.scalar.UncheckedScalar;
40d38
< import org.cactoos.text.SplitText;
42a41,42
> import org.cactoos.text.split.Split; // Updated: SplitText is now Split in a subpackage
> import org.cactoos.Scalar;
54a55
> 
201c202
<             return new CheckedScalar<>(
---
>             return new IoCheckedScalar<>(
204,207c205
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\n"
<                         )
---
>                         new Split(new TextOf(this.path), "\n")
211,212c209
<                 ),
<                 e -> new IOException(e)
---
>                 )
248c245,246
<                 incoming -> new Filtered<>(
---
>                 incoming -> new ListOf<>(
>                     new Filtered<>(
259a258
>                     )
275,278c274
<                         new SplitText(
<                             new TextOf(this.path),
<                             "\\n"
<                         )
---
>                         new Split(new TextOf(this.path), "\\n")
295a292,317
> 
>     /**
>      * A simple UncheckedScalar implementation.
>      *
>      * This class wraps a {@link Scalar} and rethrows any checked exception as a
>      * {@link RuntimeException}.
>      *
>      * @param <T> Type of the wrapped scalar's value
>      */
>     final class UncheckedScalar<T> implements Scalar<T> {
> 
>         private final Scalar<T> scalar;
> 
>         public UncheckedScalar(final Scalar<T> scalar) {
>             this.scalar = scalar;
>         }
> 
>         @Override
>         public T value() {
>             try {
>                 return this.scalar.value();
>             } catch (Exception ex) {
>                 throw new RuntimeException(ex);
>             }
>         }
>     }
