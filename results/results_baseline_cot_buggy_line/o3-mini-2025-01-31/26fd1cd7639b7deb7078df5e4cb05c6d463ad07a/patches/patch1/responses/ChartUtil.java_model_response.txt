<code_analysis>
1. Examine the error message:
   - The error indicates that the class ScriptResult (and its package com.gargoylesoftware.htmlunit.ScriptResult) cannot be found. The errors occur when trying to create a new ScriptResult instance and call getJavaScriptResult() on it.
   - This is clearly due to a breaking update in the dependency that removed (or relocated) ScriptResult.
2. Review the client code:
   - The two methods getChartDataById and getDataOfOnlyChartOnPageWithGivenToolAttribute are both using ScriptResult to wrap the result of pageObject.executeScript().
   - The import of com.gargoylesoftware.htmlunit.ScriptResult is now failing.
3. Consider potential fixes:
   - Since the dependency update removed ScriptResult, we can remove its usage.
   - Instead of wrapping the result in a ScriptResult and calling getJavaScriptResult(), we simply check if the result is non-null and then call toString() on it.
   - This change does not alter the function signatures, and it only removes code that directly causes the compilation error.
4. Plan the necessary changes:
   - Remove the import for com.gargoylesoftware.htmlunit.ScriptResult.
   - In getChartDataById, replace "new ScriptResult(result).getJavaScriptResult().toString()" with a null check on result and then return result.toString().
   - Do a similar change in getDataOfOnlyChartOnPageWithGivenToolAttribute.
   - Leave all other code unchanged.

Below is the complete fixed class:
</code_analysis>

```java
package io.jenkins.plugins.coverage.util;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;

import org.jenkinsci.test.acceptance.po.PageObject;

/**
 * Charts are displayed on multiple PageObjects. This util provides some helper methods to deal with charts.
 */
@SuppressWarnings("hideutilityclassconstructor")
// TODO: Move this code to ATH so we can reuse it from other plugins
public class ChartUtil {
    private static final int MAX_ATTEMPTS = 5;

    /**
     * Returns a chart's data by its id.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return data as json
     */
    public static String getChartDataById(final PageObject pageObject, final String elementId) {
        if (isChartDisplayedByElementId(pageObject, elementId)) {
            Object result = pageObject.executeScript(String.format(
                    "delete(window.Array.prototype.toJSON) %n"
                  + "return JSON.stringify(echarts.getInstanceByDom(document.getElementById(\"%s\")).getOption())",
                    elementId));
            return result != null ? result.toString() : null;
        }
        return null;
    }

    /**
     * Returns data of only chart with given tool attribute value on page.
     *
     * @param pageObject
     *         which contains only one chart with given tool attribute value
     * @param toolAttribute
     *         value in div tag of chart
     *
     * @return data as json
     */
    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,
            final String toolAttribute) {
        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {
            for (int i = 0; i < MAX_ATTEMPTS; i++) {
                Object result = pageObject.executeScript(String.format(
                        "delete(window.Array.prototype.toJSON) %n"
                      + "return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\"div [tool='%s']\")).getOption())",
                        toolAttribute));

                if (result != null) {
                    return result.toString();
                }
                pageObject.elasticSleep(1000);
            }
        }
        throw new java.util.NoSuchElementException("Found no trend chart with ID '%s''" + toolAttribute);
    }

    /**
     * Returns if chart is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {
        try {
            WebElement chart = pageObject.find(By.id(elementId));
            return chart != null && chart.isDisplayed();
        } catch (NoSuchElementException exception) {
            return false;
        }
    }

    /**
     * Returns if a chart with given tool attribute in div tag is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param toolAttribute
     *         of div tag of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {
        try {
            WebElement chart = pageObject.find(By.cssSelector("div[tool='" + toolAttribute + "']"));
            return chart != null && chart.isDisplayed();
        } catch (NoSuchElementException exception) {
            return false;
        }
    }
}
``` 

This patch removes the problematic ScriptResult usage and directly returns the JavaScript execution result, thereby resolving the dependency issue.
