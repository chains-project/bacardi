<code_analysis>
1. The error message indicates that the constructor for StringContains in the updated Hamcrest dependency now only accepts a single String argument. Previously, it was invoked with a boolean and a String, for example: new StringContains(true, "Invalid tag") and new StringContains(false, original).

2. In the client code, the failing lines are inside the assertion that checks the content of the exception message:
   - new StringContains(true, "Invalid tag") should ensure that the throwable message contains "Invalid tag".
   - new StringContains(false, original) was intended to verify that the throwable message does not contain the original tag string.
   
3. To fix the issue:
   - Replace new StringContains(true, "Invalid tag") with new StringContains("Invalid tag").
   - Replace new StringContains(false, original) with not(new StringContains(original)). This uses Hamcrest's not matcher (from org.hamcrest.CoreMatchers) to negate the condition.

4. These modifications conform with all constraints: function signatures are preserved, we only adjust the usage of the dependency API with the appropriate import (org.hamcrest.CoreMatchers.not), and we keep all other code unchanged.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2023 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker;

import com.artipie.docker.error.InvalidTagNameException;
import java.util.Arrays;
import org.hamcrest.MatcherAssert;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.StringContains;
import static org.hamcrest.CoreMatchers.not;
import org.hamcrest.core.IsEqual;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

/**
 * Tests for {@link Tag.Valid}.
 *
 * @since 0.2
 */
class TagValidTest {

    @ParameterizedTest
    @ValueSource(strings = {
        "latest",
        "1.0",
        "my-tag",
        "MY_TAG",
        "My.Tag.1",
        "_some_tag",
        //@checkstyle LineLengthCheck (1 line)
        "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"
    })
    void shouldGetValueWhenValid(final String original) {
        final Tag.Valid tag = new Tag.Valid(original);
        MatcherAssert.assertThat(tag.valid(), new IsEqual<>(true));
        MatcherAssert.assertThat(tag.value(), new IsEqual<>(original));
    }

    @ParameterizedTest
    @ValueSource(strings = {
        "",
        ".0",
        "*",
        "\u00ea",
        "-my-tag",
        //@checkstyle LineLengthCheck (1 line)
        "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678"
    })
    void shouldFailToGetValueWhenInvalid(final String original) {
        final Tag.Valid tag = new Tag.Valid(original);
        MatcherAssert.assertThat(tag.valid(), new IsEqual<>(false));
        final Throwable throwable = Assertions.assertThrows(
            InvalidTagNameException.class,
            tag::value
        );
        MatcherAssert.assertThat(
            throwable.getMessage(),
            new AllOf<>(
                Arrays.asList(
                    new StringContains("Invalid tag"),
                    not(new StringContains(original))
                )
            )
        );
    }
}
```
