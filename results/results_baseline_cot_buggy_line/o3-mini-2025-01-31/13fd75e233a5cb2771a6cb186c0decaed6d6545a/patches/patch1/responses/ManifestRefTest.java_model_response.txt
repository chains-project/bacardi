<code_analysis>
1. Error Message Analysis:
   - The error indicates that the constructor for StringContains is now defined to accept only a single String argument. Previously, it accepted a boolean along with a String.
   - The specific lines are in the failsToResolveInvalid() test (lines 57-58) where StringContains is instantiated with a boolean and a String.
   - This suggests that an updated version of the Hamcrest dependency has removed the two-argument constructor.

2. Client Code Review:
   - The problematic expressions are:
       • new StringContains(true, "Unsupported reference")
       • new StringContains(false, string)
   - The first matcher was likely intended to verify that the exception message contains "Unsupported reference".
   - The second matcher used false as the first argument, which likely signified that the exception message should NOT contain the original invalid string.
   - Now that the boolean parameter is no longer supported, we must replicate this semantics using available matchers.

3. Proposed Fix:
   - Replace new StringContains(true, "Unsupported reference") with containsString("Unsupported reference") from Hamcrest.
   - Replace new StringContains(false, string) with not(containsString(string)) to assert that the message does not contain the given string.
   - Import static methods from org.hamcrest.CoreMatchers to simplify matcher creation.

4. Implementation Considerations:
   - We are not changing any function signatures.
   - We are addressing only the changes needed due to the updated dependency.
   - The rest of the code remains the same as it is not directly affected by this change.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2023 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */

package com.artipie.docker.ref;

import com.artipie.docker.Digest;
import com.artipie.docker.Tag;
import java.util.Arrays;
import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;
import org.hamcrest.core.AllOf;
import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.not;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

/**
 * Test case for {@link ManifestRef}.
 * @since 0.1
 */
public final class ManifestRefTest {

    @Test
    void resolvesDigestString() {
        MatcherAssert.assertThat(
            new ManifestRef.FromString("sha256:1234").link().string(),
            Matchers.equalTo("revisions/sha256/1234/link")
        );
    }

    @Test
    void resolvesTagString() {
        MatcherAssert.assertThat(
            new ManifestRef.FromString("1.0").link().string(),
            Matchers.equalTo("tags/1.0/current/link")
        );
    }

    @ParameterizedTest
    @ValueSource(strings = {
        "",
        "a:b:c",
        ".123"
    })
    void failsToResolveInvalid(final String string) {
        final Throwable throwable = Assertions.assertThrows(
            IllegalStateException.class,
            () -> new ManifestRef.FromString(string).link().string()
        );
        MatcherAssert.assertThat(
            throwable.getMessage(),
            new AllOf<>(
                Arrays.asList(
                    containsString("Unsupported reference"),
                    not(containsString(string))
                )
            )
        );
    }

    @Test
    void resolvesDigestLink() {
        MatcherAssert.assertThat(
            new ManifestRef.FromDigest(new Digest.Sha256("0000")).link().string(),
            Matchers.equalTo("revisions/sha256/0000/link")
        );
    }

    @Test
    void resolvesTagLink() {
        MatcherAssert.assertThat(
            new ManifestRef.FromTag(new Tag.Valid("latest")).link().string(),
            Matchers.equalTo("tags/latest/current/link")
        );
    }

    @Test
    void stringFromDigestRef() {
        MatcherAssert.assertThat(
            new ManifestRef.FromDigest(new Digest.Sha256("0123")).string(),
            Matchers.equalTo("sha256:0123")
        );
    }

    @Test
    void stringFromTagRef() {
        final String tag = "0.2";
        MatcherAssert.assertThat(
            new ManifestRef.FromTag(new Tag.Valid(tag)).string(),
            Matchers.equalTo(tag)
        );
    }

    @Test
    void stringFromStringRef() {
        final String value = "whatever";
        MatcherAssert.assertThat(
            new ManifestRef.FromString(value).string(),
            Matchers.equalTo(value)
        );
    }
}
```
