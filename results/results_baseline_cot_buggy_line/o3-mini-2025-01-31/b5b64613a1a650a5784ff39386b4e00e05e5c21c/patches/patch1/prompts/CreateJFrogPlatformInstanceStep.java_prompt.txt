 You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates.
Your task is to analyze the provided code and error message, then propose a patch that can be applied to the client code to resolve the issue.

 Here is the client code that is failing:
```java
package org.jfrog.hudson.pipeline.scripted.steps;

import com.google.inject.Inject;
import hudson.Extension;
import org.apache.commons.lang3.StringUtils;
import org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;
import org.jenkinsci.plugins.workflow.steps.AbstractStepImpl;
import org.jenkinsci.plugins.workflow.steps.StepContext;
import org.jenkinsci.plugins.workflow.steps.SynchronousStepExecution;
import org.jfrog.hudson.pipeline.common.types.ArtifactoryServer;
import org.jfrog.hudson.pipeline.common.types.DistributionServer;
import org.jfrog.hudson.pipeline.common.types.JFrogPlatformInstance;
import org.kohsuke.stapler.DataBoundConstructor;

import javax.annotation.Nonnull;

import static org.apache.commons.lang3.StringUtils.*;

/**
 * Created by romang on 4/21/16.
 */
public class CreateJFrogPlatformInstanceStep extends AbstractStepImpl {
    private final String distributionUrl;
    private final String artifactoryUrl;
    private final String credentialsId;
    private final String username;
    private final String password;
    private final String url;

    @DataBoundConstructor
    public CreateJFrogPlatformInstanceStep(String url, String artifactoryUrl, String distributionUrl, String username, String password, String credentialsId) {
        this.url = url;
        this.artifactoryUrl = artifactoryUrl;
        this.distributionUrl = distributionUrl;
        this.username = username;
        this.password = password;
        this.credentialsId = credentialsId;
    }

    public String getUrl() {
        return url;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public String getCredentialsId() {
        return credentialsId;
    }

    /**
     * We don't use additional context fields in this step execution,
     * so we extend SynchronousStepExecution directly and not ArtifactorySynchronousStepExecution
     */
    public static class Execution extends SynchronousStepExecution<JFrogPlatformInstance> {
        private static final long serialVersionUID = 1L;

        private transient CreateJFrogPlatformInstanceStep step;

        @Inject
        public Execution(CreateJFrogPlatformInstanceStep step, StepContext context) {
            super(context);
            this.step = step;
        }

        @Override
        protected JFrogPlatformInstance run() throws Exception {
            if (isAllBlank(step.url, step.artifactoryUrl, step.distributionUrl)) {
                throw new IllegalArgumentException("At least one of the following is mandatory: 'url', 'artifactoryUrl', 'distributionUrl'");
            }
            String urlWithoutSlash = removeEnd(step.url, "/");
            String artifactoryUrl = defaultIfBlank(step.artifactoryUrl, urlWithoutSlash + "/" + "artifactory");
            String distributionUrl = defaultIfBlank(step.distributionUrl, urlWithoutSlash + "/" + "distribution");

            ArtifactoryServer artifactoryServer;
            DistributionServer distributionServer;
            if (!isEmpty(step.credentialsId)) {
                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.credentialsId);
                distributionServer = new DistributionServer(distributionUrl, step.credentialsId);
            } else {
                artifactoryServer = new ArtifactoryServer(artifactoryUrl, step.username, step.password);
                distributionServer = new DistributionServer(distributionUrl, step.username, step.password);
            }
            artifactoryServer.setPlatformUrl(urlWithoutSlash);
            return new JFrogPlatformInstance(artifactoryServer, distributionServer, step.url, "");
        }
    }

    @Extension
    public static final class DescriptorImpl extends AbstractStepDescriptorImpl {

        public DescriptorImpl() {
            super(CreateJFrogPlatformInstanceStep.Execution.class);
        }

        @Override
        public String getFunctionName() {
            return "newJFrogPlatformInstance";
        }

        @Nonnull
        @Override
        public String getDisplayName() {
            return "Returns new JFrog platform instance";
        }

        @Override
        public boolean isAdvanced() {
            return true;
        }
    }
}

```

 the error is triggered in the following specific lines in the previous code:

```java
if (isAllBlank(step.url, step.artifactoryUrl, step.distributionUrl)) {
```


 And here is the error message:
[ERROR] /artifactory-plugin/src/main/java/org/jfrog/hudson/pipeline/scripted/steps/CreateJFrogPlatformInstanceStep.java:[73,17] cannot find symbol
  symbol:   method isAllBlank(java.lang.String,java.lang.String,java.lang.String)
  location: class org.jfrog.hudson.pipeline.scripted.steps.CreateJFrogPlatformInstanceStep.Execution



 Before proposing a fix, please analyze the error message and client code. Wrap your analysis inside <code_analysis> tags:

<code_analysis>
1. Examine the error message:
   - Identify the specific issue related to the dependency update.
   - Note the line number or method where the error occurs.
   - Determine which dependency and version is causing the issue.

2. Review the client code:
   - Locate the problematic areas mentioned in the error message.
   - Identify any related code that might be affected by the changes.

3. Consider potential fixes that adhere to the following constraints:
   - Do not change any function signatures.
   - Only remove the @Override annotation if the method no longer overrides a method in the updated dependency version.
   - Ensure correct imports are used, considering the newer dependency version.
   - Avoid removing existing code unless it directly causes a compilation or functionality error.

4. Plan the necessary changes to fix the issue:
   - List the specific modifications required.
   - Consider potential side effects of the proposed changes.
   - Ensure the fix addresses the root cause of the error.
</code_analysis>

Based on your analysis, propose a patch to fix the issue. Your response should be a complete and compilable Java class in a fenced code block. Adhere to these guidelines:

1. Do not change any function signatures.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Avoid removing any existing code unless it directly causes a compilation or functionality error.
6. Ensure the entire class is included and that it will compile correctly. Don't use the comment "// ... (rest of the class remains unchanged)".

Please provide your fixed class in the following format:

```java
// Your complete, fixed Java class here
```

Remember to focus specifically on issues related to the dependency update when proposing your fix.
 