87,91c87,88
<   /**
<    * Creates a new project.
<    *
<    * @throws ResourceManagerException upon failure
<    */
---
>   
>   // Updated method signatures to match the new dependency structure
94,98d90
<   /**
<    * Marks the project identified by the specified project ID for deletion.
<    *
<    * @throws ResourceManagerException upon failure
<    */
101,106d92
<   /**
<    * Retrieves the project identified by the specified project ID. Returns {@code null} if the
<    * project is not found or if the user doesn't have read permissions for the project.
<    *
<    * @throws ResourceManagerException upon failure
<    */
109,113d94
<   /**
<    * Lists the projects visible to the current user.
<    *
<    * @throws ResourceManagerException upon failure
<    */
116,122d96
<   /**
<    * Restores the project identified by the specified project ID. Undelete will only succeed if the
<    * project has a lifecycle state of {@code DELETE_REQUESTED} state. The caller must have modify
<    * permissions for this project.
<    *
<    * @throws ResourceManagerException upon failure
<    */
125,130d98
<   /**
<    * Replaces the attributes of the project. The caller must have modify permissions for this
<    * project.
<    *
<    * @throws ResourceManagerException upon failure
<    */
133,137d100
<   /**
<    * Returns the IAM policy associated with a project.
<    *
<    * @throws ResourceManagerException upon failure
<    */
140,144d102
<   /**
<    * Replaces the IAM policy associated with the given project.
<    *
<    * @throws ResourceManagerException upon failure
<    */
147,152d104
<   /**
<    * Tests whether the caller has the given permissions. Returns a list of booleans corresponding to
<    * whether or not the user has the permission in the same position of input list.
<    *
<    * @throws ResourceManagerException upon failure
<    */
155,160d106
<   /**
<    * Tests whether the caller has the given permissions on the specified Organization. Returns the
<    * permissions and their results.
<    *
<    * @throws ResourceManagerException upon failure
<    */
164,166d109
<   // TODO(ajaykannan): implement "Organization" functionality when available (issue #319)
< 
<   /** Clears the Policy from a resource. */
169,177d111
<   /**
<    * Gets the effective Policy on a resource.
<    *
<    * <p>This is the result of merging Policies in the resource hierarchy. The returned Policy does
<    * not have an etag set because it is a computed Policy across multiple resources. Subtrees of
<    * Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
<    *
<    * @throws ResourceManagerException upon failure
<    */
180,188d113
<   /**
<    * Gets the Policy on a resource.
<    *
<    * <p>If no Policy is set on the resource, a Policy is returned with default values including
<    * POLICY_TYPE_NOT_SET for the policy_type oneof. The etag value can be used with
<    * projects.setOrgPolicy() to create or update a Policy during read-modify-write.
<    *
<    * @throws ResourceManagerException upon failure
<    */
191,195d115
<   /**
<    * Lists all the Constraints that can be applied on the specified resource.
<    *
<    * @throws ResourceManagerException upon failure
<    */
199,203d118
<   /**
<    * Lists all the Policies set for a particular resource.
<    *
<    * @throws ResourceManagerException upon failure
<    */
206,213d120
<   /**
<    * Updates the specified Policy on the resource. Creates a new Policy for that Constraint on the
<    * resource if one does not exist.
<    *
<    * <p>Not supplying an etag on the request Policy results in an unconditional write of the Policy.
<    *
<    * @throws ResourceManagerException upon failure
<    */
