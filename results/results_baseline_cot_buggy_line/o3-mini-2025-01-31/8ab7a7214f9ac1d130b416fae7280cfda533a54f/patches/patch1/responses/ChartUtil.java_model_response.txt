<code_analysis>
1. Error Analysis:
   - The errors indicate that the class ScriptResult and its package (com.gargoylesoftware.htmlunit.ScriptResult) can no longer be found. This is due to a breaking dependency update in which HtmlUnitâ€™s ScriptResult is either removed or relocated.
   - The errors are triggered in methods getChartDataById() and getDataOfOnlyChartOnPageWithGivenToolAttribute() when trying to use the ScriptResult class.
   
2. Code Review:
   - The code imports ScriptResult from com.gargoylesoftware.htmlunit, which is now invalid.
   - Both methods rely on wrapping the result from pageObject.executeScript with a ScriptResult instance to access getJavaScriptResult(). Since the dependency no longer provides this helper class, we must adjust the code.
   
3. Potential Fix:
   - Remove the import for ScriptResult.
   - Remove the use of new ScriptResult(result) and its method getJavaScriptResult(). It appears that pageObject.executeScript() now directly returns the JavaScript evaluation result.
   - Simply use the value returned by executeScript (casting to String if necessary) as the data.
   - No changes are made to function signatures.
   
4. Specific Changes:
   - Remove the ScriptResult import.
   - In getChartDataById(), directly check if the result is not null and then return result.toString().
   - In getDataOfOnlyChartOnPageWithGivenToolAttribute(), remove the ScriptResult wrapper and directly return result.toString() if the result is non-null.
   - Preserve all other code, as it does not contribute to the compilation errors.
</code_analysis>

```java
package io.jenkins.plugins.coverage.util;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.jenkinsci.test.acceptance.po.PageObject;

/**
 * Charts are displayed on multiple PageObjects. This util provides some helper methods to deal with charts.
 */
// TODO: Move this code to ATH so we can reuse it from other plugins
@SuppressWarnings("hideutilityclassconstructor")
public class ChartUtil {
    private static final int MAX_ATTEMPTS = 5;

    /**
     * Returns a chart's data by its id.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return data as json
     */
    public static String getChartDataById(final PageObject pageObject, final String elementId) {
        if (isChartDisplayedByElementId(pageObject, elementId)) {
            Object result = pageObject.executeScript(String.format(
                    "delete(window.Array.prototype.toJSON); " +
                    "return JSON.stringify(echarts.getInstanceByDom(document.getElementById('%s')).getOption());",
                    elementId));
            return result != null ? result.toString() : null;
        }
        return null;
    }

    /**
     * Returns data of only chart with given tool attribute value on page.
     *
     * @param pageObject
     *         which contains only one chart with given tool attribute value
     * @param toolAttribute
     *         value in div tag of chart
     *
     * @return data as json
     */
    public static String getDataOfOnlyChartOnPageWithGivenToolAttribute(final PageObject pageObject,
                                                                          final String toolAttribute) {
        if (isChartDisplayedByDivToolAttribute(pageObject, toolAttribute)) {
            for (int i = 0; i < MAX_ATTEMPTS; i++) {
                Object result = pageObject.executeScript(String.format(
                        "delete(window.Array.prototype.toJSON); " +
                        "return JSON.stringify(echarts.getInstanceByDom(document.querySelector(\"div[tool='%s']\")).getOption());",
                        toolAttribute));
                if (result != null) {
                    return result.toString();
                }
                pageObject.elasticSleep(1000);
            }
        }
        throw new java.util.NoSuchElementException("Found no trend chart with ID '" + toolAttribute + "'");
    }

    /**
     * Returns if chart is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param elementId
     *         of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByElementId(final PageObject pageObject, final String elementId) {
        try {
            WebElement chart = pageObject.find(By.id(elementId));
            return chart != null && chart.isDisplayed();
        } catch (NoSuchElementException exception) {
            return false;
        }
    }

    /**
     * Returns if a chart with given tool attribute in div tag is displayed.
     *
     * @param pageObject
     *         which contains chart
     * @param toolAttribute
     *         of div tag of chart
     *
     * @return if chart is displayed
     */
    public static boolean isChartDisplayedByDivToolAttribute(final PageObject pageObject, final String toolAttribute) {
        try {
            WebElement chart = pageObject.find(By.cssSelector("div[tool='" + toolAttribute + "']"));
            return chart != null && chart.isDisplayed();
        } catch (NoSuchElementException exception) {
            return false;
        }
    }
}
```
