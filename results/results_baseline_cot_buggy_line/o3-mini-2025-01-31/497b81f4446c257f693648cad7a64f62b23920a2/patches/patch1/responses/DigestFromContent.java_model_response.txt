<code_analysis>
1. The error messages indicate that the packages for BytesOf and HexOf from cactoos (org.cactoos.io and org.cactoos.text) are no longer available. The errors occur in the import statements and in the lambda where these classes are used to convert the SHA-256 digest bytes into a hexadecimal string.
2. In the client code, the problematic lines are the imports:
   - import org.cactoos.io.BytesOf;
   - import org.cactoos.text.HexOf;
   
   and the lambda expression:
   - () -> new Digest.Sha256(new HexOf(new BytesOf(sha.digest())).asString())
   
   Since the updated dependency version removed these classes, this code no longer compiles.
3. To fix the issue, we can remove the dependency on cactoos by implementing our own helper method to convert the byte array returned from sha.digest() into its hexadecimal string representation.
4. The proposed patch:
   - Remove the import lines for org.cactoos.io.BytesOf and org.cactoos.text.HexOf.
   - Replace new HexOf(new BytesOf(sha.digest())).asString() with a call to a new helper method (e.g., bytesToHex) that performs the conversion.
   - Ensure the overall functionality remains the same and the function signature is unchanged.
</code_analysis>

```java
/*
 * The MIT License (MIT) Copyright (c) 2020-2021 artipie.com
 * https://github.com/artipie/docker-adapter/LICENSE.txt
 */
package com.artipie.docker.misc;

import com.artipie.asto.Content;
import com.artipie.docker.Digest;
import hu.akarnokd.rxjava2.interop.SingleInterop;
import io.reactivex.Completable;
import io.reactivex.Flowable;
import io.reactivex.Single;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.CompletionStage;

/**
 * Digest from content.
 * @since 0.2
 */
public final class DigestFromContent {

    /**
     * Content.
     */
    private final Content content;

    /**
     * Ctor.
     * @param content Content publisher
     */
    public DigestFromContent(final Content content) {
        this.content = content;
    }

    /**
     * Calculates digest from content.
     * @return CompletionStage from digest
     */
    public CompletionStage<Digest> digest() {
        final MessageDigest sha;
        try {
            sha = MessageDigest.getInstance("SHA-256");
        } catch (final NoSuchAlgorithmException err) {
            throw new IllegalStateException("This runtime doesn't have SHA-256 algorithm", err);
        }
        return Flowable.fromPublisher(this.content)
            .flatMapCompletable(
                buf -> Completable.fromAction(
                    () -> {
                        buf.mark();
                        sha.update(buf);
                        buf.reset();
                    }
                )
            )
            .<Digest>andThen(
                Single.fromCallable(
                    () -> new Digest.Sha256(bytesToHex(sha.digest()))
                )
            )
            .to(SingleInterop.get()).toCompletableFuture();
    }

    /**
     * Converts a byte array into its hexadecimal string representation.
     * @param bytes the byte array to convert
     * @return the corresponding hex string
     */
    private static String bytesToHex(final byte[] bytes) {
        StringBuilder hexString = new StringBuilder(2 * bytes.length);
        for (final byte b : bytes) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }
}
```
