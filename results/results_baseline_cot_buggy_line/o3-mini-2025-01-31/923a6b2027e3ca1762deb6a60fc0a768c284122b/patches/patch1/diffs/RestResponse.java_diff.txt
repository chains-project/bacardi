1,29d0
< /*
<  * Copyright (c) 2011-2017, jcabi.com
<  * All rights reserved.
<  *
<  * Redistribution and use in source and binary forms, with or without
<  * modification, are permitted provided that the following conditions
<  * are met: 1) Redistributions of source code must retain the above
<  * copyright notice, this list of conditions and the following
<  * disclaimer. 2) Redistributions in binary form must reproduce the above
<  * copyright notice, this list of conditions and the following
<  * disclaimer in the documentation and/or other materials provided
<  * with the distribution. 3) Neither the name of the jcabi.com nor
<  * the names of its contributors may be used to endorse or promote
<  * products derived from this software without specific prior written
<  * permission.
<  *
<  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
<  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
<  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
<  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
<  * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
<  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
<  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
<  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
<  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
<  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
<  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
<  * OF THE POSSIBILITY OF SUCH DAMAGE.
<  */
45a17
> import org.hamcrest.Description;
48c20,22
< import org.hamcrest.Matchers;
---
> import org.hamcrest.TypeSafeMatcher;
> import static org.hamcrest.core.IsCollectionContaining.hasItem;
> import static org.hamcrest.CoreMatchers.notNullValue;
210c184
<         return this.assertHeader(name, Matchers.hasItems(value));
---
>         return this.assertHeader(name, hasItem(value));
246c220
<             Matchers.not(Matchers.emptyIterableOf(String.class))
---
>             nonEmptyIterable()
284c258
<             Matchers.notNullValue()
---
>             notNullValue()
305a280,298
>      * A matcher that checks if an Iterable is not empty.
>      *
>      * @return Matcher for a non-empty Iterable of Strings.
>      */
>     private static Matcher<Iterable<String>> nonEmptyIterable() {
>         return new TypeSafeMatcher<Iterable<String>>() {
>             @Override
>             public void describeTo(final Description description) {
>                 description.appendText("a non-empty iterable");
>             }
> 
>             @Override
>             protected boolean matchesSafely(final Iterable<String> items) {
>                 return items.iterator().hasNext();
>             }
>         };
>     }
> 
>     /**
