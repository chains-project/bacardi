32a33,34
> import java.util.function.Function;
> import org.hamcrest.Description;
34c36
< import org.hamcrest.Matchers;
---
> import org.hamcrest.TypeSafeMatcher;
68c70
<      * @return Matcher for checking the body of MkQuery
---
>      * @return Matcher for checking the header of MkQuery
80c82
<      * @param path The path to check.
---
>      * @param path The matcher that checks the path.
85c87
<             Matchers.<URI>hasProperty("rawPath", path)
---
>             new UriPropertyMatcher("rawPath", URI::getRawPath, path)
92c94
<      * @param query The query to check.
---
>      * @param query The matcher to check the query.
97c99
<             Matchers.<URI>hasProperty("rawQuery", query)
---
>             new UriPropertyMatcher("rawQuery", URI::getRawQuery, query)
100a103,150
>     /**
>      * A custom matcher that checks a specific String property of a URI.
>      */
>     private static final class UriPropertyMatcher extends TypeSafeMatcher<URI> {
>         /**
>          * Name of the property, used only for description.
>          */
>         private final String propertyName;
> 
>         /**
>          * Function to extract the property value from the URI.
>          */
>         private final Function<URI, String> extractor;
> 
>         /**
>          * Matcher to check the extracted property.
>          */
>         private final Matcher<String> matcher;
> 
>         /**
>          * Public ctor.
>          *
>          * @param propertyName Name of the property (e.g. "rawPath" or "rawQuery")
>          * @param extractor Function to extract the property from a URI
>          * @param matcher Matcher for the extracted property value
>          */
>         UriPropertyMatcher(final String propertyName,
>                            final Function<URI, String> extractor,
>                            final Matcher<String> matcher) {
>             this.propertyName = propertyName;
>             this.extractor = extractor;
>             this.matcher = matcher;
>         }
> 
>         @Override
>         protected boolean matchesSafely(final URI uri) {
>             return matcher.matches(extractor.apply(uri));
>         }
> 
>         @Override
>         public void describeTo(final Description description) {
>             description.appendText("URI with ")
>                        .appendValue(propertyName)
>                        .appendText(" matching: ");
>             matcher.describeTo(description);
>         }
>     }
> 
