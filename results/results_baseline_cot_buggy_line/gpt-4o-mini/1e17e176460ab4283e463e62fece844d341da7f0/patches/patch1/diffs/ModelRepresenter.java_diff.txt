1,7d0
< /**
<  * Copyright (c) 2012 to original author or authors
<  * All rights reserved. This program and the accompanying materials
<  * are made available under the terms of the Eclipse Public License v1.0
<  * which accompanies this distribution, and is available at
<  * http://www.eclipse.org/legal/epl-v10.html
<  */
29,35d21
< /**
<  * YAML model representer.
<  *
<  * @author jvanzyl
<  * @author bentmann
<  * @since 0.7
<  */
37a24
>     super(); // Explicitly call the super constructor
47,73c34,47
<   protected NodeTuple representJavaBeanProperty(Object javaBean, Property property,
<                                                 Object propertyValue, Tag customTag) {
<     if (property != null && property.getName().equals("pomFile")) {
<       // "pomFile" is not a part of POM http://maven.apache.org/xsd/maven-4.0.0.xsd
<       return null;
<     }
< 
<     if (propertyValue == null) return null;
<     if (propertyValue instanceof Map) {
<       Map map = (Map) propertyValue;
<       if (map.isEmpty()) return null;
<     }
<     if (propertyValue instanceof List) {
<       List map = (List) propertyValue;
<       if (map.isEmpty()) return null;
<     }
<     if (javaBean instanceof Dependency) {
<       //skip optional if it is false
<       if (skipBoolean(property, "optional", propertyValue, false)) return null;
<       //skip type if it is jar
<       if (skipString(property, "type", propertyValue, "jar")) return null;
<     }
<     if (javaBean instanceof Plugin) {
<       //skip extensions if it is false
<       if (skipBoolean(property, "extensions", propertyValue, false)) return null;
<       //skip inherited if it is true
<       if (skipBoolean(property, "inherited", propertyValue, true)) return null;
---
>   protected Set<Property> getProperties(Class<? extends Object> type)
>           throws IntrospectionException {
>     if (type.isAssignableFrom(Model.class)) {
>       return sortTypeWithOrder(type, ORDER_MODEL);
>     } else if (type.isAssignableFrom(Developer.class)) {
>       return sortTypeWithOrder(type, ORDER_DEVELOPER);
>     } else if (type.isAssignableFrom(Contributor.class)) {
>       return sortTypeWithOrder(type, ORDER_CONTRIBUTOR);
>     } else if (type.isAssignableFrom(Dependency.class)) {
>       return sortTypeWithOrder(type, ORDER_DEPENDENCY);
>     } else if (type.isAssignableFrom(Plugin.class)) {
>       return sortTypeWithOrder(type, ORDER_PLUGIN);
>     } else {
>       return super.getProperties(type);
75d48
<     return super.representJavaBeanProperty(javaBean, property, propertyValue, customTag);
94d66
< 
168,169d139
<   // Model elements order {
<   //TODO move to polyglot-common, or to org.apache.maven:maven-model
198,199d167
<           //"repositories",
<           //"pluginRepositories",
212,233d179
<   //}
< 
<   /*
<    * Change the default order. Important data goes first.
<    */
<   @Override
<   protected Set<Property> getProperties(Class<? extends Object> type)
<           throws IntrospectionException {
<     if (type.isAssignableFrom(Model.class)) {
<       return sortTypeWithOrder(type, ORDER_MODEL);
<     } else if (type.isAssignableFrom(Developer.class)) {
<       return sortTypeWithOrder(type, ORDER_DEVELOPER);
<     } else if (type.isAssignableFrom(Contributor.class)) {
<       return sortTypeWithOrder(type, ORDER_CONTRIBUTOR);
<     }  else if (type.isAssignableFrom(Dependency.class)) {
<       return sortTypeWithOrder(type, ORDER_DEPENDENCY);
<     }  else if (type.isAssignableFrom(Plugin.class)) {
<       return sortTypeWithOrder(type, ORDER_PLUGIN);
<     } else {
<       return super.getProperties(type);
<     }
<   }
251d196
<       // important go first
258d202
<       // all the rest
