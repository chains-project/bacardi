 You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates.
Your task is to analyze the provided code and error message, then propose a patch that can be applied to the client code to resolve the issue.

 Here is the client code that is failing:
```java
package micycle.pgs;

import static org.junit.jupiter.api.Assertions.*;
import static micycle.pgs.commons.FastPolygonizer.polygonize;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Random;

import org.junit.Ignore;
import org.junit.jupiter.api.Test;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.noding.NodedSegmentString;
import org.locationtech.jts.noding.SegmentString;
import org.locationtech.jts.operation.polygonize.Polygonizer;

import it.unimi.dsi.util.XoRoShiRo128PlusRandom;
import micycle.pgs.commons.PEdge;
import processing.core.PShape;

class FastPolygonizerTests {

	@Test
	void testSimpleTriangle() {
		PEdge a, b, c, d, e;
		a = new PEdge(0, 0, 10, 0);
		b = new PEdge(10, 0, 5, 5);
		c = new PEdge(5, 5, 0, 0);
		d = new PEdge(10, 0, -5, -5);
		e = new PEdge(-5, -5, 0, 0);
		PShape out = polygonize(Arrays.asList(a, b, c, d, e));
		assertEquals(2, out.getChildCount());
	}

	@Test
	void testSimpleDangling() {
		PEdge a, b, c, d;
		a = new PEdge(0, 0, 10, 0);
		b = new PEdge(10, 0, 5, 5);
		c = new PEdge(5, 5, 0, 0);
		d = new PEdge(10, 0, -5, -5);
		List<PEdge> edges = new ArrayList<>();
		edges.addAll(Arrays.asList(a, b, c, d));
		for (int i = 11; i < 25; i++) { // add many dangling edges
			edges.add(new PEdge(i * 2, i * 2, i * 2 + 1, i * 2 + 1));
		}

		PShape out = polygonize(edges);
		assertEquals(1, out.getChildCount());
	}

	@Test
	void testComplexHalfDangling() {
		PEdge r, l, u, d;
		r = new PEdge(0, 0, 10, 0);
		l = new PEdge(0, 0, -10, 0);
		u = new PEdge(0, 0, 0, 10);
		d = new PEdge(0, 0, -10, 0);
		List<PEdge> edges = new ArrayList<>();
		edges.addAll(Arrays.asList(l, r, u, d));

		PShape out = polygonize(edges);
		assertEquals(0, out.getChildCount());

		PEdge join1 = new PEdge(0, 10, 10, 10);
		PEdge join2 = new PEdge(10, 0, 10, 10);
		edges.add(join1);
		edges.add(join2);

		out = polygonize(edges);
		assertEquals(1, out.getChildCount());

		PEdge join3 = new PEdge(0, 10, -10, 10);
		PEdge join4 = new PEdge(-10, 0, -10, 10);
		edges.add(join3);
		edges.add(join4);

		out = polygonize(edges);
		assertEquals(2, out.getChildCount());
	}

	@Test
	void testSimpleHalfDangling() {
		PEdge a, b, c, d, e;
		a = new PEdge(0, 0, 10, 0);
		b = new PEdge(10, 0, 5, 5);
		c = new PEdge(5, 5, 0, 0);
		d = new PEdge(10, 0, -5, -5);
		e = new PEdge(-5, -5, 1, 1); // half dangling

		PShape out = polygonize(Arrays.asList(a, b, c, d, e));
		assertEquals(1, out.getChildCount());
	}

	@Test
	@Ignore
	void testRobustnessRandomly() {
		Random r = new XoRoShiRo128PlusRandom(0);
		for (int k = 0; k < 100; k++) {
			List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
			for (int i = 0; i < 111 + k; i++) {
				segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
						new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
			}
			Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
			Collection<PEdge> nodedEdges = new ArrayList<>();
			nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
			Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);

			final Polygonizer polygonizerJTS = new Polygonizer();
			polygonizerJTS.setCheckRingsValid(false);
			nodedEdgesSet.forEach(e -> {
				final LineString l = PGS.GEOM_FACTORY
						.createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
				polygonizerJTS.add(l);
			});

			long t1 = System.currentTimeMillis();
			@SuppressWarnings("unchecked")
			Collection<Polygon> JTS = polygonizerJTS.getPolygons();
			long t2 = System.currentTimeMillis();
			long timeJTS = t2 - t1;

			t1 = System.currentTimeMillis();
			PShape FP = polygonize(nodedEdgesSet);
			t2 = System.currentTimeMillis();
			long timeFP = t2 - t1;
//			System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
			assertEquals(JTS.size(), FP.getChildCount());
		}
	}

}

```

 the error is triggered in the following specific lines in the previous code:

```java
@Ignore
```
```java
import org.junit.Ignore;
```


 And here is the error message:
[ERROR] /PGS/src/test/java/micycle/pgs/FastPolygonizerTests.java:[101,10] cannot find symbol
  symbol:   class Ignore
  location: class micycle.pgs.FastPolygonizerTests

[ERROR] /PGS/src/test/java/micycle/pgs/FastPolygonizerTests.java:[13,17] cannot find symbol
  symbol:   class Ignore
  location: package org.junit



 Before proposing a fix, please analyze the error message and client code. Wrap your analysis inside <code_analysis> tags:

<code_analysis>
1. Examine the error message:
   - Identify the specific issue related to the dependency update.
   - Note the line number or method where the error occurs.
   - Determine which dependency and version is causing the issue.

2. Review the client code:
   - Locate the problematic areas mentioned in the error message.
   - Identify any related code that might be affected by the changes.

3. Consider potential fixes that adhere to the following constraints:
   - Do not change any function signatures.
   - Only remove the @Override annotation if the method no longer overrides a method in the updated dependency version.
   - Ensure correct imports are used, considering the newer dependency version.
   - Avoid removing existing code unless it directly causes a compilation or functionality error.

4. Plan the necessary changes to fix the issue:
   - List the specific modifications required.
   - Consider potential side effects of the proposed changes.
   - Ensure the fix addresses the root cause of the error.
</code_analysis>

Based on your analysis, propose a patch to fix the issue. Your response should be a complete and compilable Java class in a fenced code block. Adhere to these guidelines:

1. Do not change any function signatures.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Avoid removing any existing code unless it directly causes a compilation or functionality error.
6. Ensure the entire class is included and that it will compile correctly. Don't use the comment "// ... (rest of the class remains unchanged)".

Please provide your fixed class in the following format:

```java
// Your complete, fixed Java class here
```

Remember to focus specifically on issues related to the dependency update when proposing your fix.
 