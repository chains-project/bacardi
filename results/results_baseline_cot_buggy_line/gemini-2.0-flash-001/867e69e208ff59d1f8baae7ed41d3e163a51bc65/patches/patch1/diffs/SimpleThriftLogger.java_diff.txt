11c11
<  * distributed under the License is distributed on an "AS IS" BASIS,
---
>  * is distributed on an "AS IS" BASIS,
24,25d23
< import org.apache.thrift.transport.TFramedTransport;
< import org.apache.thrift.transport.TIOStreamTransport;
26a25
> import org.apache.thrift.transport.TIOStreamTransport;
45c44
<   private static final class ByteOffsetTFramedTransport extends TFramedTransport {
---
>   private static final class ByteOffsetTFramedTransport extends TTransport {
47a47
>     private final TTransport transport;
50c50
<       super(transport);
---
>       this.transport = transport;
56c56
<       super.write(buf, off, len);
---
>       transport.write(buf, off, len);
62c62
<       super.flush();
---
>       transport.flush();
63a64,66
>       // This is an approximation, as the actual frame size might be different
>       // depending on the underlying transport. However, it serves the purpose
>       // of tracking the byte offset for log rotation.
69a73,97
> 
>     @Override
>     public boolean isOpen() {
>       return transport.isOpen();
>     }
> 
>     @Override
>     public boolean peek() {
>       return transport.peek();
>     }
> 
>     @Override
>     public void open() throws TTransportException {
>       transport.open();
>     }
> 
>     @Override
>     public void close() {
>       transport.close();
>     }
> 
>     @Override
>     public int read(byte[] buf, int off, int len) throws TTransportException {
>       return transport.read(buf, off, len);
>     }
