 You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates.
Your task is to analyze the provided code and error message, then propose a patch that can be applied to the client code to resolve the issue.

 Here is the client code that is failing:
```java
package ml.peya.plugins.Utils;

import com.mojang.authlib.GameProfile;
import com.mojang.authlib.properties.Property;
import net.minecraft.server.v1_12_R1.EntityPlayer;
import net.minecraft.server.v1_12_R1.PlayerInteractManager;
import net.minecraft.server.v1_12_R1.WorldServer;
import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.OfflinePlayer;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.command.CommandSender;
import org.bukkit.craftbukkit.v1_12_R1.CraftServer;
import org.bukkit.craftbukkit.v1_12_R1.CraftWorld;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.util.BlockIterator;

import javax.annotation.Nullable;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Random;
import java.util.UUID;
import java.util.stream.Collectors;

import static ml.peya.plugins.Utils.MessageEngine.get;
import static ml.peya.plugins.Variables.skin;

/**
 * プレイヤーに関してまとめたやつ！
 */
public class PlayerUtils
{
    /**
     * 誰が見てるのかわかるやつ。
     *
     * @param player 見られてるプレイヤー。
     * @return 見てるプレイヤー。
     */
    public static Player getLookingEntity(Player player)
    {
        for (Location location : player.getLineOfSight(null, 4).parallelStream().map(Block::getLocation)
            .collect(Collectors.toCollection(ArrayList::new)))
            for (Entity entity : player.getNearbyEntities(3.5, 3.5, 3.5))
                if (isLooking((Player) entity, location) && entity.getType() == EntityType.PLAYER)
                    return (Player) entity;

        return null;
    }

    /**
     * 今見てるかわかるやつ。
     *
     * @param player   見られてるプレイヤー。
     * @param location あと場所。
     * @return 見られてたらtrue。
     */
    public static boolean isLooking(Player player, Location location)
    {
        BlockIterator it = new BlockIterator(player, 4);

        while (it.hasNext())
        {
            final Block block = it.next();
            if (block.getX() == location.getBlockX() &&
                block.getY() == location.getBlockY() &&
                block.getZ() == location.getBlockZ())
                return true;
        }
        return false;
    }

    /**
     * めっちゃクリティカルされたよぉふえええええぇぇぇっていうの確認するやつ
     *
     * @param player クリティカルゥ！プレイヤー。
     * @return クリティカル警察が反応したらtrueを返してくれます。
     */
    public static boolean hasCritical(Player player)
    {
        return player.getFallDistance() > 0.0F &&
            !player.getLocation().getBlock().isLiquid() &&
            !player.isOnGround() &&
            !player.hasPotionEffect(PotionEffectType.BLINDNESS) &&
            player.getVehicle() == null;
    }

    /**
     * ワールド内に新しいプレイヤーを捏造して、{@code EntityPlayer}として返します。
     *
     * @param world ワールドのハンドルを取得するための引数。
     * @return 創造されたプレイヤー。
     */
    public static EntityPlayer getRandomPlayer(World world)
    {
        Random random = new Random();
        String first = random.nextBoolean()
            ? RandomStringUtils.randomAlphanumeric(new Random().nextInt(13) + 1)
            : RandomWordUtils.getRandomWord();
        String last = random.nextBoolean()
            ? RandomStringUtils.randomAlphanumeric(new Random().nextInt(13) + 1)
            : RandomWordUtils.getRandomWord();

        if (random.nextBoolean())
        {
            first = develop.p2p.lib.LeetConverter.convert(first);
            last = develop.p2p.lib.LeetConverter.convert(last);
        }

        String name = first + (random.nextBoolean() ? "_": "") + last + (random.nextBoolean() ? "19" + random.nextInt(120): "");
        if (name.length() > 16)
            name = random.nextBoolean() ? first: last;

        if (name.length() > 16)
            name = RandomStringUtils.randomAlphanumeric(random.nextInt(16));

        WorldServer worldServer = ((CraftWorld) world).getHandle();

        Pair<String, String> skin = getRandomSkin();

        GameProfile profile = new GameProfile(UUID.randomUUID(), name);

        profile.getProperties().put("textures", new Property("textures", skin.getLeft(), skin.getRight()));

        return new EntityPlayer(
            ((CraftServer) Bukkit.getServer()).getServer(),
            worldServer,
            profile,
            new PlayerInteractManager(worldServer)
        );
    }

    /**
     * ランダムスキンをパパラッチします。
     *
     * @return すきん
     */
    public static Pair<String, String> getRandomSkin()
    {
        try (Connection connection = skin.getConnection();
             Statement statement = connection.createStatement())
        {
            ResultSet result = statement.executeQuery("SELECT Texture, Signature FROM Skin ORDER BY RANDOM() LIMIT 1");
            return !result.next()
                ? Pair.of("", "")
                : Pair.of(result.getString("Texture"), result.getString("Signature"));
        }
        catch (Exception e)
        {
            e.printStackTrace();
            Utils.errorNotification(Utils.getStackTrace(e));
            return Pair.of("", "");
        }
    }

    /**
     * プレイヤーを取得する。たぶん。
     *
     * @param sender イベントセンダー。
     * @param name   なまえ
     * @return Playerの取得に失敗した場合null。
     */
    @Nullable
    public static Player getPlayer(CommandSender sender, String name)
    {
        Player player = Bukkit.getPlayer(name);

        if (player == null)
        {
            sender.sendMessage(get("error.playerNotFound"));

            return null;
        }
        return player;
    }

    /**
     * プレイヤーを取得します(オフラインでも可)
     *
     * @return 取得したプレイヤー
     */
    public static Player getPlayerAllowOffline(String playerName)
    {
        Player player = Bukkit.getPlayer(playerName);
        if (player == null)
        {
            for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers())
            {
                if (offlinePlayer.getName().toLowerCase().equals(playerName.toLowerCase()))
                    player = offlinePlayer.getPlayer();
            }
        }

        return player;
    }

    /**
     * オフラインプレイヤーを取得します
     *
     * @return 取得したプレイヤー
     */
    public static OfflinePlayer getOfflinePlayer(String playerName)
    {
        for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers())
        {
            if (offlinePlayer.getName().toLowerCase().equals(playerName.toLowerCase()))
                return offlinePlayer;
        }
        return null;
    }
}

```

 the error is triggered in the following specific lines in the previous code:

```java
last = develop.p2p.lib.LeetConverter.convert(last);
```
```java
first = develop.p2p.lib.LeetConverter.convert(first);
```


 And here is the error message:
[ERROR] /PeyangSuperbAntiCheat/src/main/java/ml/peya/plugins/Utils/PlayerUtils.java:[114,35] package develop.p2p.lib does not exist

[ERROR] /PeyangSuperbAntiCheat/src/main/java/ml/peya/plugins/Utils/PlayerUtils.java:[113,36] package develop.p2p.lib does not exist



 Before proposing a fix, please analyze the error message and client code. Wrap your analysis inside <code_analysis> tags:

<code_analysis>
1. Examine the error message:
   - Identify the specific issue related to the dependency update.
   - Note the line number or method where the error occurs.
   - Determine which dependency and version is causing the issue.

2. Review the client code:
   - Locate the problematic areas mentioned in the error message.
   - Identify any related code that might be affected by the changes.

3. Consider potential fixes that adhere to the following constraints:
   - Do not change any function signatures.
   - Only remove the @Override annotation if the method no longer overrides a method in the updated dependency version.
   - Ensure correct imports are used, considering the newer dependency version.
   - Avoid removing existing code unless it directly causes a compilation or functionality error.

4. Plan the necessary changes to fix the issue:
   - List the specific modifications required.
   - Consider potential side effects of the proposed changes.
   - Ensure the fix addresses the root cause of the error.
</code_analysis>

Based on your analysis, propose a patch to fix the issue. Your response should be a complete and compilable Java class in a fenced code block. Adhere to these guidelines:

1. Do not change any function signatures.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Avoid removing any existing code unless it directly causes a compilation or functionality error.
6. Ensure the entire class is included and that it will compile correctly. Don't use the comment "// ... (rest of the class remains unchanged)".

Please provide your fixed class in the following format:

```java
// Your complete, fixed Java class here
```

Remember to focus specifically on issues related to the dependency update when proposing your fix.
 