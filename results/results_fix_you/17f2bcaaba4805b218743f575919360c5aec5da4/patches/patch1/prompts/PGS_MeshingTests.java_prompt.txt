Due to an update of Library org.tinspin from version 1.7.1 to version 1.8.0, the code in file PGS_MeshingTests.java below is causing errors.

Here is the error message:
[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[4,24] cannot find symbol
  symbol:   class Assert
  location: package org.junit

[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[24,17] cannot find symbol
  symbol:   method assertEquals(double,double,double)
  location: class micycle.pgs.PGS_MeshingTests

[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[22,17] cannot find symbol
  symbol:   method assertTrue(boolean)
  location: class micycle.pgs.PGS_MeshingTests

[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[23,17] cannot find symbol
  symbol:   method assertTrue(boolean)
  location: class micycle.pgs.PGS_MeshingTests

[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[3,24] cannot find symbol
  symbol:   class Assert
  location: package org.junit



Update the provided code to fix this error.

Focus only on updates that do not change the code's functionality and are related to the version update of the library.

You must reply in the following exact numbered format.

1. `The full updated code in a fenced code block` do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
2. Explanation of the changes you made.

Provided code:

```
package micycle.pgs;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.jupiter.api.Test;

import processing.core.PShape;

public class PGS_MeshingTests {

	@Test
	void testAreaMerge() {
		PShape mesh = PGS_Triangulation.delaunayTriangulation(PGS_PointSet.random(0, 0, 1000, 1000, 1111, 0));
		List<PShape> faces = PGS_Conversion.getChildren(mesh);
		faces.sort((a, b) -> Double.compare(PGS_ShapePredicates.area(a), PGS_ShapePredicates.area(b)));
		double areaThreshold = PGS_ShapePredicates.area(faces.get(faces.size() / 2));

		PShape mergedMesh = PGS_Meshing.areaMerge(mesh, areaThreshold);
		assertTrue(PGS_Conversion.getChildren(mergedMesh).stream().allMatch(f -> PGS_ShapePredicates.area(f) >= areaThreshold));
		assertTrue(faces.size() >= mergedMesh.getChildCount());
		assertEquals(PGS_ShapePredicates.area(mesh), PGS_ShapePredicates.area(mergedMesh), 1e-6);
	}

}


```

Your Response: