Due to an update of Library com.google.apis from version v2-rev20170525-2.0.0 to version v3-rev20220805-2.0.0, the code in file Language.java below is causing errors.

Here is the error message:
[ERROR] /google-cloud-java/java-translate/google-cloud-translate/src/main/java/com/google/cloud/translate/Language.java:[36,25] cannot find symbol
  symbol:   class LanguagesResource
  location: class com.google.cloud.translate.Language

[ERROR] /google-cloud-java/java-translate/google-cloud-translate/src/main/java/com/google/cloud/translate/Language.java:[37,20] cannot find symbol
  symbol:   class LanguagesResource
  location: class com.google.cloud.translate.Language

[ERROR] /google-cloud-java/java-translate/google-cloud-translate/src/main/java/com/google/cloud/translate/Language.java:[84,26] cannot find symbol
  symbol:   class LanguagesResource
  location: class com.google.cloud.translate.Language

[ERROR] /google-cloud-java/java-translate/google-cloud-translate/src/main/java/com/google/cloud/translate/Language.java:[39,31] cannot find symbol
  symbol: class LanguagesResource

[ERROR] /google-cloud-java/java-translate/google-cloud-translate/src/main/java/com/google/cloud/translate/Language.java:[19,47] package com.google.api.services.translate.model does not exist



Update the provided code to fix this error.

Focus only on updates that do not change the code's functionality and are related to the version update of the library.

You must reply in the following exact numbered format.

1. `The full updated code in a fenced code block` do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
2. Explanation of the changes you made.

Provided code:

```
/*
 * Copyright 2016 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.translate;

import com.google.api.services.translate.model.LanguagesResource;
import com.google.common.base.Function;
import com.google.common.base.MoreObjects;
import java.io.Serializable;
import java.util.Objects;

/**
 * Information about a language supported by Google Translation. Objects of this class contain the
 * language's code and the language name.
 *
 * @see <a href="https://cloud.google.com/translate/v2/discovering-supported-languages-with-rest">
 *     Discovering Supported Languages</a>
 * @see <a href="https://cloud.google.com/translate/docs/languages">Supported Languages</a>
 */
public class Language implements Serializable {

  private static final long serialVersionUID = 5205240279371907020L;
  static final Function<LanguagesResource, Language> FROM_PB_FUNCTION =
      new Function<LanguagesResource, Language>() {
        @Override
        public Language apply(LanguagesResource languagePb) {
          return Language.fromPb(languagePb);
        }
      };

  private final String code;
  private final String name;

  private Language(String code, String name) {
    this.code = code;
    this.name = name;
  }

  /** Returns the code of the language. */
  public String getCode() {
    return code;
  }

  /** Returns the name of the language. */
  public String getName() {
    return name;
  }

  @Override
  public String toString() {
    return MoreObjects.toStringHelper(this).add("code", code).add("name", name).toString();
  }

  @Override
  public final int hashCode() {
    return Objects.hash(code, name);
  }

  @Override
  public final boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null || !obj.getClass().equals(Language.class)) {
      return false;
    }
    Language other = (Language) obj;
    return Objects.equals(code, other.code) && Objects.equals(name, other.name);
  }

  static Language fromPb(LanguagesResource languagePb) {
    return new Language(languagePb.getLanguage(), languagePb.getName());
  }
}


```

Your Response: