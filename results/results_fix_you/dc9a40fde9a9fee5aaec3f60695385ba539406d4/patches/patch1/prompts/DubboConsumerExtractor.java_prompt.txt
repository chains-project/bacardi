Due to an update of Library org.apache.dubbo from version 2.7.3 to version 2.7.21, the code in file DubboConsumerExtractor.java below is causing errors.

Here is the error message:
[ERROR] /arex-agent-java/arex-instrumentation/dubbo/arex-dubbo-apache-v2/src/main/java/io/arex/inst/dubbo/apache/v2/DubboConsumerExtractor.java:[43,47] incompatible types: org.apache.dubbo.rpc.AsyncRpcResult cannot be converted to java.util.concurrent.CompletableFuture<?>

[ERROR] /arex-agent-java/arex-instrumentation/dubbo/arex-dubbo-apache-v2/src/main/java/io/arex/inst/dubbo/apache/v2/DubboConsumerExtractor.java:[45,60] incompatible types: org.apache.dubbo.rpc.AsyncRpcResult cannot be converted to java.util.concurrent.CompletableFuture<?>



Update the provided code to fix this error.

Focus only on updates that do not change the code's functionality and are related to the version update of the library.

You must reply in the following exact numbered format.

1. `The full updated code in a fenced code block` do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
2. Explanation of the changes you made.

Provided code:

```
package io.arex.inst.dubbo.apache.v2;

import io.arex.agent.bootstrap.model.MockResult;
import io.arex.agent.bootstrap.model.Mocker;
import io.arex.inst.dubbo.common.DubboExtractor;
import io.arex.inst.runtime.util.IgnoreUtils;
import io.arex.inst.runtime.util.MockUtils;
import org.apache.dubbo.rpc.*;
import org.apache.dubbo.rpc.support.RpcUtils;

public class DubboConsumerExtractor extends DubboExtractor {
    private final DubboAdapter adapter;

    public DubboConsumerExtractor(DubboAdapter adapter) {
        this.adapter = adapter;
    }

    public void record(Result result) {
        adapter.execute(result, makeMocker());
    }
    private Mocker makeMocker() {
        Mocker mocker = MockUtils.createDubboConsumer(adapter.getServiceOperation());
        return buildMocker(mocker, adapter, null, null);
    }
    public MockResult replay() {
        MockResult mockResult = null;
        Object result = MockUtils.replayBody(makeMocker());
        boolean ignoreMockResult = IgnoreUtils.ignoreMockResult(adapter.getPath(), adapter.getOperationName());
        if (result != null && !ignoreMockResult) {
            AsyncRpcResult asyncRpcResult;
            Invocation invocation = adapter.getInvocation();
            if (result instanceof Throwable) {
                asyncRpcResult = AsyncRpcResult.newDefaultAsyncResult((Throwable) result, invocation);
            } else {
                asyncRpcResult = AsyncRpcResult.newDefaultAsyncResult(result, invocation);
            }
            mockResult = MockResult.success(ignoreMockResult, asyncRpcResult);
            // need to set invoke mode to FUTURE if return type is CompletableFuture
            if (invocation instanceof RpcInvocation) {
                RpcInvocation rpcInv = (RpcInvocation) invocation;
                rpcInv.setInvokeMode(RpcUtils.getInvokeMode(adapter.getUrl(), invocation));
            }
            RpcContext.getContext().setFuture(asyncRpcResult);
            // save for 2.6.x compatibility, for example, TraceFilter in Zipkin uses com.alibaba.xxx.FutureAdapter
            FutureContext.getContext().setCompatibleFuture(asyncRpcResult);
        }
        return mockResult;
    }
}


```

Your Response: