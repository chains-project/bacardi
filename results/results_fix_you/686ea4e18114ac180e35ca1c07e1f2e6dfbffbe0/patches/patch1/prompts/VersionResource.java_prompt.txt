Due to an update of Library io.dropwizard from version 2.1.5 to version 4.0.0, the code in file VersionResource.java below is causing errors.

Here is the error message:
[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/VersionResource.java:[18,2] cannot find symbol
  symbol: class Path

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/VersionResource.java:[12,19] package javax.ws.rs does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/VersionResource.java:[13,24] package javax.ws.rs.core does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/VersionResource.java:[14,24] package javax.ws.rs.core does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/VersionResource.java:[11,19] package javax.ws.rs does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/VersionResource.java:[10,19] package javax.ws.rs does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/VersionResource.java:[19,2] cannot find symbol
  symbol: class Produces

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/VersionResource.java:[26,12] cannot find symbol
  symbol:   class Response
  location: class com.wire.lithium.server.monitoring.VersionResource



Update the provided code to fix this error.

Focus only on updates that do not change the code's functionality and are related to the version update of the library.

You must reply in the following exact numbered format.

1. `The full updated code in a fenced code block` do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
2. Explanation of the changes you made.

Provided code:

```
package com.wire.lithium.server.monitoring;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.io.RandomAccessFile;

@Api
@Path("/version")
@Produces(MediaType.APPLICATION_JSON)
public class VersionResource {
    @GET
    @ApiOperation(value = "Returns version of the running code.")
    @ApiResponses(value = {
            @ApiResponse(code = 200, response = Version.class, message = "Version")
    })
    public Response get() {
        return Response
                .ok(getVersion())
                .build();
    }

    private Version getVersion() {
        final String path = System.getenv("RELEASE_FILE_PATH");

        String version = null;
        if (path != null) {
            try (final RandomAccessFile file = new RandomAccessFile(path, "r")) {
                version = file.readLine();
            } catch (Exception ignored) {
            }
        }

        if (version == null) {
            version = "development";
        }
        return new Version(version);
    }

    static class Version {
        @NotNull
        @NotEmpty
        public final String version;

        public Version(String version) {
            this.version = version;
        }
    }
}


```

Your Response: