Due to an update of Library io.dropwizard from version 2.1.5 to version 4.0.0, the code in file WireAppenderFactory.java below is causing errors.

Here is the error message:
[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java:[32,13] cannot find symbol
  symbol:   class LevelFilterFactory
  location: class com.wire.lithium.server.monitoring.WireAppenderFactory<T>

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java:[25,77] cannot find symbol
  symbol: class AbstractAppenderFactory

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java:[15,36] package io.dropwizard.logging.layout does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java:[33,13] cannot find symbol
  symbol:   class AsyncAppenderFactory
  location: class com.wire.lithium.server.monitoring.WireAppenderFactory<T>

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java:[13,35] package io.dropwizard.logging.async does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java:[14,36] package io.dropwizard.logging.filter does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java:[31,13] cannot find symbol
  symbol:   class LayoutFactory
  location: class com.wire.lithium.server.monitoring.WireAppenderFactory<T>

[ERROR] /lithium/src/main/java/com/wire/lithium/server/monitoring/WireAppenderFactory.java:[12,29] package io.dropwizard.logging does not exist



Update the provided code to fix this error.

Focus only on updates that do not change the code's functionality and are related to the version update of the library.

You must reply in the following exact numbered format.

1. `The full updated code in a fenced code block` do not remove any code that you don't want to update keep it in the code block. Do not use "// ... (rest of the code remains unchanged)" in your response.
2. Explanation of the changes you made.

Provided code:

```
package com.wire.lithium.server.monitoring;

import ch.qos.logback.access.spi.IAccessEvent;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.Appender;
import ch.qos.logback.core.ConsoleAppender;
import ch.qos.logback.core.Layout;
import ch.qos.logback.core.filter.Filter;
import ch.qos.logback.core.spi.DeferredProcessingAware;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.dropwizard.logging.AbstractAppenderFactory;
import io.dropwizard.logging.async.AsyncAppenderFactory;
import io.dropwizard.logging.filter.LevelFilterFactory;
import io.dropwizard.logging.layout.LayoutFactory;
import io.dropwizard.request.logging.layout.LogbackAccessRequestLayoutFactory;

import java.util.List;
import java.util.stream.Collectors;

/**
 * Production console appender using logging to JSON.
 */
@JsonTypeName("json-console")
public class WireAppenderFactory<T extends DeferredProcessingAware> extends AbstractAppenderFactory<T> {

    @Override
    public Appender<T> build(
            LoggerContext loggerContext,
            String serviceName,
            LayoutFactory<T> layoutFactory,
            LevelFilterFactory<T> levelFilterFactory,
            AsyncAppenderFactory<T> asyncAppenderFactory) {

        final ConsoleAppender<T> appender = new ConsoleAppender<>();
        appender.setContext(loggerContext);
        appender.setTarget("System.out");

        final Filter<T> levelFilter = levelFilterFactory.build(threshold);
        Layout<T> layout;
        // this is quite ugly hack to achieve just a single name for the logger
        if (layoutFactory instanceof LogbackAccessRequestLayoutFactory) {
            layout = prepareAccessEventLayout(levelFilter);
        } else {
            layout = prepareLoggingEventLayout(levelFilter);
        }

        appender.setLayout(layout);
        appender.start();

        return appender;
    }

    // we know that T is either ILoggingEvent or IAccessEvent
    // so this is in a fact checked cast
    // moreover thanks to the generics erasure during runtime, its safe anyway
    @SuppressWarnings("unchecked")
    private Layout<T> prepareAccessEventLayout(Filter<T> levelFilter) {
        List<Filter<IAccessEvent>> ac = getFilterFactories().stream()
                .map(filter -> (Filter<IAccessEvent>) filter.build())
                .collect(Collectors.toList());
        ac.add((Filter<IAccessEvent>) levelFilter);
        return (Layout<T>) new AccessEventJsonLayout(ac);
    }

    @SuppressWarnings("unchecked")
    private Layout<T> prepareLoggingEventLayout(Filter<T> levelFilter) {
        List<Filter<ILoggingEvent>> ac = getFilterFactories().stream()
                .map(filter -> (Filter<ILoggingEvent>) filter.build())
                .collect(Collectors.toList());
        ac.add((Filter<ILoggingEvent>) levelFilter);
        return (Layout<T>) new LoggingEventJsonLayout(ac);
    }

}


```

Your Response: