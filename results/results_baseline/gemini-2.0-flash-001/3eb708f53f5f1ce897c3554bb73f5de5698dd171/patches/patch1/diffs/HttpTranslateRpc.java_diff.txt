25,28c25,28
< import com.google.api.services.translate.Translate;
< import com.google.api.services.translate.model.DetectionsResourceItems;
< import com.google.api.services.translate.model.LanguagesResource;
< import com.google.api.services.translate.model.TranslationsResource;
---
> import com.google.api.services.translate.v3.Translate;
> import com.google.api.services.translate.v3.model.DetectLanguageResponse;
> import com.google.api.services.translate.v3.model.Language;
> import com.google.api.services.translate.v3.model.TranslateTextResponse;
69c69
<   public List<List<DetectionsResourceItems>> detect(List<String> texts) {
---
>   public List<List<DetectLanguageResponse>> detect(List<String> texts) {
71,73c71,76
<       List<List<DetectionsResourceItems>> detections =
<           translate.detections().list(texts).setKey(options.getApiKey()).execute().getDetections();
<       return detections != null ? detections : ImmutableList.<List<DetectionsResourceItems>>of();
---
>       Translate.Detect detect = translate.projects().detect(options.getProjectId() + ":detect");
>       detect.setQ(texts);
>       DetectLanguageResponse response = detect.execute();
>       List<List<DetectLanguageResponse>> detections = ImmutableList.of(ImmutableList.of(response));
> 
>       return detections != null ? detections : ImmutableList.<List<DetectLanguageResponse>>of();
80c83
<   public List<LanguagesResource> listSupportedLanguages(Map<Option, ?> optionMap) {
---
>   public List<Language> listSupportedLanguages(Map<Option, ?> optionMap) {
82c85
<       List<LanguagesResource> languages =
---
>       Translate.Projects.Locations.Languages.List request =
83a87,88
>               .projects()
>               .locations()
85,92c90,95
<               .list()
<               .setKey(options.getApiKey())
<               .setTarget(
<                   firstNonNull(
<                       Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage()))
<               .execute()
<               .getLanguages();
<       return languages != null ? languages : ImmutableList.<LanguagesResource>of();
---
>               .list(String.format("projects/%s/locations/%s", options.getProjectId(), "global"));
>       String targetLanguage =
>           firstNonNull(Option.TARGET_LANGUAGE.getString(optionMap), options.getTargetLanguage());
>       request.setTarget(targetLanguage);
>       List<Language> languages = request.execute().getLanguages();
>       return languages != null ? languages : ImmutableList.<Language>of();
99c102
<   public List<TranslationsResource> translate(List<String> texts, Map<Option, ?> optionMap) {
---
>   public List<TranslateTextResponse> translate(List<String> texts, Map<Option, ?> optionMap) {
104,113c107,118
<       List<TranslationsResource> translations =
<           translate
<               .translations()
<               .list(texts, targetLanguage)
<               .setSource(sourceLanguage)
<               .setKey(options.getApiKey())
<               .setModel(Option.MODEL.getString(optionMap))
<               .setFormat(Option.FORMAT.getString(optionMap))
<               .execute()
<               .getTranslations();
---
> 
>       Translate.Projects.TranslateText request =
>           translate.projects().translateText(options.getProjectId() + ":translateText");
>       request.setQ(texts);
>       request.setTargetLanguageCode(targetLanguage);
>       if (sourceLanguage != null) {
>         request.setSourceLanguageCode(sourceLanguage);
>       }
> 
>       TranslateTextResponse response = request.execute();
>       List<TranslateTextResponse> translations = ImmutableList.of(response);
> 
115,116c120,121
<           translations != null ? translations : ImmutableList.<TranslationsResource>of(),
<           new Function<TranslationsResource, TranslationsResource>() {
---
>           translations != null ? translations : ImmutableList.<TranslateTextResponse>of(),
>           new Function<TranslateTextResponse, TranslateTextResponse>() {
118,121c123
<             public TranslationsResource apply(TranslationsResource translationsResource) {
<               if (translationsResource.getDetectedSourceLanguage() == null) {
<                 translationsResource.setDetectedSourceLanguage(sourceLanguage);
<               }
---
>             public TranslateTextResponse apply(TranslateTextResponse translationsResource) {
