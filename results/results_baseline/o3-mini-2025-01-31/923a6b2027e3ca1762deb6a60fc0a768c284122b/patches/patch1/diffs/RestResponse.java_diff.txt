48c48
< import org.hamcrest.Matchers;
---
> import java.util.Arrays;
50,71d49
< /**
<  * REST response.
<  *
<  * <p>This response decorator is able to make basic assertions on
<  * HTTP response and manipulate with it afterwords, for example:
<  *
<  * <pre> String name = new JdkRequest("http://my.example.com")
<  *   .fetch()
<  *   .as(RestResponse.class)
<  *   .assertStatus(200)
<  *   .assertBody(Matchers.containsString("hello, world!"))
<  *   .assertHeader("Content-Type", Matchers.hasItem("text/plain"))
<  *   .jump(URI.create("/users"))
<  *   .fetch();</pre>
<  *
<  * <p>Method {@link #jump(URI)} creates a new instance of class
<  * {@link Request} with all cookies transferred from the current one.
<  *
<  * <p>The class is immutable and thread-safe.
<  *
<  * @since 0.8
<  */
165,166c143,144
<             ), this.binary(),
<             matcher
---
>             ),
>             this.binary(), matcher
175c153
<      * <p>The iterator for the matcher will always be a real object an never
---
>      * <p>The iterator for the matcher will always be a real object and never
332a311,367
>     public static final class Matchers {
>         public static <T> Matcher<Iterable<T>> hasItems(final T... items) {
>             return new CustomMatcher<Iterable<T>>("an iterable containing " + Arrays.toString(items)) {
>                 @Override
>                 public boolean matches(final Object item) {
>                     if (!(item instanceof Iterable)) {
>                         return false;
>                     }
>                     Iterable<?> iterable = (Iterable<?>) item;
>                     for (T expected : items) {
>                         boolean found = false;
>                         for (Object actual : iterable) {
>                             if (expected == null ? actual == null : expected.equals(actual)) {
>                                 found = true;
>                                 break;
>                             }
>                         }
>                         if (!found) {
>                             return false;
>                         }
>                     }
>                     return true;
>                 }
>             };
>         }
> 
>         public static <T> Matcher<Iterable<T>> emptyIterableOf(final Class<T> cls) {
>             return new CustomMatcher<Iterable<T>>("an empty iterable of " + cls.getSimpleName()) {
>                 @Override
>                 public boolean matches(final Object item) {
>                     if (!(item instanceof Iterable)) {
>                         return false;
>                     }
>                     Iterable<?> iterable = (Iterable<?>) item;
>                     return !iterable.iterator().hasNext();
>                 }
>             };
>         }
> 
>         public static <T> Matcher<T> notNullValue() {
>             return new CustomMatcher<T>("not null") {
>                 @Override
>                 public boolean matches(final Object item) {
>                     return item != null;
>                 }
>             };
>         }
> 
>         public static <T> Matcher<T> not(final Matcher<T> matcher) {
>             return new CustomMatcher<T>("not " + matcher.toString()) {
>                 @Override
>                 public boolean matches(final Object item) {
>                     return !matcher.matches(item);
>                 }
>             };
>         }
>     }
