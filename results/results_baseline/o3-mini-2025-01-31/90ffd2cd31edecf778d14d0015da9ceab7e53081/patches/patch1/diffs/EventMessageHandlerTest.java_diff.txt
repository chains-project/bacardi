6c6
< import ch.qos.logback.core.Appender;
---
> import ch.qos.logback.core.AppenderBase;
33c33
< import java.time.Instant;
---
> import java.util.ArrayList;
83,86c83,84
<     @Mock
<     private Appender<ILoggingEvent> mockLogAppender;
<     @Captor
<     ArgumentCaptor<ILoggingEvent> loggingEventArgumentCaptor;
---
>     
>     private TestAppender testAppender;
110a109,110
>         testAppender = new TestAppender();
>         testAppender.start();
113c113
<         logger.addAppender(mockLogAppender);
---
>         logger.addAppender(testAppender);
177,179c177,178
<         verify(mockLogAppender, times(2)).doAppend(loggingEventArgumentCaptor.capture());
< 
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
---
>         List<ILoggingEvent> logStatement = testAppender.getEvents();
>         assertThat(logStatement.size(), is(2));
214,216c213,214
<         verify(mockLogAppender, times(2)).doAppend(loggingEventArgumentCaptor.capture());
< 
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
---
>         List<ILoggingEvent> logStatement = testAppender.getEvents();
>         assertThat(logStatement.size(), is(2));
251,253c249,250
<         verify(mockLogAppender, times(2)).doAppend(loggingEventArgumentCaptor.capture());
< 
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
---
>         List<ILoggingEvent> logStatement = testAppender.getEvents();
>         assertThat(logStatement.size(), is(2));
288,290c285,286
<         verify(mockLogAppender, times(2)).doAppend(loggingEventArgumentCaptor.capture());
< 
<         List<ILoggingEvent> logStatement = loggingEventArgumentCaptor.getAllValues();
---
>         List<ILoggingEvent> logStatement = testAppender.getEvents();
>         assertThat(logStatement.size(), is(2));
348a345,357
> 
>     private static class TestAppender extends AppenderBase<ILoggingEvent> {
>         private final List<ILoggingEvent> events = new ArrayList<>();
> 
>         @Override
>         protected void append(ILoggingEvent eventObject) {
>             events.add(eventObject);
>         }
> 
>         public List<ILoggingEvent> getEvents() {
>             return events;
>         }
>     }
