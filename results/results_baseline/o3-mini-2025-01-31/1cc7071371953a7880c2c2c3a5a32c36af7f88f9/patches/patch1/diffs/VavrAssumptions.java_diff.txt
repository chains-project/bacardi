24,33c24,36
< import org.assertj.core.internal.bytebuddy.ByteBuddy;
< import org.assertj.core.internal.bytebuddy.TypeCache;
< import org.assertj.core.internal.bytebuddy.TypeCache.SimpleKey;
< import org.assertj.core.internal.bytebuddy.dynamic.scaffold.TypeValidation;
< import org.assertj.core.internal.bytebuddy.implementation.Implementation;
< import org.assertj.core.internal.bytebuddy.implementation.MethodDelegation;
< import org.assertj.core.internal.bytebuddy.implementation.auxiliary.AuxiliaryType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.RuntimeType;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.SuperCall;
< import org.assertj.core.internal.bytebuddy.implementation.bind.annotation.This;
---
> import net.bytebuddy.ByteBuddy;
> import net.bytebuddy.dynamic.scaffold.inline.TypeValidation;
> import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
> import net.bytebuddy.implementation.Implementation;
> import net.bytebuddy.implementation.MethodDelegation;
> import net.bytebuddy.implementation.auxiliary.AuxiliaryType;
> import net.bytebuddy.implementation.bind.annotation.RuntimeType;
> import net.bytebuddy.implementation.bind.annotation.SuperCall;
> import net.bytebuddy.implementation.bind.annotation.This;
> import net.bytebuddy.matcher.ElementMatchers;
> import static net.bytebuddy.matcher.ElementMatchers.any;
> import static org.assertj.core.util.Arrays.array;
> import static org.assertj.vavr.api.ClassLoadingStrategyFactory.classLoadingStrategy;
40,43d42
< import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.any;
< import static org.assertj.core.util.Arrays.array;
< import static org.assertj.vavr.api.ClassLoadingStrategyFactory.classLoadingStrategy;
< 
218c217,222
<                 () -> generateAssumptionClass(assertClass));
---
>                 new TypeCache.Factory<Class<? extends ASSERTION>>() {
>                     @Override
>                     public Class<? extends ASSERTION> make() {
>                         return generateAssumptionClass(assertClass);
>                     }
>                 });
259d262
<         // @format:off
268,269d270
<         // @format:on
<         // should not arrive here
272a274,313
>     private static class TypeCache<T> {
> 
>         public static class WithInlineExpunction<T> extends TypeCache<T> {
>             private final java.util.concurrent.ConcurrentHashMap<Object, T> cache = new java.util.concurrent.ConcurrentHashMap<>();
> 
>             public WithInlineExpunction(Sort sort) {
>             }
> 
>             public T findOrInsert(ClassLoader loader, Object key, Factory<T> factory) {
>                 return cache.computeIfAbsent(key, k -> factory.make());
>             }
>         }
> 
>         public enum Sort { SOFT }
> 
>         public interface Factory<T> {
>             T make();
>         }
>     }
> 
>     private static class SimpleKey {
>         private final Object key;
> 
>         public SimpleKey(Object key) {
>             this.key = key;
>         }
> 
>         @Override
>         public boolean equals(Object obj) {
>             if (this == obj) return true;
>             if (obj == null || getClass() != obj.getClass()) return false;
>             SimpleKey that = (SimpleKey) obj;
>             return key.equals(that.key);
>         }
> 
>         @Override
>         public int hashCode() {
>             return key.hashCode();
>         }
>     }
