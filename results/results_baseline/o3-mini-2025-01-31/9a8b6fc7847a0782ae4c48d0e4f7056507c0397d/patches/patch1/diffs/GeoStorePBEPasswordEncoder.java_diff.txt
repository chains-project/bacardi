33,45c33
< import org.jasypt.spring.security.PBEPasswordEncoder;
< /**
<  * Password Encoder using symmetric encryption
<  * 
<  * The salt parameter is not used, this implementation computes a random salt as
<  * default.
<  * 
<  * {@link #isPasswordValid(String, String, Object)}
<  * {@link #encodePassword(String, Object)}
<  * 
<  * @author Lorenzo Natali
<  * 
<  */
---
> 
102,103c90,100
<                         PBEPasswordEncoder encoder = new PBEPasswordEncoder();
<                         encoder.setPbeStringEncryptor(stringEncrypter);
---
>                         PasswordEncoder encoder = new PasswordEncoder() {
>                                 @Override
>                                 public String encodePassword(String rawPass, Object salt) {
>                                         return stringEncrypter.encrypt(rawPass);
>                                 }
> 
>                                 @Override
>                                 public boolean isPasswordValid(String encPass, String rawPass, Object salt) {
>                                         return stringEncrypter.decrypt(removePrefix(encPass)).equals(rawPass);
>                                 }
>                         };
127,128c124
<                         public boolean isPasswordValid(String encPass, char[] rawPass,
<                                         Object salt) {
---
>                         public boolean isPasswordValid(String encPass, char[] rawPass, Object salt) {
145,146c141
<                                         return new String(Base64.getEncoder().encode(byteEncrypter
<                                                         .encrypt(bytes)));
---
>                                         return new String(Base64.getEncoder().encode(byteEncrypter.encrypt(bytes)));
157,158c152
<                                 throw new RuntimeException("Keystore: "
<                                                 + keystoreProvider.getFile() + " does not"
---
>                                 throw new RuntimeException("Keystore: " + keystoreProvider.getFile() + " does not"
161,162c155
<                         return keystoreProvider.getSecretKey(getKeyAliasInKeyStore())
<                                         .getEncoded();
---
>                         return keystoreProvider.getSecretKey(getKeyAliasInKeyStore()).getEncoded();
164,165c157
<                         throw new RuntimeException("Cannot find alias: "
<                                         + getKeyAliasInKeyStore() + " in "
---
>                         throw new RuntimeException("Cannot find alias: " + getKeyAliasInKeyStore() + " in "
185,186c177
<         public char[] decodeToCharArray(String encPass)
<                         throws UnsupportedOperationException {
---
>         public char[] decodeToCharArray(String encPass) throws UnsupportedOperationException {
