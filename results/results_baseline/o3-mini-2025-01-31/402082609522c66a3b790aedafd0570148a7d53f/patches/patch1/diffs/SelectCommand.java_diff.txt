7,8c7,8
< 
< import org.spongepowered.api.command.CommandResult;
---
> import org.spongepowered.api.CommandResult;
> import org.spongepowered.api.command.Command;
10,12c10,11
< import org.spongepowered.api.command.args.CommandContext;
< import org.spongepowered.api.command.spec.CommandExecutor;
< import org.spongepowered.api.command.spec.CommandSpec;
---
> import org.spongepowered.api.command.parameter.CommandContext;
> import org.spongepowered.api.command.parameter.Parameter;
14a14,20
> import net.kyori.adventure.text.Component;
> import static net.kyori.adventure.text.Component.text;
> import java.util.Optional;
> import java.util.List;
> import java.util.Set;
> import java.util.Collection;
> import java.util.Collections;
16,19c22
< import static org.spongepowered.api.command.args.GenericArguments.string;
< import static org.spongepowered.api.text.Text.of;
< 
< public class SelectCommand implements CommandExecutor, ChangeSkinCommand {
---
> public class SelectCommand implements SelectCommand.CommandExecutor, ChangeSkinCommand {
35c38
<         String skinName = args.<String>getOne("skinName").get().toLowerCase().replace("skin-", "");
---
>         String skinName = args.getOne("skinName").get().toLowerCase().replace("skin-", "");
52c55
<                 .arguments(string(of("skinName")))
---
>                 .arguments(Parameter.string(text("skinName")))
55a59,150
> 
>     public interface CommandExecutor {
>         CommandResult execute(CommandSource src, CommandContext args);
>     }
> 
>     public static class CommandSpec {
>         private final Command<CommandSource> command;
> 
>         public CommandSpec(Command<CommandSource> command) {
>             this.command = command;
>         }
> 
>         public Command<CommandSource> getCommand() {
>             return command;
>         }
> 
>         public static Builder builder() {
>             return new Builder();
>         }
> 
>         public static class Builder {
>             private CommandExecutor executor;
>             private Parameter.Value<String> argument;
>             private String permission;
> 
>             public Builder executor(CommandExecutor executor) {
>                 this.executor = executor;
>                 return this;
>             }
> 
>             public Builder arguments(Parameter.Value<String> argument) {
>                 this.argument = argument;
>                 return this;
>             }
> 
>             public Builder permission(String permission) {
>                 this.permission = permission;
>                 return this;
>             }
> 
>             public CommandSpec build() {
>                 Command<CommandSource> cmd = Command.builder()
>                         .permission(permission)
>                         .executor(ctx -> {
>                             CommandSource src = ctx.cause().first(CommandSource.class)
>                                     .orElseThrow(() -> new IllegalStateException("No command source found"));
>                             OldCommandContext adapter = new OldCommandContext(ctx, argument.key());
>                             return executor.execute(src, adapter);
>                         })
>                         .build();
>                 return new CommandSpec(cmd);
>             }
>         }
>     }
> 
>     public static class OldCommandContext implements CommandContext {
>         private final CommandContext context;
>         private final CommandContext.Key<String> key;
> 
>         public OldCommandContext(CommandContext context, CommandContext.Key<String> key) {
>             this.context = context;
>             this.key = key;
>         }
> 
>         @SuppressWarnings("unchecked")
>         public <T> Optional<T> getOne(String name) {
>             if ("skinName".equals(name)) {
>                 return (Optional<T>) context.one(key);
>             }
>             return Optional.empty();
>         }
> 
>         @Override
>         public <T> Optional<T> one(CommandContext.Key<T> key) {
>             return context.one(key);
>         }
> 
>         @Override
>         public <T> List<T> all(CommandContext.Key<T> key) {
>             return context.all(key);
>         }
> 
>         @Override
>         public Set<CommandContext.Key<?>> keys() {
>             return context.keys();
>         }
> 
>         @Override
>         public Collection<?> arguments() {
>             return context.arguments();
>         }
>     }
