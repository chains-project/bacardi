1,15d0
< /**
<  * Copyright 2019 Pinterest, Inc.
<  * 
<  * Licensed under the Apache License, Version 2.0 (the "License");
<  * you may not use this file except in compliance with the License.
<  * You may obtain a copy of the License at
<  * 
<  *    http://www.apache.org/licenses/LICENSE-2.0
<  * 
<  * Unless required by applicable law or agreed to in writing, software
<  * distributed under the License is distributed on an "AS IS" BASIS,
<  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<  * See the License for the specific language governing permissions and
<  * limitations under the License.
<  */
23d7
< import org.apache.thrift.transport.TFramedTransport;
25a10
> import org.apache.thrift.transport.TTransportException;
45d29
< 
53d36
< 
63c46
<   // The framed framedTransport.
---
>   // The framed transport.
80,81c63
<     this.framedTransport = new TFramedTransport(new TIOStreamTransport(this
<         .byteOffsetInputStream), maxMessageSize);
---
>     this.framedTransport = new TFramedTransport(new TIOStreamTransport(this.byteOffsetInputStream), maxMessageSize);
140a123,172
> 
>   // Custom implementation of TFramedTransport to replace the missing dependency class.
>   private static class TFramedTransport extends TTransport {
>     private final TTransport inner;
>     private final int maxMessageSize;
> 
>     public TFramedTransport(TTransport transport, int maxMessageSize) {
>       this.inner = transport;
>       this.maxMessageSize = maxMessageSize;
>     }
> 
>     public int getBytesRemainingInBuffer() {
>       // Since framing is not performed, always return 0.
>       return 0;
>     }
> 
>     public void consumeBuffer(int num) {
>       // No buffered data to consume.
>     }
> 
>     @Override
>     public boolean isOpen() {
>       return inner.isOpen();
>     }
> 
>     @Override
>     public void open() throws TTransportException {
>       inner.open();
>     }
> 
>     @Override
>     public void close() {
>       inner.close();
>     }
> 
>     @Override
>     public int read(byte[] buf, int off, int len) throws TTransportException {
>       return inner.read(buf, off, len);
>     }
> 
>     @Override
>     public void write(byte[] buf, int off, int len) throws TTransportException {
>       inner.write(buf, off, len);
>     }
> 
>     @Override
>     public void flush() throws TTransportException {
>       inner.flush();
>     }
>   }
