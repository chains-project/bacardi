```java
/*
 * Copyright 2014 Feedzai
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.feedzai.commons.sql.abstraction.engine.impl.abs;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import com.feedzai.commons.sql.abstraction.ddl.AlterColumn;
import com.feedzai.commons.sql.abstraction.ddl.DbColumn;
import com.feedzai.commons.sql.abstraction.ddl.DbColumnConstraint;
import com.feedzai.commons.sql.abstraction.ddl.DbColumnType;
import com.feedzai.commons.sql.abstraction.ddl.DbEntity;
import com.feedzai.commons.sql.abstraction.ddl.Rename;
import com.feedzai.commons.sql.abstraction.dml.Expression;
import com.feedzai.commons.sql.abstraction.dml.K;
import com.feedzai.commons.sql.abstraction.dml.Query;
import com.feedzai.commons.sql.abstraction.dml.Truncate;
import com.feedzai.commons.sql.abstraction.dml.Update;
import com.feedzai.commons.sql.abstraction.dml.Values;
import com.feedzai.commons.sql.abstraction.dml.With;
import com.feedzai.commons.sql.abstraction.dml.dialect.Dialect;
import com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder;
import com.feedzai.commons.sql.abstraction.dml.result.ResultColumn;
import com.feedzai.commons.sql.abstraction.dml.result.ResultIterator;
import com.feedzai.commons.sql.abstraction.engine.AbstractDatabaseEngine;
import com.feedzai.commons.sql.abstraction.engine.ConnectionResetException;
import com.feedzai.commons.sql.abstraction.engine.DatabaseEngine;
import com.feedzai.commons.sql.abstraction.engine.DatabaseEngineException;
import com.feedzai.commons.sql.abstraction.engine.DatabaseEngineRuntimeException;
import com.feedzai.commons.sql.abstraction.exceptions.DatabaseEngineUniqueConstraintViolationException;
import com.feedzai.commons.sql.abstraction.engine.DatabaseFactory;
import com.feedzai.commons.sql.abstraction.engine.DatabaseFactoryException;
import com.feedzai.commons.sql.abstraction.engine.MappedEntity;
import com.feedzai.commons.sql.abstraction.engine.NameAlreadyExistsException;
import com.feedzai.commons.sql.abstraction.engine.OperationNotSupportedRuntimeException;
import com.feedzai.commons.sql.abstraction.engine.impl.cockroach.SkipTestCockroachDB;
import com.feedzai.commons.sql.abstraction.engine.testconfig.BlobTest;
import com.feedzai.commons.sql.abstraction.engine.testconfig.DatabaseConfiguration;
import com.feedzai.commons.sql.abstraction.engine.testconfig.DatabaseTestUtil;
import com.feedzai.commons.sql.abstraction.entry.EntityEntry;
import com.google.common.collect.ImmutableSet;
import java.sql.SQLException;
import mockit.Expectations;
import mockit.Invocation;
import mockit.Mock;
import mockit.MockUp;
import mockit.Verifications;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.UUID;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static com.feedzai.commons.sql.abstraction.ddl.DbColumnConstraint.NOT_NULL;
import static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.BLOB;
import static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.BOOLEAN;
import static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.CLOB;
import static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.DOUBLE;
import static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.INT;
import static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.LONG;
import static com.feedzai.commons.sql.abstraction.ddl.DbColumnType.STRING;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.L;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.all;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.avg;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.between;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.caseWhen;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.cast;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.ceiling;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.coalesce;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.column;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.concat;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.count;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.createView;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbColumn;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbEntity;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dbFk;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.delete;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.div;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.dropPK;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.entry;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.eq;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.f;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.floor;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.in;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.k;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.like;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.lit;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.lower;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.max;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.min;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.mod;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.neq;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.notBetween;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.notIn;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.or;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.select;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.stddev;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.stringAgg;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.sum;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.table;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.udf;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.union;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.update;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.upper;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.values;
import static com.feedzai.commons.sql.abstraction.dml.dialect.SqlBuilder.with;
import static com.feedzai.commons.sql.abstraction.engine.EngineTestUtils.buildEntity;
import static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.ENGINE;
import static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.JDBC;
import static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.PASSWORD;
import static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.SCHEMA_POLICY;
import static com.feedzai.commons.sql.abstraction.engine.configuration.PdbProperties.USERNAME;
import static com.feedzai.commons.sql.abstraction.util.StringUtils.quotize;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatCode;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.Assume.assumeFalse;
import static org.junit.Assume.assumeTrue;

/**
 * @author Rui Vilao (rui.vilao@feedzai.com)
 * @since 2.0.0
 */
@RunWith(Parameterized.class)
public class EngineGeneralTest {


    private static final double DELTA = 1e-7;

    protected DatabaseEngine engine;
    protected Properties properties;

    @Parameterized.Parameters
    public static Collection<DatabaseConfiguration> data() throws Exception {
        return DatabaseTestUtil.loadConfigurations();
    }

    @Parameterized.Parameter
    public DatabaseConfiguration config;

    @BeforeClass
    public static void initStatic() {
        ((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.TRACE);
    }

    @Before
    public void init() throws DatabaseFactoryException {
        properties = new Properties() {
            {
                setProperty(JDBC, config.jdbc);
                setProperty(USERNAME, config.username);
                setProperty(PASSWORD, config.password);
                setProperty(ENGINE, config.engine);
                setProperty(SCHEMA_POLICY, "drop-create");
            }
        };

        engine = DatabaseFactory.getConnection(properties);
    }

    @After
    public void cleanup() {
        engine.close();
    }

    @Test
    public void createEntityTest() throws DatabaseEngineException {

        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .pkFields("COL1")
                .build();

        engine.addEntity(entity);
    }

    @Test
    public void createEntityWithTwoColumnsBeingPKTest() throws DatabaseEngineException {

        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .pkFields("COL1", "COL3")
                .build();

        engine.addEntity(entity);
    }

    @Test(expected = DatabaseEngineException.class)
    public void createEntityAlreadyExistsTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .pkFields("COL1", "COL3")
                .build();

        engine.addEntity(entity);

        try {
            engine.addEntity(entity);
        } catch (final DatabaseEngineException e) {
            assertEquals("", "Entity 'TEST' is already defined", e.getMessage());
            throw e;
        }
    }

    @Test
    public void createUniqueIndexTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .pkFields("COL1", "COL3")
                .addIndex(true, "COL4")
                .build();

        engine.addEntity(entity);
    }

    @Test
    public void createIndexWithTwoColumnsTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .pkFields("COL1", "COL3")
                .addIndex("COL4", "COL3")
                .build();

        engine.addEntity(entity);
    }

    @Test
    public void createTwoIndexesTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .pkFields("COL1", "COL3")
                .addIndex("COL4")
                .addIndex("COL3")
                .build();

        engine.addEntity(entity);
    }

    @Test
    public void createEntityWithTheSameNameButLowerCasedTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .pkFields("COL1", "COL3")
                .build();

        engine.addEntity(entity);

        DbEntity entity2 = dbEntity()
                .name("test")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .pkFields("COL1", "COL3")
                .build();

        engine.addEntity(entity2);

    }

    @Test
    public void createEntityWithSequencesTest() throws DatabaseEngineException {

        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT, true)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .pkFields("COL1")
                .build();

        engine.addEntity(entity);
    }

    @Test
    public void createEntityWithIndexesTest() throws DatabaseEngineException {

        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT, true)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .addIndex("COL4")
                .pkFields("COL1")
                .build();

        engine.addEntity(entity);
    }

    @Test
    public void insertWithControlledTransactionTest() throws Exception {
        create5ColumnsEntity();

        EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS").build();

        engine.beginTransaction();

        try {

            engine.persist("TEST", entry);
            engine.commit();
        } finally {
            if (engine.isTransactionActive()) {
                engine.rollback();
            }
        }

        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")));

        assertTrue("COL1 exists", query.get(0).containsKey("COL1"));
        assertEquals("COL1 ok?", 2, (int) query.get(0).get("COL1").toInt());

        assertTrue("COL2 exists", query.get(0).containsKey("COL2"));
        assertFalse("COL2 ok?", query.get(0).get("COL2").toBoolean());

        assertTrue("COL3 exists", query.get(0).containsKey("COL3"));
        assertEquals("COL3 ok?", 2D, query.get(0).get("COL3").toDouble(), 0);

        assertTrue("COL4 exists", query.get(0).containsKey("COL4"));
        assertEquals("COL4 ok?", 3L, (long) query.get(0).get("COL4").toLong());

        assertTrue("COL5 exists", query.get(0).containsKey("COL5"));
        assertEquals("COL5  ok?", "ADEUS", query.get(0).get("COL5").toString());
    }

    @Test
    public void insertWithAutoCommitTest() throws Exception {
        create5ColumnsEntity();

        EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
                .build();

        engine.persist("TEST", entry);

        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")));

        assertTrue("COL1 exists", query.get(0).containsKey("COL1"));
        assertEquals("COL1 ok?", 2, (int) query.get(0).get("COL1").toInt());

        assertTrue("COL2 exists", query.get(0).containsKey("COL2"));
        assertFalse("COL2 ok?", query.get(0).get("COL2").toBoolean());

        assertTrue("COL3 exists", query.get(0).containsKey("COL3"));
        assertEquals("COL3 ok?", 2D, query.get(0).get("COL3").toDouble(), 0);

        assertTrue("COL4 exists", query.get(0).containsKey("COL4"));
        assertEquals("COL4 ok?", 3L, (long) query.get(0).get("COL4").toLong());

        assertTrue("COL5 exists", query.get(0).containsKey("COL5"));
        assertEquals("COL5  ok?", "ADEUS", query.get(0).get("COL5").toString());
    }

    @Test
    public void insertWithControlledTransactionUsingSequenceTest() throws Exception {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT, true)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .build();

        engine.addEntity(entity);

        EntityEntry entry = entry().set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
                .build();

        engine.beginTransaction();

        try {

            engine.persist("TEST", entry);
            engine.commit();
        } finally {
            if (engine.isTransactionActive()) {
                engine.rollback();
            }
        }
        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")));

        assertTrue("COL1 exists", query.get(0).containsKey("COL1"));
        assertEquals("COL1 ok?", 1, (int) query.get(0).get("COL1").toInt());

        assertTrue("COL2 exists", query.get(0).containsKey("COL2"));
        assertFalse("COL2 ok?", query.get(0).get("COL2").toBoolean());

        assertTrue("COL3 exists", query.get(0).containsKey("COL3"));
        assertEquals("COL3 ok?", 2D, query.get(0).get("COL3").toDouble(), 0);

        assertTrue("COL4 exists", query.get(0).containsKey("COL4"));
        assertEquals("COL4 ok?", 3L, (long) query.get(0).get("COL4").toLong());

        assertTrue("COL5 exists", query.get(0).containsKey("COL5"));
        assertEquals("COL5  ok?", "ADEUS", query.get(0).get("COL5").toString());
    }

    @Test
    public void queryWithIteratorWithDataTest() throws Exception {
        create5ColumnsEntity();

        EntityEntry entry = entry().set("COL1", 1).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
                .build();
        engine.persist("TEST", entry);

        ResultIterator it = engine.iterator(select(all()).from(table("TEST")));

        Map<String, ResultColumn> res;
        res = it.next();
        assertNotNull("result is not null", res);
        assertTrue("COL1 exists", res.containsKey("COL1"));
        assertEquals("COL1 ok?", 1, (int) res.get("COL1").toInt());

        assertTrue("COL2 exists", res.containsKey("COL2"));
        assertFalse("COL2 ok?", res.get("COL2").toBoolean());

        assertTrue("COL3 exists", res.containsKey("COL3"));
        assertEquals("COL3 ok?", 2D, res.get("COL3").toDouble(), 0);

        assertTrue("COL4 exists", res.containsKey("COL4"));
        assertEquals("COL4 ok?", 3L, (long) res.get("COL4").toLong());

        assertTrue("COL5 exists", res.containsKey("COL5"));
        assertEquals("COL5  ok?", "ADEUS", res.get("COL5").toString());

        assertNull("no more data to consume?", it.next());

        assertTrue("result set is closed?", it.isClosed());
        assertNull("next on a closed result set must return null", it.next());

        // calling close on a closed result set has no effect.
        it.close();
    }

    @Test
    public void queryWithIteratorWithNoDataTest() throws Exception {
        create5ColumnsEntity();

        ResultIterator it = engine.iterator(select(all()).from(table("TEST")));

        assertNull("result is null", it.next());

        assertNull("no more data to consume?", it.next());

        assertTrue("result set is closed?", it.isClosed());
        assertNull("next on a closed result set must return null", it.next());

        // calling close on a closed result set has no effect.
        it.close();
    }

    /**
     * Tests that an iterator created in a try-with-resources' resource specification header is automatically closed
     * once the block is exited from.
     *
     * @throws Exception If an unexpected error occurs.
     *
     * @since 2.1.12
     */
    @Test
    public void queryWithIteratorInTryWithResources() throws Exception {
        create5ColumnsEntity();

        final EntityEntry entry = entry()
                .set("COL1", 1)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS")
                .build();
        engine.persist("TEST", entry);

        final ResultIterator resultIterator;
        try (final ResultIterator it = engine.iterator(select(all()).from(table("TEST")))) {

            resultIterator = it;

            assertFalse(
                    "Result iterator should not be closed before exiting try-with-resources block",
                    resultIterator.isClosed()
            );
        }

        assertTrue(
                "Result iterator should be closed after exiting try-with-resources block",
                resultIterator.isClosed()
        );
    }

    @Test
    public void batchInsertTest() throws Exception {
        create5ColumnsEntity();

        engine.beginTransaction();

        try {
            EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
                    .build();

            engine.addBatch("TEST", entry);

            entry = entry().set("COL1", 3).set("COL2", true).set("COL3", 3D).set("COL4", 4L).set("COL5", "OLA")
                    .build();

            engine.addBatch("TEST", entry);

            engine.flush();

            engine.commit();
        } finally {
            if (engine.isTransactionActive()) {
                engine.rollback();
            }
        }

        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).orderby(column("COL1").asc()));

        // 1st
        assertTrue("COL1 exists", query.get(0).containsKey("COL1"));
        assertEquals("COL1 ok?", 2, (int) query.get(0).get("COL1").toInt());

        assertTrue("COL2 exists", query.get(0).containsKey("COL2"));
        assertFalse("COL2 ok?", query.get(0).get("COL2").toBoolean());

        assertTrue("COL3 exists", query.get(0).containsKey("COL3"));
        assertEquals("COL3 ok?", 2D, query.get(0).get("COL3").toDouble(), 0);

        assertTrue("COL4 exists", query.get(0).containsKey("COL4"));
        assertEquals("COL4 ok?", 3L, (long) query.get(0).get("COL4").toLong());

        assertTrue("COL5 exists", query.get(0).containsKey("COL5"));
        assertEquals("COL5  ok?", "ADEUS", query.get(0).get("COL5").toString());

        // 2nd

        assertTrue("COL1 exists", query.get(1).containsKey("COL1"));
        assertEquals("COL1 ok?", 3, (int) query.get(1).get("COL1").toInt());

        assertTrue("COL2 exists", query.get(1).containsKey("COL2"));
        assertTrue("COL2 ok?", query.get(1).get("COL2").toBoolean());

        assertTrue("COL3 exists", query.get(1).containsKey("COL3"));
        assertEquals("COL3 ok?", 3D, query.get(1).get("COL3").toDouble(), 0);

        assertTrue("COL4 exists", query.get(1).containsKey("COL4"));
        assertEquals("COL4 ok?", 4L, (long) query.get(1).get("COL4").toLong());

        assertTrue("COL5 exists", query.get(1).containsKey("COL5"));
        assertEquals("COL5  ok?", "OLA", query.get(1).get("COL5").toString());
    }

    @Test
    public void batchInsertAutocommitTest() throws Exception {
        create5ColumnsEntity();

        EntityEntry entry = entry().set("COL1", 2).set("COL2", false).set("COL3", 2D).set("COL4", 3L).set("COL5", "ADEUS")
                .build();

        engine.addBatch("TEST", entry);

        entry = entry().set("COL1", 3).set("COL2", true).set("COL3", 3D).set("COL4", 4L).set("COL5", "OLA")
                .build();

        engine.addBatch("TEST", entry);

        // autocommit set to true.
        engine.flush();


        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).orderby(column("COL1").asc()));

        // 1st
        assertTrue("COL1 exists", query.get(0).containsKey("COL1"));
        assertEquals("COL1 ok?", 2, (int) query.get(0).get("COL1").toInt());

        assertTrue("COL2 exists", query.get(0).containsKey("COL2"));
        assertFalse("COL2 ok?", query.get(0).get("COL2").toBoolean());

        assertTrue("COL3 exists", query.get(0).containsKey("COL3"));
        assertEquals("COL3 ok?", 2D, query.get(0).get("COL3").toDouble(), 0);

        assertTrue("COL4 exists", query.get(0).containsKey("COL4"));
        assertEquals("COL4 ok?", 3L, (long) query.get(0).get("COL4").toLong());

        assertTrue("COL5 exists", query.get(0).containsKey("COL5"));
        assertEquals("COL5  ok?", "ADEUS", query.get(0).get("COL5").toString());

        // 2nd

        assertTrue("COL1 exists", query.get(1).containsKey("COL1"));
        assertEquals("COL1 ok?", 3, (int) query.get(1).get("COL1").toInt());

        assertTrue("COL2 exists", query.get(1).containsKey("COL2"));
        assertTrue("COL2 ok?", query.get(1).get("COL2").toBoolean());

        assertTrue("COL3 exists", query.get(1).containsKey("COL3"));
        assertEquals("COL3 ok?", 3D, query.get(1).get("COL3").toDouble(), 0);

        assertTrue("COL4 exists", query.get(1).containsKey("COL4"));
        assertEquals("COL4 ok?", 4L, (long) query.get(1).get("COL4").toLong());

        assertTrue("COL5 exists", query.get(1).containsKey("COL5"));
        assertEquals("COL5  ok?", "OLA", query.get(1).get("COL5").toString());
    }

    /**
     * Tests that on a rollback situation, the prepared statement batches are cleared.
     *
     * The steps performed on this test are:
     * <ol>
     *     <li>Add batch to transaction and purposely fail to flush</li>
     *     <li>Ensure the existence of the Exception and rollback transaction</li>
     *     <li>Flush again successfully and ensure that the DB table doesn't have any rows</li>
     * </ol>
     *
     * This is a regression test.
     *
     * @throws DatabaseEngineException If there is a problem on {@link DatabaseEngine} operations.
     * @since 2.1.12
     */
    @Test
    public void batchInsertRollback() throws DatabaseEngineException {
        final CountDownLatch latch = new CountDownLatch(1);

        final DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .build();

        new MockUp<AbstractDatabaseEngine>() {
            @Mock
            public synchronized void flush(final Invocation invocation) throws DatabaseEngineException {
                if (latch.getCount() == 1) {
                    throw new DatabaseEngineException("");
                }
                invocation.proceed();
            }
        };

        DatabaseEngineException expectedException = null;

        engine.addEntity(entity);
        engine.beginTransaction();

        try {
            final EntityEntry entry = entry().set("COL1", 1).build();

            engine.addBatch("TEST", entry);
            engine.flush();
            fail("Was expecting the flush operation to fail");
        } catch (final DatabaseEngineException e) {
            expectedException = e;
        } finally {
            if (engine.isTransactionActive()) {
                engine.rollback();
            }
        }

        // Ensure we had an exception and therefore we didn't insert anything on the DB and that we cleared the batches.
        assertNotNull("DB returned exception when flushing", expectedException);

        latch.countDown();
        engine.beginTransaction();
        engine.flush();
        engine.commit();

        final List<Map<String, ResultColumn>> query = engine.query(select(all())
                                                                           .from(table("TEST"))
                                                                           .orderby(column("COL1").asc()));

        // Previously, we rolled back the transaction; now we are trying the flush an empty transaction.
        // Therefore, we shouldn't have any rows on the table.
        assertEquals("There are no rows on table TEST", 0, query.size());
    }

    @Test
    public void blobTest() throws DatabaseEngineException {
        final double[] original = new double[]{5, 6, 7};
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BLOB)
                .build();

        engine.addEntity(entity);
        EntityEntry entry = entry()
                .set("COL1", 2)
                .set("COL2", original)
                .build();

        engine.persist("TEST", entry);

        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")));

        int i = 0;
        for (double d : original) {
            assertEquals("arrays are equal?", d, query.get(0).get("COL2").<double[]>toBlob()[i++], 0D);
        }
    }

    @Test
    public void limitNumberOfRowsTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 10; i++) {
            entry.set("COL1", i);
            engine.persist("TEST", entry
                    .build());
        }
        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).limit(5));

        assertEquals("number of rows ok?", 5, query.size());
    }

    @Test
    public void limitAndOffsetNumberOfRowsTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 20; i++) {
            entry.set("COL1", i);
            engine.persist("TEST", entry
                    .build());
        }

        int limit = 5;
        int offset = 7;
        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).limit(limit).offset(offset));
        assertEquals("number of rows ok?", limit, query.size());
        for (int i = offset, j = 0; i < offset + limit; i++, j++) {
            assertEquals("Check correct row", i, query.get(j).get("COL1").toInt().intValue());
        }
    }

    @Test
    public void limitOffsetAndOrderNumberOfRowsTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .addColumn("COL6", INT)
                .build();

        engine.addEntity(entity);

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS")
                .set("COL6", 20);

        for (int i = 0; i < 20; i++) {
            entry.set("COL1", i);
            entry.set("COL6", 20 - i);
            engine.persist("TEST", entry
                    .build());
        }

        int limit = 5;
        int offset = 7;
        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).limit(limit).offset(offset).orderby(column("COL6").asc()));
        assertEquals("number of rows ok?", limit, query.size());
        for (int i = offset, j = 0; i < offset + limit; i++, j++) {
            assertEquals("Check correct row col1", 19 - i, query.get(j).get("COL1").toInt().intValue());
            assertEquals("Check correct row col6", i + 1, query.get(j).get("COL6").toInt().intValue());
        }
    }

    @Test
    public void limitOffsetAndOrder2NumberOfRowsTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", STRING)
                .addColumn("COL3", INT)
                .build();

        engine.addEntity(entity);

        EntityEntry.Builder entry = entry()
                .set("COL1", 0)
                .set("COL2", "A")
                .set("COL3", 6);
        engine.persist("TEST", entry.build());


        entry.set("COL1", 1);
        entry.set("COL2", "B");
        entry.set("COL3", 5);
        engine.persist("TEST", entry.build());

        entry.set("COL1", 2);
        entry.set("COL2", "C");
        entry.set("COL3", 4);
        engine.persist("TEST", entry.build());

        entry.set("COL1", 3);
        entry.set("COL2", "D");
        entry.set("COL3", 3);
        engine.persist("TEST", entry.build());

        entry.set("COL1", 4);
        entry.set("COL2", "E");
        entry.set("COL3", 2);
        engine.persist("TEST", entry.build());

        entry.set("COL1", 5);
        entry.set("COL2", "F");
        entry.set("COL3", 1);
        engine.persist("TEST", entry.build());

        entry.set("COL1", 6);
        entry.set("COL2", "G");
        entry.set("COL3", 0);
        engine.persist("TEST", entry.build());

        int limit = 2;
        int offset = 3;
        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).limit(limit).offset(offset));
        assertEquals("number of rows ok?", limit, query.size());

        assertEquals("Check correct row col2", "D", query.get(0).get("COL2").toString());
        assertEquals("Check correct row col2", "E", query.get(1).get("COL2").toString());

        query = engine.query(select(all()).from(table("TEST")).limit(limit).offset(offset).orderby(column("COL2").desc()));
        assertEquals("number of rows ok?", limit, query.size());

        assertEquals("Check correct row col2", "D", query.get(0).get("COL2").toString());
        assertEquals("Check correct row col2", "C", query.get(1).get("COL2").toString());
    }

    @Test
    public void offsetLessThanZero() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .addColumn("COL6", INT)
                .build();

        engine.addEntity(entity);

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 20; i++) {
            entry.set("COL1", i);
            entry.set("COL6", 20 - i);
            engine.persist("TEST", entry.build());
        }

        int limit = 5;
        int offset = -1;
        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).limit(limit).offset(offset).orderby(column("COL6").asc()));
        assertEquals("number of rows ok?", limit, query.size());
        for (int i = 0, j = 0; i < 5; i++, j++) {
            assertEquals("Check correct row col1", 19 - i, query.get(j).get("COL1").toInt().intValue());
            assertEquals("Check correct row col6", i + 1, query.get(j).get("COL6").toInt().intValue());
        }
    }

    @Test
    public void offsetBiggerThanSize() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .addColumn("COL6", INT)
                .build();

        engine.addEntity(entity);

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS")
                .set("COL6", 20);

        for (int i = 0; i < 20; i++) {
            entry.set("COL1", i);
            entry.set("COL6", 20 - i);
            engine.persist("TEST", entry.build());
        }

        int limit = 5;
        int offset = 20;
        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).limit(limit).offset(offset));
        assertEquals("number of rows ok?", 0, query.size());
    }

    @Test
    public void limitZeroOrNegative() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .addColumn("COL6", INT)
                .build();

        engine.addEntity(entity);

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS")
                .set("COL6", 20);

        for (int i = 0; i < 20; i++) {
            entry.set("COL1", i);
            entry.set("COL6", 20 - i);
            engine.persist("TEST", entry.build());
        }

        int limit = 0;
        int offset = 1;
        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).limit(limit).offset(offset));
        assertEquals("number of rows ok?", 19, query.size());

        limit = -1;
        query = engine.query(select(all()).from(table("TEST")).limit(limit).offset(offset));
        assertEquals("number of rows ok?", 19, query.size());
    }

    @Test
    public void offsetOnlyNumberOfRowsTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", BOOLEAN)
                .addColumn("COL3", DOUBLE)
                .addColumn("COL4", LONG)
                .addColumn("COL5", STRING)
                .addColumn("COL6", INT)
                .build();

        engine.addEntity(entity);

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 20; i++) {
            entry.set("COL1", i);
            entry.set("COL6", 20 - i);
            engine.persist("TEST", entry.build());
        }

        int offset = 7;
        List<Map<String, ResultColumn>> query = engine.query(select(all()).from(table("TEST")).offset(offset));
        assertEquals("number of rows ok?", 20 - offset, query.size());
        for (int i = offset, j = 0; i < 20; i++, j++) {
            assertEquals("Check correct row 1", i, query.get(j).get("COL1").toInt().intValue());
        }

        query = engine.query(select(all()).from(table("TEST")).offset(offset).orderby(column("COL6").asc()));
        assertEquals("number of rows ok?", 20 - offset, query.size());
        for (int i = offset, j = 0; i < 20; i++, j++) {
            assertEquals("Check correct row 6", offset + 1 + j, query.get(j).get("COL6").toInt().intValue());
        }
    }

    @Test
    public void stddevTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 10; i++) {
            entry.set("COL1", i);
            engine.persist("TEST", entry.build());
        }
        List<Map<String, ResultColumn>> query = engine.query(select(stddev(column("COL1")).alias("STDDEV")).from(table("TEST")));

        assertEquals("result ok?", 3.0276503540974917D, query.get(0).get("STDDEV").toDouble(), 0.0001D);
    }

    @Test
    public void sumTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 10; i++) {
            entry.set("COL1", i);
            engine.persist("TEST", entry.build());
        }
        List<Map<String, ResultColumn>> query = engine.query(select(sum(column("COL1")).alias("SUM")).from(table("TEST")));

        assertEquals("result ok?", 45, (int) query.get(0).get("SUM").toInt());
    }

    @Test
    public void countTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 10; i++) {
            entry.set("COL1", i);
            engine.persist("TEST", entry.build());
        }
        List<Map<String, ResultColumn>> query = engine.query(select(count(column("COL1")).alias("COUNT")).from(table("TEST")));

        assertEquals("result ok?", 10, (int) query.get(0).get("COUNT").toInt());
    }

    @Test
    public void avgTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 10; i++) {
            entry.set("COL1", i);
            engine.persist("TEST", entry.build());
        }
        List<Map<String, ResultColumn>> query = engine.query(select(avg(column("COL1")).alias("AVG")).from(table("TEST")));

        assertEquals("result ok?", 4.5D, query.get(0).get("AVG").toDouble(), 0);
    }

    @Test
    public void maxTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 10; i++) {
            entry.set("COL1", i);
            engine.persist("TEST", entry.build());
        }
        List<Map<String, ResultColumn>> query = engine.query(select(max(column("COL1")).alias("MAX")).from(table("TEST")));

        assertEquals("result ok?", 9, (int) query.get(0).get("MAX").toInt());
    }

    @Test
    public void minTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 10; i++) {
            entry.set("COL1", i);
            engine.persist("TEST", entry.build());
        }
        List<Map<String, ResultColumn>> query = engine.query(select(min(column("COL1")).alias("MIN")).from(table("TEST")));

        assertEquals("result ok?", 0, (int) query.get(0).get("MIN").toInt());
    }

    @Test
    public void floorTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2.5D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 10; i++) {
            entry.set("COL1", i);
            engine.persist("TEST", entry.build());
        }

        List<Map<String, ResultColumn>> query = engine.query(select(floor(column("COL3")).alias("FLOOR")).from(table("TEST")));

        assertEquals("result ok?", 2.0, query.get(0).get("FLOOR").toDouble(), DELTA);
    }

    @Test
    public void ceilingTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry.Builder entry = entry()
                .set("COL1", 2)
                .set("COL2", false)
                .set("COL3", 2.5D)
                .set("COL4", 3L)
                .set("COL5", "ADEUS");

        for (int i = 0; i < 10; i++) {
            entry.set("COL1", i);
            engine.persist("TEST", entry.build());
        }

        List<Map<String, ResultColumn>> query = engine.query(select(ceiling(column("COL3")).alias("CEILING")).from(table("TEST")));

        assertEquals("result ok?", 3.0, query.get(0).get("CEILING").toDouble(), DELTA);
    }

    @Test
    public void twoIntegerDivisionMustReturnADoubleTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", INT)
                .build();

        engine.addEntity(entity);

        EntityEntry.Builder ee = entry()
                .set("COL1", 1)
                .set("COL2", 2);

        engine.persist("TEST", ee.build());

        List<Map<String, ResultColumn>> query = engine.query(select(div(column("COL1"), column("COL2")).alias("DIV")).from(table("TEST")));

        assertEquals("", 0.5D, query.get(0).get("DIV").toDouble(), 0);
    }

    @Test
    public void selectWithoutFromTest() throws DatabaseEngineException {
        List<Map<String, ResultColumn>> query = engine.query(select(k(1).alias("constant")));

        assertEquals("constant ok?", 1, (int) query.get(0).get("constant").toInt());
    }

    @Test(expected = DatabaseEngineException.class)
    public void createEntityWithNullNameTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name(null)
                .addColumn("COL1", INT)
                .addColumn("COL2", INT)
                .build();

        try {
            engine.addEntity(entity);
        } catch (final DatabaseEngineException de) {
            assertEquals("exception ok?", "You have to define the entity name", de.getMessage());
            throw de;
        }
    }

    @Test(expected = DatabaseEngineException.class)
    public void createEntityWithNoNameTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("")
                .addColumn("COL1", INT)
                .addColumn("COL2", INT)
                .build();

        try {
            engine.addEntity(entity);
        } catch (final DatabaseEngineException de) {
            assertEquals("exception ok?", "You have to define the entity name", de.getMessage());
            throw de;
        }
    }

    @Test(expected = DatabaseEngineException.class)
    public void createEntityWithNameThatExceedsTheMaximumAllowedTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("0123456789012345678901234567891")
                .addColumn("COL1", INT)
                .addColumn("COL2", INT)
                .build();

        try {
            engine.addEntity(entity);
        } catch (final DatabaseEngineException de) {
            assertEquals("exception ok?", "Entity name '0123456789012345678901234567891' exceeds the maximum number of characters (30)", de.getMessage());
            throw de;
        }
    }

    @Test(expected = DatabaseEngineException.class)
    public void createEntityWithColumnThatDoesNotHaveNameTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("entname")
                .addColumn("", INT)
                .addColumn("COL2", INT)
                .build();

        try {
            engine.addEntity(entity);
        } catch (final DatabaseEngineException de) {
            assertEquals("exception ok?", "Column in entity 'entname' must have a name", de.getMessage());
            throw de;
        }
    }

    @Test(expected = DatabaseEngineException.class)
    public void createEntityWithMoreThanOneAutoIncColumn() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("entname")
                .addColumn("COL1", INT, true)
                .addColumn("COL2", INT, true)
                .build();

        try {
            engine.addEntity(entity);
        } catch (final DatabaseEngineException de) {
            assertEquals("exception ok?", "You can only define one auto incremented column", de.getMessage());
            throw de;
        }
    }

    @Test
    public void getGeneratedKeysFromAutoIncTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT, true)
                .addColumn("COL2", INT)
                .build();


        engine.addEntity(entity);

        EntityEntry ee = entry()
                .set("COL2", 2)
                .build();

        Long persist = engine.persist("TEST", ee);

        assertEquals("ret ok?", new Long(1), persist);
    }

    @Test
    public void getGeneratedKeysFromAutoInc2Test() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT, true)
                .addColumn("COL2", INT)
                .build();


        engine.addEntity(entity);

        EntityEntry ee = entry()
                .set("COL2", 2)
                .build();

        Long persist = engine.persist("TEST", ee);

        assertEquals("ret ok?", new Long(1), persist);

        ee = entry()
                .set("COL2", 2)
                .build();

        persist = engine.persist("TEST", ee);

        assertEquals("ret ok?", new Long(2), persist);
    }

    @Test
    public void getGeneratedKeysFromAutoIncWithTransactionTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT, true)
                .addColumn("COL2", INT)
                .build();


        engine.addEntity(entity);

        engine.beginTransaction();

        try {
            EntityEntry ee = entry()
                    .set("COL2", 2)
                    .build();

            Long persist = engine.persist("TEST", ee);

            assertEquals("ret ok?", new Long(1), persist);

            ee = entry()
                    .set("COL2", 2)
                    .build();

            persist = engine.persist("TEST", ee);

            assertEquals("ret ok?", new Long(2), persist);

            engine.commit();
        } finally {
            if (engine.isTransactionActive()) {
                engine.rollback();
            }
        }
    }

    /**
     * Tests that when persisting an entity in table that does not contain any auto generated values, the
     * {@link DatabaseEngine#persist(String, EntityEntry)} method returns {@code null}.
     *
     * @throws DatabaseEngineException If any error occurs.
     */
    @Test
    public void getGeneratedKeysWithNoAutoIncTest() throws DatabaseEngineException {
        final DbEntity entity = dbEntity()
            .name("TEST")
            .addColumn("COL1", STRING)
            .addColumn("COL2", STRING)
            // Set the two columns as fields of primary key, so they belong to the generated keys.
            .pkFields(ImmutableSet.of("COL1", "COL2"))
            .build();

        this.engine.addEntity(entity);

        final EntityEntry ee = entry()
                .set("COL1", "VAL1")
                .set("COL2", "VAL2")
                .build();

        assertThat(this.engine.persist("TEST", ee))
            .as("The auto generated value should be null!")
            .isNull();
    }

    /**
     * Tests that when trying to add {@link DbEntity} with multiple columns with auto incremented values, the
     * {@link DatabaseEngine#addEntity(DbEntity)} method throws a {@link DatabaseEngineException}.
     */
    @Test
    public void addMultipleAutoIncColumnsTest() {
        final DbEntity entity = dbEntity()
            .name("TEST")
            .addColumn("COL1", INT, true)
            .addColumn("COL2", INT, true)
            .build();

        assertThatCode(() -> this.engine.addEntity(entity))
            .as("The DatabaseEngine should not allow to setup a DbEntity with multiple auto incremented columns")
            .isInstanceOf(DatabaseEngineException.class);

    }

    @Test
    public void abortTransactionTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("TEST")
                .addColumn("COL1", INT)
                .addColumn("COL2", INT)
                .build();


        engine.addEntity(entity);

        engine.beginTransaction();
        try {
            EntityEntry ee = entry()
                    .set("COL1", 1)
                    .set("COL2", 2)
                    .build();

            engine.persist("TEST", ee);

            throw new Exception();
        } catch (final Exception e) {
            // ignore
        } finally {
            assertTrue("tx active?", engine.isTransactionActive());

            engine.rollback();

            assertFalse("tx active?", engine.isTransactionActive());

            assertEquals("ret 0?", 0, engine.query(select(all()).from(table("TEST"))).size());
        }
    }

    @Test
    public void createEntityDropItAndCreateItAgainTest() throws DatabaseEngineException {
        DbEntity entity = dbEntity()
                .name("USER")
                .addColumn("COL1", INT, true)
                .pkFields("COL1")
                .build();

        engine.addEntity(entity);
        DbEntity removeEntity = engine.removeEntity("USER");

        assertNotNull(removeEntity);

        engine.addEntity(entity);
    }

    @Test
    public void dropEntityThatDoesNotExistTest() {
        DbEntity removeEntity = engine.removeEntity("TABLETHATDOESNOTEXIST");

        assertNull(removeEntity);
    }

    @Test
    public void joinsTest() throws DatabaseEngineException {

        userRolePermissionSchema();

        engine.query(
                select(all())
                        .from(
                                table("USER").alias("a").innerJoin(table("USER_ROLE").alias("b"), eq(column("a", "COL1"), column("b", "COL1")))
                        )
        );

        engine.query(
                select(all())
                        .from(
                                table("USER").alias("a")
                                        .innerJoin(table("USER_ROLE").alias("b"), eq(column("a", "COL1"), column("b", "COL1")))
                                        .innerJoin(table("ROLE").alias("c"), eq(column("b", "COL2"), column("c", "COL1")))
                        )
        );

        engine.query(
                select(all())
                        .from(
                                table("USER").alias("a").rightOuterJoin(table("USER_ROLE").alias("b"), eq(column("a", "COL1"), column("b", "COL1")))
                        )
        );

        engine.query(
                select(all())
                        .from(
                                table("USER").alias("a").leftOuterJoin(table("USER_ROLE").alias("b"), eq(column("a", "COL1"), column("b", "COL1")))
                        )
        );
    }

    @Test
    public void joinATableWithQueryTest() throws DatabaseEngineException {
        userRolePermissionSchema();

        engine.query(
                select(all())
                        .from(
                                table("USER").alias("a")
                                        .innerJoin(
                                                select(column("COL1"))
                                                        .from(table("USER")).alias("b")
                                                , eq(column("a", "COL1"), column("b", "COL1"))
                                        )
                        )
        );
    }

    @Test
    public void joinAQueryWithATableTest() throws DatabaseEngineException {
        userRolePermissionSchema();

        engine.query(
                select(all())
                        .from(
                                select(column("COL1"))
                                        .from(table("USER")).alias("b")
                                        .innerJoin(
                                                table("USER").alias("a")
                                                , eq(column("a", "COL1"), column("b", "COL1"))
                                        )
                        )
        );
    }

    @Test
    public void joinTwoQueriesTest() throws DatabaseEngineException {
        userRolePermissionSchema();

        engine.query(
                select(all())
                        .from(
                                select(column("COL1"))
                                        .from(table("USER")).alias("a")
                                        .innerJoin(
                                                select(column("COL1"))
                                                        .from(table("USER")).alias("b")
                                                , eq(column("a", "COL1"), column("b", "COL1"))
                                        )
                        )
        );
    }

    @Test
    public void joinThreeQueriesTest() throws DatabaseEngineException {
        userRolePermissionSchema();

        engine.query(
                select(all())
                        .from(
                                select(column("COL1"))
                                        .from(table("USER")).alias("a")
                                        .innerJoin(
                                                select(column("COL1"))
                                                        .from(table("USER")).alias("b")
                                                , eq(column("a", "COL1"), column("b", "COL1"))
                                        )
                                        .rightOuterJoin(
                                                select(column("COL1"))
                                                        .from(table("USER")).alias("c")
                                                , eq(column("a", "COL1"), column("c", "COL1"))
                                        )
                        )
        );
    }

    @Test
    @Category(SkipTestCockroachDB.class)
    // unimplemented in CockroachDB: views do not currently support * expressions
    // https://github.com/cockroachdb/cockroach/issues/10028
    public void createAndDropViewTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        engine.executeUpdate(
                createView("VN").as(select(all()).from(table("TEST")))
        );

        engine.dropView("VN");
    }

    @Test
    @Category(SkipTestCockroachDB.class)
    // unimplemented in CockroachDB: views do not currently support * expressions
    // https://github.com/cockroachdb/cockroach/issues/10028
    public void createOrReplaceViewTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        engine.executeUpdate(
                createView("VN").as(select(all()).from(table("TEST"))).replace()
        );

        engine.dropView("VN");
    }

    @Test
    public void distinctTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        engine.query(
                select(all()).distinct()
                        .from(table("TEST"))
        );
    }

    @Test
    public void distinctAndLimitTogetherTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        engine.query(
                select(all()).distinct()
                        .from(table("TEST")).limit(2)
        );
    }

    @Test
    public void notEqualTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        engine.query(
                select(all())
                        .from(table("TEST"))
                        .where(neq(column("COL1"), k(1)))
        );
    }

    /**
     * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with a value filters a row correctly.
     *
     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
     */
    @Test
    public void inTest() throws DatabaseEngineException {
        runInClauseTest(in(column("COL1"), L((k(1)))));
    }

    /**
     * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with SELECT filters a row correctly.
     *
     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
     */
    @Test
    public void inSelectTest() throws DatabaseEngineException {
        runInClauseTest(in(
                column("COL1"),
                select(column("COL1")).from(table("TEST")).where(eq(column("COL1"), k(1)))
        ));
    }

    /**
     * Tests that the {@link SqlBuilder#in(Expression, Expression) IN} clause with values filters a row correctly,
     * when many values are provided.
     * <p>
     * This is a regression test for Oracle, which only supports up to 1000 values in IN clauses; the test uses
     * 20000 values.
     *
     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
     */
    @Test
    public void inManyValuesTest() throws DatabaseEngineException {
        final List<Expression> numExprs = IntStream.rangeClosed(-19998, 1)
                .mapToObj(SqlBuilder::k)
                .collect(Collectors.toList());

        runInClauseTest(in(column("COL1"), L(numExprs)));
    }

    /**
     * Tests that the {@link SqlBuilder#notIn(Expression, Expression) (Expression, Expression) negated IN} clause
     * with a value filters a row correctly.
     *
     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
     */
    @Test
    public void notInTest() throws DatabaseEngineException {
        runInClauseTest(notIn(column("COL1"), L((k(2)))));
    }

    /**
     * Tests that the {@link SqlBuilder#notIn(Expression, Expression) negated IN} clause with SELECT filters a row correctly.
     *
     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
     */
    @Test
    public void notInSelectTest() throws DatabaseEngineException {
        runInClauseTest(notIn(
                column("COL1"),
                select(column("COL1")).from(table("TEST")).where(eq(column("COL1"), k(2)))
        ));
    }

    /**
     * Tests that the {@link SqlBuilder#notIn(Expression, Expression) negated IN} clause with a value filters a row
     * correctly, when many values are provided.
     * <p>
     * This is a regression test for Oracle, which only supports up to 1000 values in IN clauses; the test uses
     * 20000 values.
     *
     * @throws DatabaseEngineException If a DB error occurs, thus failing the test.
     */
    @Test
    public void notInManyValuesTest() throws DatabaseEngineException {
        final List<Expression> numExprs = IntStream.rangeClosed(2, 20001)
                .mapToObj(SqlBuilder::k)
                .collect(Collectors.toList());

        runInClauseTest(notIn(column("COL1"), L(numExprs)));
    }

    /**
     * Common code to run IN clause tests.
     * <p>
     * This creates 2 entries in the database:
     * <table>
     *     <tr><td>COL1</td><td>COL5</td></tr>
     *     <tr><td>1</td><td>s1</td></tr>
     *     <tr><td>2</td><td>s2</td></tr>
     * </table>
     * <p>
     * The verifications expect the provided {@code whereInExpression} to filter the entries such that only the first
     * one is returned.
     *
     * @param whereInExpression The {@link Expression} to use in the WHERE clause of the query.
     * @throws DatabaseEngineException If a DB error occurs.
     */
    private void runInClauseTest(final Expression whereInExpression) throws DatabaseEngineException {
        create5ColumnsEntity();

        engine.persist("TEST", entry().set("COL1", 1).set("COL5", "s1").build());
        engine.persist("TEST", entry().set("COL1", 2).set("COL5", "s2").build());

        final List<Map<String, ResultColumn>> results = engine.query(
                select(all())
                        .from(table("TEST"))
                        .where(whereInExpression)
        );

        assertThat(results)
                .as("query should return only 1 result")
                .hasSize(1)
                .element(0)
                .as("result should have have value '1'")
                .extracting(result -> result.get("COL1").toInt())
                .isEqualTo(1);
    }

    @Test
    public void booleanTrueComparisonTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry entry1 = entry()
                .set("COL1", 1)
                .set("COL2", true)
                .set("COL3", 1)
                .set("COL4", 1)
                .set("COL5", "val 1")
                .build();
        engine.persist("TEST", entry1, false);

        EntityEntry entry2 = entry()
                .set("COL1", 1)
                .set("COL2", false)
                .set("COL3", 1)
                .set("COL4", 1)
                .set("COL5", "val 1")
                .build();
        engine.persist("TEST", entry2, false);

        List<Map<String, ResultColumn>> rows = engine.query(
                select(all())
                        .from(table("TEST"))
                        .where(
                                eq(column("COL2"), k(true))
                        )
        );

        assertEquals(1, rows.size());
    }

    @Test
    public void booleanFalseComparisonTest() throws DatabaseEngineException {
        create5ColumnsEntity();

        EntityEntry entry1 = entry()
                .set("COL1", 1)
                .set("COL2", true)
                .set("COL3", 1)
                .set("COL4", 1)
                .set("COL5", "val 1")
                .build();
        engine.persist("TEST", entry1, false);

        EntityEntry entry2 = entry()
                .set("COL1", 1)
                .set("COL2", false)
                .set("COL3", 1)
                .set("COL4", 1)
                .set("COL5", "val 1")
                .build();
        engine.persist("TEST", entry2, false);

        List<Map<String, ResultColumn>> rows = engine.query(
                select(all())
                        .from(table("TEST"))
                        .where(
                                eq(column("COL2"), k(false))
                        )
        );

        assertEquals(1, rows.size());
    }

    @Test
    public void coalesceTest() throws DatabaseEngineException {
        create5Columns
