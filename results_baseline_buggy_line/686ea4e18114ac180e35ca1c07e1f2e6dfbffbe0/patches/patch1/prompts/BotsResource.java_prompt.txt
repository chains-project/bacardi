 You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates.
Your task is to analyze the provided code and error message, then propose a patch that can be applied to the client code to resolve the issue.

 Here is the client code that is failing:
```java
//
// Wire
// Copyright (C) 2016 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.
//

package com.wire.lithium.server.resources;

import com.codahale.metrics.annotation.Metered;
import com.wire.lithium.models.NewBotResponseModel;
import com.wire.lithium.server.monitoring.MDCUtils;
import com.wire.xenon.MessageHandlerBase;
import com.wire.xenon.backend.models.ErrorMessage;
import com.wire.xenon.backend.models.NewBot;
import com.wire.xenon.crypto.Crypto;
import com.wire.xenon.factories.CryptoFactory;
import com.wire.xenon.factories.StorageFactory;
import com.wire.xenon.tools.Logger;
import io.swagger.annotations.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.UUID;

@Api
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@Path("/bots")
public class BotsResource {
    protected final MessageHandlerBase handler;

    protected final StorageFactory storageF;
    protected final CryptoFactory cryptoF;

    public BotsResource(MessageHandlerBase handler, StorageFactory storageF, CryptoFactory cryptoF) {
        this.handler = handler;
        this.storageF = storageF;
        this.cryptoF = cryptoF;
    }

    @POST
    @ApiOperation(value = "New Bot instance", response = NewBotResponseModel.class, code = 201)
    @ApiResponses(value = {
            @ApiResponse(code = 401, message = "Unauthorized", response = ErrorMessage.class),
            @ApiResponse(code = 409, message = "Bot not accepted (whitelist?)", response = ErrorMessage.class),
            @ApiResponse(code = 201, message = "Alles gute")})
    @Authorization("Bearer")
    @Metered
    public Response newBot(@Context ContainerRequestContext context,
                           @ApiParam @Valid @NotNull NewBot newBot) {

        NewBotResponseModel ret = new NewBotResponseModel();

        try {
            UUID botId = newBot.id;
            // put information to every log for more information
            MDCUtils.put("botId", botId);
            MDCUtils.put("conversationId", newBot.conversation.id);
            MDCUtils.put("userId", newBot.origin.id);

            String token = (String) context.getProperty("wire-auth");
            if (!onNewBot(newBot, token)) {
                return Response
                        .status(409)
                        .entity(new ErrorMessage("User not whitelisted or service does not accept new instances atm"))
                        .build();
            }

            boolean saveState = storageF.create(botId).saveState(newBot);
            if (!saveState) {
                Logger.warning("Failed to save the state. Bot: %s", botId);
            }

            ret.name = handler.getName(newBot);
            ret.accentId = handler.getAccentColour();
            String profilePreview = handler.getSmallProfilePicture();
            if (profilePreview != null) {
                ret.addAsset(profilePreview, "preview");
            }

            String profileBig = handler.getBigProfilePicture();
            if (profileBig != null) {
                ret.addAsset(profileBig, "complete");
            }

            try (Crypto crypto = cryptoF.create(botId)) {
                ret.lastPreKey = crypto.newLastPreKey();
                ret.preKeys = crypto.newPreKeys(0, 50);
            }

        } catch (Exception e) {
            Logger.exception("newBot: %s", e, e.getMessage());
            return Response.
                    status(500).
                    entity(new ErrorMessage(e.getMessage())).
                    build();
        }

        return Response.
                ok(ret).
                status(201).
                build();
    }

    protected boolean onNewBot(NewBot newBot, String auth) {
        return handler.onNewBot(newBot, auth);
    }
}

```

 the error is triggered in the following specific lines in the previous code:

```java
import javax.ws.rs.Produces;
```
```java
import javax.ws.rs.core.Response;
```
```java
@Consumes(MediaType.APPLICATION_JSON)
```
```java
import javax.ws.rs.container.ContainerRequestContext;
```
```java
import javax.ws.rs.core.Context;
```
```java
import javax.ws.rs.POST;
```
```java
public Response newBot(@Context ContainerRequestContext context,
```
```java
import javax.ws.rs.Consumes;
```
```java
import javax.ws.rs.core.MediaType;
```
```java
@Path("/bots")
```
```java
@Produces(MediaType.APPLICATION_JSON)
```
```java
import javax.ws.rs.Path;
```


 And here is the error message:
[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[38,19] package javax.ws.rs does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[42,24] package javax.ws.rs.core does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[47,2] cannot find symbol
  symbol: class Consumes

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[39,29] package javax.ws.rs.container does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[40,24] package javax.ws.rs.core does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[36,19] package javax.ws.rs does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[69,37] cannot find symbol
  symbol:   class ContainerRequestContext
  location: class com.wire.lithium.server.resources.BotsResource

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[35,19] package javax.ws.rs does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[41,24] package javax.ws.rs.core does not exist

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[48,2] cannot find symbol
  symbol: class Path

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[46,2] cannot find symbol
  symbol: class Produces

[ERROR] /lithium/src/main/java/com/wire/lithium/server/resources/BotsResource.java:[37,19] package javax.ws.rs does not exist



 Before proposing a fix, please analyze the error message and client code. Wrap your analysis inside <code_analysis> tags:

<code_analysis>
1. Examine the error message:
   - Identify the specific issue related to the dependency update.
   - Note the line number or method where the error occurs.
   - Determine which dependency and version is causing the issue.

2. Review the client code:
   - Locate the problematic areas mentioned in the error message.
   - Identify any related code that might be affected by the changes.

3. Consider potential fixes that adhere to the following constraints:
   - Do not change any function signatures.
   - Only remove the @Override annotation if the method no longer overrides a method in the updated dependency version.
   - Ensure correct imports are used, considering the newer dependency version.
   - Avoid removing existing code unless it directly causes a compilation or functionality error.

4. Plan the necessary changes to fix the issue:
   - List the specific modifications required.
   - Consider potential side effects of the proposed changes.
   - Ensure the fix addresses the root cause of the error.
</code_analysis>

Based on your analysis, propose a patch to fix the issue. Your response should be a complete and compilable Java class in a fenced code block. Adhere to these guidelines:

1. Do not change any function signatures.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Avoid removing any existing code unless it directly causes a compilation or functionality error.
6. Ensure the entire class is included and that it will compile correctly.

Please provide your fixed class in the following format:

```java
// Your complete, fixed Java class here
```

Remember to focus specifically on issues related to the dependency update when proposing your fix.
 