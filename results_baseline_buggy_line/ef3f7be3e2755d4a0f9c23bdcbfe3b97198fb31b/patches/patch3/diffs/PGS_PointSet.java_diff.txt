4,5d3
< import java.util.Collection;
< import java.util.Collections;
7,9d4
< import java.util.SplittableRandom;
< import java.util.stream.Collectors;
< import java.util.stream.IntStream;
11,25d5
< import javax.vecmath.Point3d;
< import javax.vecmath.Point4d;
< 
< import org.apache.commons.math3.ml.clustering.Clusterable;
< import org.apache.commons.math3.ml.clustering.Clusterer;
< import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
< import org.apache.commons.math3.ml.distance.EuclideanDistance;
< import org.apache.commons.math3.random.RandomGenerator;
< import org.apache.commons.math3.util.FastMath;
< import org.apache.commons.math3.util.Pair;
< 
< import org.jgrapht.alg.interfaces.SpanningTreeAlgorithm;
< import org.jgrapht.alg.spanning.PrimMinimumSpanningTree;
< import org.jgrapht.graph.SimpleGraph;
< import org.tinfour.common.IIncrementalTin;
27,33d6
< 
< import it.unimi.dsi.util.XoRoShiRo128PlusRandom;
< import it.unimi.dsi.util.XoRoShiRo128PlusRandomGenerator;
< import micycle.pgs.commons.GeometricMedian;
< import micycle.pgs.commons.PEdge;
< import micycle.pgs.commons.PoissonDistributionJRUS;
< import processing.core.PShape;
70c43,44
<                         if (tree.size() == 0 || tree.query1NN(coords) == null || tree.query1NN(coords).dist() > distanceTolerance) {
---
>                         PVector nearestPoint = tree.query1NN(coords);
>                         if (tree.size() == 0 || nearestPoint == null || PVector.dist(p, nearestPoint) > distanceTolerance) {
