 You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates.
Your task is to analyze the provided code and error message, then propose a patch that can be applied to the client code to resolve the issue.

 Here is the client code that is failing:
```java
package com.fluxtion.compiler.builder.factory;

import com.fluxtion.compiler.generation.util.MultipleSepTargetInProcessTest;
import com.fluxtion.runtime.annotations.OnEventHandler;
import com.fluxtion.runtime.annotations.OnParentUpdate;
import com.fluxtion.runtime.annotations.OnTrigger;
import com.fluxtion.runtime.annotations.builder.ExcludeNode;
import com.fluxtion.runtime.node.NamedNode;
import lombok.Data;
import org.junit.Test;
import org.yaml.snakeyaml.TypeDescription;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.function.DoubleSupplier;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

public class GraphOfInstancesTest extends MultipleSepTargetInProcessTest {
    public GraphOfInstancesTest(boolean compiledSep) {
        super(compiledSep);
    }

    @Test(expected = NoSuchFieldException.class)
    public void buildWithoutYaml() {
        sep(c -> {
            StringHandler stringHandlerA = new StringHandler("A");
            StringHandler stringHandlerB = new StringHandler("B");
            StringHandler stringHandlerC = new StringHandler("C");
            StringHandler stringHandlerADuplicate = new StringHandler("A");
            StringHandler stringHandlerN = new StringHandler("N");
            DoubleSum aggregator = new DoubleSum();
            aggregator.getDoubleSuppliers().add(stringHandlerA);
            aggregator.getDoubleSuppliers().add(stringHandlerB);


            InstanceHolder instanceHolder = new InstanceHolder();
            instanceHolder.getNodeList().add(aggregator);
            c.addNode(instanceHolder);
            c.addNode(stringHandlerC);
            c.addNode(stringHandlerN);
        });

        DoubleSum aggregator = getField("aggregator");
        StringHandler handlerC = getField("stringHandler_C");
        onEvent("A");
        assertThat(aggregator.sum, is(1.0));
        assertThat(handlerC.value, is(0));
        onEvent("A");
        assertThat(aggregator.sum, is(2.0));
        assertThat(handlerC.value, is(0));
        onEvent("B");
        assertThat(aggregator.sum, is(3.0));
        assertThat(handlerC.value, is(0));
        onEvent("C");
        assertThat(aggregator.sum, is(3.0));
        assertThat(handlerC.value, is(1));

        getField("instanceHolder");
    }

    @Test(expected = NoSuchFieldException.class)
    public void driveFromYaml() {
        String config = "nodeList:\n" +
                "- !doubleSum\n" +
                "  doubleSuppliers:\n" +
                "  - !stringHandler\n" +
                "    id: A\n" +
                "  - !stringHandler\n" +
                "    id: B\n" +
                "- !stringHandler\n" +
                "  id: C";
        sep(c -> {
            Constructor constructor = new Constructor();
            constructor.addTypeDescription(new TypeDescription(DoubleSum.class, "!doubleSum"));
            constructor.addTypeDescription(new TypeDescription(StringHandler.class, "!stringHandler"));
            Yaml yaml = new Yaml(constructor);
            c.addNode(yaml.loadAs(config, InstanceHolder.class));
        });
        DoubleSum aggregator = getField("aggregator");
        StringHandler handlerC = getField("stringHandler_C");
        onEvent("A");
        assertThat(aggregator.sum, is(1.0));
        assertThat(handlerC.value, is(0));
        onEvent("A");
        assertThat(aggregator.sum, is(2.0));
        assertThat(handlerC.value, is(0));
        onEvent("B");
        assertThat(aggregator.sum, is(3.0));
        assertThat(handlerC.value, is(0));
        onEvent("C");
        assertThat(aggregator.sum, is(3.0));
        assertThat(handlerC.value, is(1));

        getField("instanceHolder");
    }

    @Test(expected = NoSuchFieldException.class)
    public void driveAsListFromYaml() {
        String config = "" +
                "- !doubleSum\n" +
                "  doubleSuppliers:\n" +
                "  - !stringHandler\n" +
                "    id: A\n" +
                "  - !stringHandler\n" +
                "    id: B\n" +
                "- !stringHandler\n" +
                "  id: C";
        sep(c -> {
            Constructor constructor = new Constructor();
            constructor.addTypeDescription(new TypeDescription(DoubleSum.class, "!doubleSum"));
            constructor.addTypeDescription(new TypeDescription(StringHandler.class, "!stringHandler"));
            Yaml yaml = new Yaml(constructor);
            yaml.loadAs("nodeList:\n" + config, InstanceHolder.class).getNodeList().forEach(c::addNode);
        });
        DoubleSum aggregator = getField("aggregator");
        StringHandler handlerC = getField("stringHandler_C");
        onEvent("A");
        assertThat(aggregator.sum, is(1.0));
        assertThat(handlerC.value, is(0));
        onEvent("A");
        assertThat(aggregator.sum, is(2.0));
        assertThat(handlerC.value, is(0));
        onEvent("B");
        assertThat(aggregator.sum, is(3.0));
        assertThat(handlerC.value, is(0));
        onEvent("C");
        assertThat(aggregator.sum, is(3.0));
        assertThat(handlerC.value, is(1));

        getField("instanceHolder");
    }

    @Test
    public void buildWithYaml() {

    }


    @Data
    @ExcludeNode
    public static class InstanceHolder implements NamedNode {
        private List<Object> nodeList = new ArrayList<>();

        @Override
        public String getName() {
            return "instanceHolder";
        }
    }


    public static class StringHandler implements DoubleSupplier, NamedNode {

        private String id;
        transient int value;

        public StringHandler(String id) {
            this.id = id;
        }

        public StringHandler() {
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        @OnEventHandler
        public boolean myStringHandler(String s) {
            value += Objects.equals(s, id) ? 1 : 0;
            return true;
        }

        @Override
        public double getAsDouble() {
            return value;
        }

        public int getValue() {
            return value;
        }

        @Override
        public String toString() {
            return "StringHandler{" +
                    "id='" + id + '\'' +
                    ", value=" + value +
                    '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            StringHandler that = (StringHandler) o;
            return id.equals(that.id);
        }

        @Override
        public int hashCode() {
            return Objects.hash(id);
        }

        @Override
        public String getName() {
            return "stringHandler_" + id;
        }
    }


    @Data
    public static class DoubleSum implements NamedNode {

        private List<DoubleSupplier> doubleSuppliers = new ArrayList<>();
        double sum;

        @OnParentUpdate
        public void doubleSupplierUpdated(DoubleSupplier doubleSupplier) {

        }

        @OnTrigger
        public boolean sumSuppliers() {
            sum = doubleSuppliers.stream().mapToDouble(DoubleSupplier::getAsDouble).sum();
            return true;
        }

        @Override
        public String getName() {
            return "aggregator";
        }
    }
}

```

 the error is triggered in the following specific lines in the previous code:

```java
Constructor constructor = new Constructor();
```
```java
Constructor constructor = new Constructor();
```


 And here is the error message:
[ERROR] /fluxtion/compiler/src/test/java/com/fluxtion/compiler/builder/factory/GraphOfInstancesTest.java:[78,68] cannot find symbol
  symbol:   method builder()
  location: class org.yaml.snakeyaml.LoaderOptions

[ERROR] /fluxtion/compiler/src/test/java/com/fluxtion/compiler/builder/factory/GraphOfInstancesTest.java:[114,68] cannot find symbol
  symbol:   method builder()
  location: class org.yaml.snakeyaml.LoaderOptions



 Before proposing a fix, please analyze the error message and client code. Wrap your analysis inside <code_analysis> tags:

<code_analysis>
1. Examine the error message:
   - Identify the specific issue related to the dependency update.
   - Note the line number or method where the error occurs.
   - Determine which dependency and version is causing the issue.

2. Review the client code:
   - Locate the problematic areas mentioned in the error message.
   - Identify any related code that might be affected by the changes.

3. Consider potential fixes that adhere to the following constraints:
   - Do not change any function signatures.
   - Only remove the @Override annotation if the method no longer overrides a method in the updated dependency version.
   - Ensure correct imports are used, considering the newer dependency version.
   - Avoid removing existing code unless it directly causes a compilation or functionality error.

4. Plan the necessary changes to fix the issue:
   - List the specific modifications required.
   - Consider potential side effects of the proposed changes.
   - Ensure the fix addresses the root cause of the error.
</code_analysis>

Based on your analysis, propose a patch to fix the issue. Your response should be a complete and compilable Java class in a fenced code block. Adhere to these guidelines:

1. Do not change any function signatures.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Avoid removing any existing code unless it directly causes a compilation or functionality error.
6. Ensure the entire class is included and that it will compile correctly.

Please provide your fixed class in the following format:

```java
// Your complete, fixed Java class here
```

Remember to focus specifically on issues related to the dependency update when proposing your fix.
 