package se.kth.injector;import com.github.dockerjava.api.DockerClient;import com.github.dockerjava.api.command.CreateContainerResponse;import com.github.dockerjava.api.command.PullImageResultCallback;import com.github.dockerjava.api.model.Mount;import com.github.dockerjava.api.model.MountType;import org.apache.maven.api.model.Dependency;import org.apache.maven.api.model.Model;import se.kth.model.MavenModel;import se.kth.utils.Config;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.util.Comparator;import java.util.LinkedList;import java.util.List;import static se.kth.injector.PomFileLocator.getAllModels;import static se.kth.injector.PomFileLocator.getPomFilePaths;public class TestFrameworkHandler {    private static final DockerClient dockerClient = Config.getDockerClient();    private String imageId;    private String containerId;    private final List<MavenModel> models;    private List<Mount> mounts = new LinkedList<>();    private List<Path> modifiedPomFiles = new LinkedList<>();    public TestFrameworkHandler(String imageId) throws InterruptedException {        this.imageId = imageId;        dockerClient.pullImageCmd(imageId).exec(new PullImageResultCallback()).awaitCompletion();        CreateContainerResponse container = dockerClient.createContainerCmd(imageId)                .withCmd("sh", "-c", "sleep 60")                .exec();        dockerClient.startContainerCmd(container.getId()).exec();        this.containerId = container.getId();        List<Path> paths = getPomFilePaths(containerId);        this.models = getAllModels(containerId, paths);    }    public TestFrameworkHandler withMountsForModifiedPomFiles() {        List<Path> paths = getPomFilePaths(containerId);        List<MavenModel> models = getAllModels(containerId, paths);        List<Mount> pomFileMounts = models.stream()                .map(this::createBindForModifiedPomFile)                .toList();        this.mounts.addAll(pomFileMounts);        return this;    }    public TestFrameworkHandler withMetaInfMounts() {        List<Mount> metaInfMounts = models.stream()                .map(this::createBindMountForMetaInf)                .toList();        this.mounts.addAll(metaInfMounts);        return this;    }    public TestFrameworkHandler withListenerMounts() {        List<Mount> listenerMounts = models.stream()                .map(this::createBindMountForListener)                .toList();        this.mounts.addAll(listenerMounts);        return this;    }    public TestFrameworkHandler withOutputMount() {        Mount outputMount = this.createBindMountForOutput();        this.mounts.add(outputMount);        return this;    }    public List<Mount> getMounts() {        return this.mounts;    }    public Path getRootModifiedPomFile() {        return this.modifiedPomFiles.stream().min(Comparator.comparingInt(Path::getNameCount))                .orElse(null);    }    private Mount createBindForModifiedPomFile(MavenModel mavenModel) {        Model model = mavenModel.getModel();        Dependency vintageEngine = Dependency.newBuilder()                .groupId("org.junit.vintage")                .artifactId("junit-vintage-engine")                .version("5.11.2")                .scope("test")                .build();        Dependency jupiterPlatform = Dependency.newBuilder()                .groupId("org.junit.platform")                .artifactId("junit-platform-launcher")                .version("1.10.3")                .scope("test")                .build();        List<Dependency> newDependencies = new LinkedList<>(model.getDependencies());        newDependencies.add(vintageEngine);        newDependencies.add(jupiterPlatform);        Model newModel = Model.newBuilder(model)                .dependencies(newDependencies)                .build();        String modifiedPomFileName = "pom.xml";        String modifiedPomFileAbsolutePath = PomFileLocator.writeCustomPomFile(newModel, modifiedPomFileName);        Path modifiedPomFileDockerPath = mavenModel.getFilePath().resolveSibling(modifiedPomFileName);        this.modifiedPomFiles.add(modifiedPomFileDockerPath);        return new Mount()                .withSource(modifiedPomFileAbsolutePath)                .withTarget(modifiedPomFileDockerPath.toString())                .withType(MountType.BIND);    }    private Mount createBindMountForMetaInf(MavenModel mavenModel) {        Path metaInfPath = Path.of("src", "test", "resources", "META-INF", "services", "org.junit.platform.launcher" +                ".TestExecutionListener");        Path dockerPath = mavenModel.getFilePath().resolveSibling(metaInfPath);        Path metaInfSourcePath = Path.of("test-failures", "src", "main", "resources", "org.junit.platform.launcher" +                ".TestExecutionListener").toAbsolutePath();        return new Mount()                .withSource(metaInfSourcePath.toString())                .withTarget(dockerPath.toString())                .withType(MountType.BIND);    }    private Mount createBindMountForListener(MavenModel mavenModel) {        Path listenerPath = Path.of("src", "test", "java", "se", "kth", "listener", "CustomExecutionListener.java");        Path listenerDockerPath = mavenModel.getFilePath().resolveSibling(listenerPath);        Path listenerSourcePath = Path.of("test-failures", "src", "main", "java", "se", "kth", "listener",                "CustomExecutionListener.java").toAbsolutePath();        return new Mount()                .withSource(listenerSourcePath.toString())                .withTarget(listenerDockerPath.toString())                .withType(MountType.BIND);    }    private Mount createBindMountForOutput() {        Path dockerPath = Path.of("/bacardi-output");        Path projectOutputPath = Path.of("output", this.imageId.split(":")[1]);        Path localOutputPath = Config.getTmpDirPath().resolve(projectOutputPath);        try {            Files.createDirectory(localOutputPath);        } catch (IOException e) {            throw new RuntimeException(e);        }        return new Mount()                .withSource(localOutputPath.toString())                .withTarget(dockerPath.toString())                .withType(MountType.BIND);    }}