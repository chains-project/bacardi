```java
package com.example.web;

import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Priority;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.mvc.locale.LocaleResolver; // Ensure this import is updated based on the new dependency
import javax.mvc.locale.LocaleContext; // Updated import for LocaleContext instead of LocaleResolverContext
import javax.ws.rs.core.UriInfo; // This import seems correct based on the context

/**
 * Resolver to get the {@link Locale} to use from the requests query param <i>lang</i>.
 *
 * In case there is no request param with this name, the {@link Locale} will be resolved by a higher prioritised
 * implementation.
 *
 * Example usage:
 * <pre>
 * {@code
 * # Use default locale
 * curl -X GET <your-url>
 *
 * # Set german locale by query param
 * curl -X GET <your-url>?lang=de-DE
 * }
 * </pre>
 *
 * @author Tobias Erdle
 */
@Priority(1)
@ApplicationScoped
public class QueryParamLocaleResolver implements LocaleResolver {

    @Inject
    Logger log;

    @Override
    public Locale resolveLocale(final LocaleContext context) { // Updated to use LocaleContext
        final String queryLang = context.getUriInfo()
                .getQueryParameters()
                .getFirst("lang");
        log.log(Level.INFO, "QueryParamLocaleResolver::resolveLocale:lang:{0}", queryLang);
        return queryLang != null ? Locale.forLanguageTag(queryLang) : null;
    }
}
``` 

### Summary of Changes:
- Updated the import statement to `import javax.mvc.locale.LocaleContext;` to align with the new dependency structure.
- Changed the method parameter type in the `resolveLocale` method from `LocaleResolverContext` to `LocaleContext` to match the updated dependency.
