89c89
<             if (batch.isDone())
---
>             if (batch.getState() == BatchWorkflow.State.done)  // Updated to check state directly
94c94
<                 if (WorkflowConfiguration.Processing.sequential.equals(batch.getProcessing())) // Updated to use getProcessing()
---
>                 if (batch.getProcessing() == WorkflowConfiguration.Processing.sequential) // Updated to check processing directly
100c100
<             scheduled.removeIf(batch -> !BatchWorkflow.State.scheduled.equals(batch.getState()));
---
>             scheduled.removeIf(batch -> batch.getState() != BatchWorkflow.State.scheduled); // Updated to check state directly
105c105
<                     if (WorkflowConfiguration.Processing.sequential.equals(batch.getProcessing())) {
---
>                     if (batch.getProcessing() == WorkflowConfiguration.Processing.sequential) {
143,144c143,144
<         if (BatchWorkflow.State.running.equals(batch.getState()))
<             running.put(batch.getId()); // Ensure put uses the correct method
---
>         if (batch.getState() == BatchWorkflow.State.running) // Updated to check state directly
>             running.put(batch.getId(), batch); // Ensure put uses the correct method
158c158
<         return getBatchtProcess(id).getWorkflowConfiguration(); // Updated to use the correct method
---
>         return getBatchProcess(id).getWorkflowConfiguration(); // Updated to use the correct method
175c175
<         BatchWorkflow batch = new BatchWorkflow(configuration); // Ensure constructor is correct
---
>         BatchWorkflow batch = new BatchWorkflow(); // Ensure constructor is correct, no arguments
186a187,190
> 
>     private BatchWorkflow getBatchProcess(String id) {
>         return processes.get(id); // Added method to fetch BatchWorkflow by ID
>     }
