 You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates.
Your task is to analyze the provided code and error message, then propose a patch that can be applied to the client code to resolve the issue.

 Here is the client code that is failing:
<client_code>
/**
 * File:     BatchController.java
 * Package:  de.uniwue.controller
 * 
 * Author:   Herbert Baier
 * Date:     18.09.2020
 */
package de.uniwue.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

import org.apache.commons.io.FilenameUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import de.uniwue.batch.BatchWorkflow;
import de.uniwue.batch.WorkflowConfiguration;
import de.uniwue.batch.report.BatchScheduledOverview;
import de.uniwue.batch.report.BatchWorkflowDetail;
import de.uniwue.batch.report.BatchWorkflowOverview;
import de.uniwue.batch.report.ProcessManagerOverview;
import de.uniwue.config.ProjectConfiguration;
import de.uniwue.feature.ProcessStateCollector;
import de.uniwue.helper.OverviewHelper;
import de.uniwue.helper.RecognitionHelper;

/**
 * Defines batch controllers.
 *
 * @author Herbert Baier
 * @version 1.0
 * @since 1.8
 */
@Controller
@RequestMapping(value = "batch")
public class BatchController {
    /**
     * The batch process manager.
     */
    private final BatchProcessManager batchProcessManager;

    /**
     * Creates a batch controller.
     * 
     * @param batchProcessManager The batch process manager.
     * @since 1.8
     */
    public BatchController(BatchProcessManager batchProcessManager) {
        super();
        this.batchProcessManager = batchProcessManager;
    }

    /**
     * Returns the project overview.
     * 
     * @param name The project name.
     * @param type The project type. It can be Binary or Gray. The default value is
     *             Binary.
     * @return
     * @since 1.8
     */
    @RequestMapping(value = "/project", method = RequestMethod.GET)
    public @ResponseBody ProjectOverview getProject(@RequestParam String name,
            @RequestParam(required = false) String type) {
        if (type == null)
            type = WorkflowConfiguration.Type.Binary.name();

        String projectFolder;
        ProcessStateCollector processStateCollector;

        try {
            projectFolder = OverviewHelper.listProjects().get(name);
            if (!projectFolder.endsWith(File.separator))
                projectFolder = projectFolder + File.separator;

            processStateCollector = new ProcessStateCollector(new ProjectConfiguration(projectFolder), type);

        } catch (Exception e) {
            throw new IllegalArgumentException("can not extract pages information - " + e.getMessage());
        }

        File inputFolder = new File(projectFolder, BatchWorkflow.ProjectFolder.INPUT.name()); // Changed to INPUT
        if (!inputFolder.exists())
            throw new IllegalStateException("the input folder of project '" + name + "' does not exist.");

        ProjectOverview report = new ProjectOverview(name, type);

        for (final File fileEntry : Objects.requireNonNull(inputFolder.listFiles()))
            if (fileEntry.isFile()
                    && FilenameUtils.getExtension(fileEntry.getName()).equals(BatchWorkflow.SOURCE_IMAGE_EXTENSION)) // Changed to SOURCE_IMAGE_EXTENSION
                report.getPages().add(FilenameUtils.removeExtension(fileEntry.getName()));

        report.getPages().sort(String::compareToIgnoreCase);

        for (String page : report.getPages())
            report.getPageStates().add(new PageState(page, processStateCollector.preprocessingState(page),
                    processStateCollector.segmentationState(page), processStateCollector.lineSegmentationState(page),
                    processStateCollector.recognitionState(page)));

        return report;
    }

    // ... rest of the methods remain unchanged ...

    /**
     * Defines project overviews.
     *
     * @author Herbert Baier
     * @version 1.0
     * @since 1.8
     */
    private class ProjectOverview {
        // ... unchanged ...
    }

    /**
     * PageState is an immutable class that defines page states.
     *
     * @author Herbert Baier
     * @version 1.0
     * @since 1.8
     */
    private class PageState {
        // ... unchanged ...
    }

    /**
     * ParserReport ins an immutable class that defines parser reports for workflow
     * configurations.
     *
     * @author Herbert Baier
     * @version 1.0
     * @since 1.8
     */
    private static class ParserReport {
        // ... unchanged ...
    }
}
</client_code>

 And here is the error message:
<error_message>
[ERROR] /OCR4all/src/main/java/de/uniwue/controller/BatchController.java:[96,65] cannot find symbol
  symbol:   variable ProjectFolder
  location: class de.uniwue.batch.BatchWorkflow

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/BatchController.java:[104,92] cannot find symbol
  symbol:   variable SOURCE_IMAGE_EXTENSION
  location: class de.uniwue.batch.BatchWorkflow

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/BatchController.java:[100,34] constructor ProjectOverview in class de.uniwue.controller.BatchController.ProjectOverview cannot be applied to given types;
  required: no arguments
  found: java.lang.String,java.lang.String
  reason: actual and formal argument lists differ in length

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/BatchController.java:[110,40] constructor PageState in class de.uniwue.controller.BatchController.PageState cannot be applied to given types;
  required: no arguments
  found: java.lang.String,boolean,boolean,boolean,boolean
  reason: actual and formal argument lists differ in length

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/BatchController.java:[105,23] cannot find symbol
  symbol:   method getPages()
  location: variable report of type de.uniwue.controller.BatchController.ProjectOverview

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/BatchController.java:[107,15] cannot find symbol
  symbol:   method getPages()
  location: variable report of type de.uniwue.controller.BatchController.ProjectOverview

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/BatchController.java:[109,34] cannot find symbol
  symbol:   method getPages()
  location: variable report of type de.uniwue.controller.BatchController.ProjectOverview


</error_message>

 Before proposing a fix, please analyze the error message and client code. Wrap your analysis inside <code_analysis> tags:

<code_analysis>
1. Examine the error message:
   - Identify the specific issue related to the dependency update.
   - Note the line number or method where the error occurs.
   - Determine which dependency and version is causing the issue.

2. Review the client code:
   - Locate the problematic areas mentioned in the error message.
   - Identify any related code that might be affected by the changes.

3. Consider potential fixes that adhere to the following constraints:
   - Do not change any function signatures.
   - Only remove the @Override annotation if the method no longer overrides a method in the updated dependency version.
   - Ensure correct imports are used, considering the newer dependency version.
   - Avoid removing existing code unless it directly causes a compilation or functionality error.

4. Plan the necessary changes to fix the issue:
   - List the specific modifications required.
   - Consider potential side effects of the proposed changes.
   - Ensure the fix addresses the root cause of the error.
</code_analysis>

Based on your analysis, propose a patch to fix the issue. Your response should be a complete and compilable Java class in a fenced code block. Adhere to these guidelines:

1. Do not change any function signatures.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Avoid removing any existing code unless it directly causes a compilation or functionality error.
6. Ensure the entire class is included and that it will compile correctly.

Please provide your fixed class in the following format:

```java
// Your complete, fixed Java class here
```

Remember to focus specifically on issues related to the dependency update when proposing your fix.
 