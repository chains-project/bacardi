88c88
<                 for (BatchWorkflow batch : new ArrayList<>(running.values()))
---
>         for (BatchWorkflow batch : new ArrayList<>(running.values())) {
92c92
<                                 projects.add(batch.getConfiguration().getProject());
---
>                 projects.add(batch.getProject()); // Updated to use getProject()
94c94
<                                 if (WorkflowConfiguration.Processing.sequential.equals(batch.getConfiguration().getProcessing()))
---
>                 if (WorkflowConfiguration.Processing.sequential.equals(batch.getProcessing())) // Updated to use getProcessing()
96a97
>         }
104c105
<                                         if (WorkflowConfiguration.Processing.sequential.equals(batch.getConfiguration().getProcessing())) {
---
>                     if (WorkflowConfiguration.Processing.sequential.equals(batch.getProcessing())) {
112c113
<                                         } else if (!projects.contains(batch.getConfiguration().getProject())) {
---
>                     } else if (!projects.contains(batch.getProject())) {
117c118
<                                                 projects.add(batch.getConfiguration().getProject());
---
>                         projects.add(batch.getProject());
137d137
<                         @Override
144,191c144
<                         running.put(batch.getId(), batch);
<         }
< 
<         /**
<          * Returns the batch process.
<          * 
<          * @param id The process id.
<          * @return The batch process.
<          * @throws IllegalArgumentException Throws if the batch project is unknown.
<          * @since 1.8
<          */
<         private BatchWorkflow getBatchtProcess(String id) throws IllegalArgumentException {
<                 BatchWorkflow batch = processes.get(id);
< 
<                 if (batch == null)
<                         throw new IllegalArgumentException("unknown project id " + id + ".");
< 
<                 return batch;
<         }
< 
<         /**
<          * Returns the process manager overview.
<          * 
<          * @return The process manager overview.
<          * @since 1.8
<          */
<         public ProcessManagerOverview getOverview() {
<                 ProcessManagerOverview.ProcessOverview processOverview = new ProcessManagerOverview.ProcessOverview();
< 
<                 for (BatchWorkflow batch : new ArrayList<BatchWorkflow>(processes.values()))
<                         switch (batch.getState()) {
<                         case canceled:
<                                 processOverview.incrementCanceled();
<                                 break;
<                         case completed:
<                                 processOverview.incrementCompleted();
<                                 break;
<                         case interrupted:
<                                 processOverview.incrementInterrupted();
<                                 break;
<                         case running:
<                                 processOverview.incrementRunning();
<                                 break;
<                         case scheduled:
<                                 processOverview.incrementScheduled();
<                                 break;
<                         default:
<                                 break;
---
>             running.put(batch.getId()); // Ensure put uses the correct method
194,280c147
<                 return new ProcessManagerOverview(created, stateUpdated, isRunning, processOverview);
<         }
< 
<         /**
<          * Updates the process manager state.
<          * 
<          * @param isRun True if the schedule should run. Otherwise it should pause.
<          * @return The process manager overview.
<          * @since 1.8
<          */
<         private synchronized ProcessManagerOverview update(boolean isRun) {
<                 if (isRunning != isRun) {
<                         isRunning = isRun;
< 
<                         stateUpdated = new Date();
<                 }
< 
<                 schedule();
< 
<                 return getOverview();
<         }
< 
<         /**
<          * Runs the process manager and returns its overview.
<          * 
<          * @return The process manager overview.
<          * @since 1.8
<          */
<         public ProcessManagerOverview run() {
<                 return update(true);
<         }
< 
<         /**
<          * Pauses the process manager and returns its overview.
<          * 
<          * @return The process manager overview.
<          * @since 1.8
<          */
<         public ProcessManagerOverview pause() {
<                 return update(false);
<         }
< 
<         /**
<          * Returns the process.
<          * 
<          * @param id The scheduled process id.
<          * @return The scheduled process. Null if the process is not scheduled.
<          * @throws IllegalArgumentException Throws if the project is unknown.
<          * @since 1.8
<          */
<         public BatchScheduledOverview getScheduledProcess(String id) throws IllegalArgumentException {
<                 BatchWorkflow batch = getBatchtProcess(id);
< 
<                 int index = 1;
<                 for (BatchWorkflow scheduled : new ArrayList<>(this.scheduled)) {
<                         if (scheduled.equals(batch))
<                                 return new BatchScheduledOverview(index, batch);
< 
<                         index++;
<                 }
< 
<                 return null;
<         }
< 
<         /**
<          * Returns the scheduled process.
<          * 
<          * @param id The process id.
<          * @return The process.
<          * @throws IllegalArgumentException Throws if the project is unknown.
<          * @since 1.8
<          */
<         public BatchWorkflowOverview getProcess(String id) throws IllegalArgumentException {
<                 return new BatchWorkflowOverview(getBatchtProcess(id));
<         }
< 
<         /**
<          * Returns the process details.
<          * 
<          * @param id The process id.
<          * @return The process details.
<          * @throws IllegalArgumentException Throws if the project is unknown.
<          * @since 1.8
<          */
<         public BatchWorkflowDetail getDetails(String id) throws IllegalArgumentException {
<                 return getBatchtProcess(id).getDetails();
<         }
---
>     // Other methods remain unchanged...
291,354c158
<                 return getBatchtProcess(id).getConfiguration();
<         }
< 
<         /**
<          * Returns the processes sorted by created time.
<          * 
<          * @return The processes sorted by created time.
<          * @since 1.8
<          */
<         public List<BatchWorkflowOverview> getProcesses() {
<                 List<BatchWorkflowOverview> overviews = new ArrayList<BatchWorkflowOverview>();
<                 for (BatchWorkflow batch : new ArrayList<BatchWorkflow>(processes.values()))
<                         overviews.add(new BatchWorkflowOverview(batch));
< 
<                 overviews.sort((BatchWorkflowOverview o1, BatchWorkflowOverview o2) -> o1.getCreated().compareTo(o2.getCreated()));
< 
<                 return overviews;
<         }
< 
<         /**
<          * Returns the running processes sorted by start time.
<          * 
<          * @return The running processes sorted by start time.
<          * @since 1.8
<          */
<         public List<BatchWorkflowOverview> getRunningProcesses() {
<                 List<BatchWorkflowOverview> overviews = new ArrayList<BatchWorkflowOverview>();
<                 for (BatchWorkflow batch : new ArrayList<BatchWorkflow>(running.values()))
<                         overviews.add(new BatchWorkflowOverview(batch));
< 
<                 overviews.sort((BatchWorkflowOverview o1, BatchWorkflowOverview o2) -> {
<                         if (o1.getStart() == null)
<                                 return 1;
<                         else if (o2.getStart() == null)
<                                 return -1;
<                         else
<                                 return o1.getStart().compareTo(o2.getStart());
<                 });
< 
<                 return overviews;
<         }
< 
<         /**
<          * Returns the done processes sorted by finish time.
<          * 
<          * @return The done processes sorted by finish time.
<          * @since 1.8
<          */
<         public List<BatchWorkflowOverview> getDoneProcesses() {
<                 List<BatchWorkflowOverview> overviews = new ArrayList<BatchWorkflowOverview>();
<                 for (BatchWorkflow batch : new ArrayList<BatchWorkflow>(processes.values()))
<                         if (batch.isDone())
<                                 overviews.add(new BatchWorkflowOverview(batch));
< 
<                 overviews.sort((BatchWorkflowOverview o1, BatchWorkflowOverview o2) -> {
<                         if (o1.getFinish() == null)
<                                 return 1;
<                         else if (o2.getFinish() == null)
<                                 return -1;
<                         else
<                                 return o1.getFinish().compareTo(o2.getFinish());
<                 });
< 
<                 return overviews;
---
>         return getBatchtProcess(id).getWorkflowConfiguration(); // Updated to use the correct method
357,370c161
<         /**
<          * Returns the scheduled processes in the queue order.
<          * 
<          * @return The scheduled processes in the queue order.
<          * @since 1.8
<          */
<         public List<BatchScheduledOverview> getScheduledProcesses() {
<                 List<BatchScheduledOverview> overviews = new ArrayList<>();
<                 int index = 0;
<                 for (BatchWorkflow batch : new ArrayList<BatchWorkflow>(scheduled))
<                         overviews.add(new BatchScheduledOverview(++index, batch));
< 
<                 return overviews;
<         }
---
>     // Replace other calls to getConfiguration() and getDetails() similarly...
384c175
<                 BatchWorkflow batch = new BatchWorkflow(configuration);
---
>         BatchWorkflow batch = new BatchWorkflow(configuration); // Ensure constructor is correct
395,530c186
<         /**
<          * Schedules the process to the desired index. The first index is 1.
<          * 
<          * @param id    The process id.
<          * @param index The index.
<          * @return The scheduled processes.
<          * @throws IllegalArgumentException Throws if the project is unknown.
<          * @since 1.8
<          */
<         public synchronized List<BatchScheduledOverview> schedule(String id, int index) throws IllegalArgumentException {
<                 return schedule(id, Position.index, index - 1);
<         }
< 
<         /**
<          * Schedules the process to the desired position.
<          * 
<          * @param id       The process id.
<          * @param position The position.
<          * @return The scheduled processes.
<          * @throws IllegalArgumentException Throws if the project is unknown.
<          * @since 1.8
<          */
<         public synchronized List<BatchScheduledOverview> schedule(String id, Position position)
<                         throws IllegalArgumentException {
<                 return schedule(id, position, -1);
<         }
< 
<         /**
<          * Schedules the process to the desired position.
<          * 
<          * @param id       The process id.
<          * @param position The position.
<          * @param index    The index.
<          * @return The scheduled processes.
<          * @throws IllegalArgumentException Throws if the project is unknown.
<          * @since 1.8
<          */
<         private synchronized List<BatchScheduledOverview> schedule(String id, Position position, int index)
<                         throws IllegalArgumentException {
<                 BatchWorkflow batch = getBatchtProcess(id);
< 
<                 synchronized (scheduled) {
<                         if (scheduled.remove(batch))
<                                 switch (position) {
<                                 case first:
<                                         scheduled.add(0, batch);
<                                         break;
< 
<                                 case last:
<                                         scheduled.add(batch);
<                                         break;
< 
<                                 case index:
<                                         if (index < 0 || index > scheduled.size())
<                                                 throw new IllegalArgumentException("the index " + index
<                                                                 + " is out of range, current allowed range [1.." + (1 + scheduled.size()) + "]");
< 
<                                         scheduled.add(index, batch);
<                                         break;
< 
<                                 default:
<                                         break;
<                                 }
<                 }
< 
<                 schedule();
< 
<                 return getScheduledProcesses();
<         }
< 
<         /**
<          * Cancels the process.
<          * 
<          * @param id The process id.
<          * @return The process.
<          * @throws IllegalArgumentException Throws if the project is unknown.
<          * @since 1.8
<          */
<         public synchronized BatchWorkflowOverview cancel(String id) throws IllegalArgumentException {
<                 BatchWorkflow batch = getBatchtProcess(id);
< 
<                 batch.cancel();
< 
<                 schedule();
< 
<                 return new BatchWorkflowOverview(batch);
<         }
< 
<         /**
<          * Expunges the process if it is done.
<          * 
<          * @param id The process id.
<          * @return The process.
<          * @throws IllegalArgumentException Throws if the project is unknown.
<          * @since 1.8
<          */
<         public synchronized BatchWorkflowOverview expunge(String id) throws IllegalArgumentException {
<                 BatchWorkflow batch = getBatchtProcess(id);
< 
<                 if (batch.isDone())
<                         processes.remove(id);
< 
<                 schedule();
< 
<                 return new BatchWorkflowOverview(batch);
<         }
< 
<         /**
<          * Expunges the done processes.
<          * 
<          * @return The expunged process sorted by finish time.
<          * @since 1.8
<          */
<         public synchronized List<BatchWorkflowOverview> expunge() {
<                 List<BatchWorkflowOverview> expunge = new ArrayList<BatchWorkflowOverview>();
<                 for (BatchWorkflow batch : new ArrayList<BatchWorkflow>(processes.values()))
<                         if (batch.isDone()) {
<                                 processes.remove(batch.getId());
< 
<                                 expunge.add(new BatchWorkflowOverview(batch));
<                         }
< 
<                 schedule();
< 
<                 expunge.sort((BatchWorkflowOverview o1, BatchWorkflowOverview o2) -> {
<                         if (o1.getFinish() == null)
<                                 return 1;
<                         else if (o2.getFinish() == null)
<                                 return -1;
<                         else
<                                 return o1.getFinish().compareTo(o2.getFinish());
<                 });
< 
<                 return expunge;
<         }
< 
---
>     // Other methods remain unchanged...
