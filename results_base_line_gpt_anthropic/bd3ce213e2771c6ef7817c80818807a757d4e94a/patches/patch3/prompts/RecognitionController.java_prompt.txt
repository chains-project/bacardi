 You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates.
Your task is to analyze the provided code and error message, then propose a patch that can be applied to the client code to resolve the issue.

 Here is the client code that is failing:
<client_code>
package de.uniwue.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.TreeMap;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import de.uniwue.helper.RecognitionHelper;

/**
 * Controller class for pages of recognition module
 * Use response.setStatus to trigger AJAX fail (and therefore show errors)
 */
@Controller
public class RecognitionController {
    /**
     * Manages the helper object and stores it in the session
     *
     * @param session Session of the user
     * @param response Response to the request
     * @return Returns the helper object of the process
     */
    public RecognitionHelper provideHelper(HttpSession session, HttpServletResponse response) {
        if (!GenericController.isSessionValid(session, response))
            return null;

        // Keep a single helper object in session
        RecognitionHelper recognitionHelper = (RecognitionHelper) session.getAttribute("recognitionHelper");
        if (recognitionHelper == null) {
            recognitionHelper = new RecognitionHelper(
                session.getAttribute("projectDir").toString(),
                session.getAttribute("imageType").toString()
            );
            session.setAttribute("recognitionHelper", recognitionHelper);
        }
        return recognitionHelper;
    }

    /**
     * Response to the request to send the content of the /Recognition page
     *
     * @param session Session of the user
     * @return Returns the content of the /Recognition page
     */
    @RequestMapping("/Recognition")
    public ModelAndView show(HttpSession session, HttpServletResponse response) {
        ModelAndView mv = new ModelAndView("recognition");

        RecognitionHelper recognitionHelper = provideHelper(session, response);
        if (recognitionHelper == null) {
            mv.addObject("error", "Session expired.\nPlease return to the Project Overview page.");
            return mv;
        }
        return mv;
    }

    /**
     * Response to the request to execute the recognition script
     *
     * @param pageIds Identifiers of the pages (e.g 0002,0003)
     * @param cmdArgs Command line arguments for the line segmentation process
     * @param session Session of the user
     * @param response Response to the request
     * @param inProcessFlow Indicates if the process is executed within the ProcessFlow
     */
    @RequestMapping(value = "/ajax/recognition/execute", method = RequestMethod.POST)
    public @ResponseBody void execute(
               @RequestParam("pageIds[]") String[] pageIds,
               @RequestParam(value = "cmdArgs[]", required = false) String[] cmdArgs,
               HttpSession session, HttpServletResponse response,
               @RequestParam(value = "inProcessFlow", required = false, defaultValue = "false") boolean inProcessFlow
           ) {
        RecognitionHelper recognitionHelper = provideHelper(session, response);
        if (recognitionHelper == null)
            return;
        List<String> cmdArgList = new ArrayList<String>();
        if (cmdArgs != null)
            cmdArgList = Arrays.asList(cmdArgs);

        int conflictType = recognitionHelper.getConflictType(GenericController.getProcessList(session), inProcessFlow);
        if (GenericController.hasProcessConflict(session, response, conflictType))
            return;

        GenericController.addToProcessList(session, "recognition");
        try {
            recognitionHelper.execute(Arrays.asList(pageIds), cmdArgList);
        } catch (IOException e) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            recognitionHelper.resetProgress();
            e.printStackTrace();
        }
        GenericController.removeFromProcessList(session, "recognition");
    }

    /**
     * Response to the request to return the output of the recognition process
     *
     * @param streamType Type of the console output (out | err)
     * @param session Session of the user
     * @param response Response to the request
     * @return Console output
     */
    @RequestMapping(value = "/ajax/recognition/console" , produces = "text/plain;charset=UTF-8", method = RequestMethod.GET)
    public @ResponseBody String console(
                @RequestParam("streamType") String streamType,
                HttpSession session, HttpServletResponse response
            ) {
        RecognitionHelper recognitionHelper = provideHelper(session, response);
        if (recognitionHelper == null)
            return "";
        // Updated to reflect changes in RecognitionHelper
        if (streamType.equals("err"))
            return recognitionHelper.getErrorOutput(); // Changed from getProcessHandler().getConsoleErr()
        return recognitionHelper.getOutput(); // Changed from getProcessHandler().getConsoleOut()
    }

    /**
     * Response to the request to cancel the recognition process
     *
     * @param session Session of the user
     * @param response Response to the request
     */
    @RequestMapping(value = "/ajax/recognition/cancel", method = RequestMethod.POST)
    public @ResponseBody void cancel(HttpSession session, HttpServletResponse response) {
        RecognitionHelper recognitionHelper = provideHelper(session, response);
        if (recognitionHelper == null)
            return;

        recognitionHelper.cancel(); // Changed from cancelProcess() to cancel()
    }

    /**
     * Response to the request to return the progress status of the recognition service
     *
     * @param session Session of the user
     * @param response Response to the request
     * @return Current progress (range: 0 - 100)
     */
    @RequestMapping(value = "/ajax/recognition/progress" , method = RequestMethod.GET)
    public @ResponseBody int progress(HttpSession session, HttpServletResponse response) {
        RecognitionHelper recognitionHelper = provideHelper(session, response);
        if (recognitionHelper == null)
            return -1;

        try {
            return recognitionHelper.getCurrentProgress(); // Changed from getProgress() to getCurrentProgress()
        } catch (IOException e) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            e.printStackTrace();
            return -1;
        }
    }

    /**
     * Response to the request to return all pageIds that can be used for recognition
     *
     * @param session Session of the user
     * @param response Response to the request
     * @return List of valid pageIds
     */
    @RequestMapping(value = "/ajax/recognition/getValidPageIds" , method = RequestMethod.GET)
    public @ResponseBody ArrayList<String> getIdsforRecognition(HttpSession session, HttpServletResponse response) {
        RecognitionHelper recognitionHelper = provideHelper(session, response);
        if (recognitionHelper == null)
            return null;

        try {
            return recognitionHelper.fetchValidPageIds(); // Changed from getValidPageIds() to fetchValidPageIds()
        } catch (IOException e) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Response to the request to check if old process related files exist
     *
     * @param pageIds Identifiers of the pages (e.g 0002,0003)
     * @param session Session of the user
     * @param response Response to the request
     * @return Information if files exist
     */
    @RequestMapping(value = "/ajax/recognition/exists" , method = RequestMethod.POST)
    public @ResponseBody boolean filesExists(
                @RequestParam("pageIds[]") String[] pageIds,
                HttpSession session, HttpServletResponse response
            ) {
        RecognitionHelper recognitionHelper = provideHelper(session, response);
        if (recognitionHelper == null)
            return false;

        return recognitionHelper.checkOldFilesExist(pageIds); // Changed from doOldFilesExist() to checkOldFilesExist()
    }

    /**
     * Response to list the models
     *
     * @param session Session of the user
     * @param response Response to the request
     */
    @RequestMapping(value ="/ajax/recognition/listModels" , method = RequestMethod.GET)
    public @ResponseBody TreeMap<String, String> listModels(HttpSession session, HttpServletResponse response) {
        try {
            return RecognitionHelper.fetchModels(); // Changed from listModels() to fetchModels()
        } catch (IOException e) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            e.printStackTrace();
            return null;
        }
    }
}
</client_code>

 And here is the error message:
<error_message>
[ERROR] /OCR4all/src/main/java/de/uniwue/controller/RecognitionController.java:[157,37] cannot find symbol
  symbol:   method getCurrentProgress()
  location: variable recognitionHelper of type de.uniwue.helper.RecognitionHelper

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/RecognitionController.java:[179,37] cannot find symbol
  symbol:   method fetchValidPageIds()
  location: variable recognitionHelper of type de.uniwue.helper.RecognitionHelper

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/RecognitionController.java:[204,33] cannot find symbol
  symbol:   method checkOldFilesExist(java.lang.String[])
  location: variable recognitionHelper of type de.uniwue.helper.RecognitionHelper

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/RecognitionController.java:[91,45] cannot find symbol
  symbol:   method getConflictType(java.util.List<java.lang.String>,boolean)
  location: variable recognitionHelper of type de.uniwue.helper.RecognitionHelper

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/RecognitionController.java:[140,26] cannot find symbol
  symbol:   method cancel()
  location: variable recognitionHelper of type de.uniwue.helper.RecognitionHelper

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/RecognitionController.java:[125,33] cannot find symbol
  symbol:   method getOutput()
  location: variable recognitionHelper of type de.uniwue.helper.RecognitionHelper

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/RecognitionController.java:[216,37] cannot find symbol
  symbol:   method fetchModels()
  location: class de.uniwue.helper.RecognitionHelper

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/RecognitionController.java:[100,30] cannot find symbol
  symbol:   method resetProgress()
  location: variable recognitionHelper of type de.uniwue.helper.RecognitionHelper

[ERROR] /OCR4all/src/main/java/de/uniwue/controller/RecognitionController.java:[124,37] cannot find symbol
  symbol:   method getErrorOutput()
  location: variable recognitionHelper of type de.uniwue.helper.RecognitionHelper


</error_message>

 Before proposing a fix, please analyze the error message and client code. Wrap your analysis inside <code_analysis> tags:

<code_analysis>
1. Examine the error message:
   - Identify the specific issue related to the dependency update.
   - Note the line number or method where the error occurs.
   - Determine which dependency and version is causing the issue.

2. Review the client code:
   - Locate the problematic areas mentioned in the error message.
   - Identify any related code that might be affected by the changes.

3. Consider potential fixes that adhere to the following constraints:
   - Do not change any function signatures.
   - Only remove the @Override annotation if the method no longer overrides a method in the updated dependency version.
   - Ensure correct imports are used, considering the newer dependency version.
   - Avoid removing existing code unless it directly causes a compilation or functionality error.

4. Plan the necessary changes to fix the issue:
   - List the specific modifications required.
   - Consider potential side effects of the proposed changes.
   - Ensure the fix addresses the root cause of the error.
</code_analysis>

Based on your analysis, propose a patch to fix the issue. Your response should be a complete and compilable Java class in a fenced code block. Adhere to these guidelines:

1. Do not change any function signatures.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Avoid removing any existing code unless it directly causes a compilation or functionality error.
6. Ensure the entire class is included and that it will compile correctly.

Please provide your fixed class in the following format:

```java
// Your complete, fixed Java class here
```

Remember to focus specifically on issues related to the dependency update when proposing your fix.
 