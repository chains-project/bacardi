 You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates.
Your task is to analyze the provided code and error message, then propose a patch that can be applied to the client code to resolve the issue.

 Here is the client code that is failing:
<client_code>
package com.oneandone.snmpman;

import com.google.common.primitives.UnsignedLong;
import com.oneandone.snmpman.configuration.AgentConfiguration;
import com.oneandone.snmpman.configuration.Device;
import com.oneandone.snmpman.configuration.modifier.CommunityContextModifier;
import com.oneandone.snmpman.configuration.modifier.ModifiedVariable;
import com.oneandone.snmpman.configuration.modifier.Modifier;
import com.oneandone.snmpman.configuration.modifier.VariableModifier;
import com.oneandone.snmpman.snmp.MOGroup;
import lombok.extern.slf4j.Slf4j;
import org.snmp4j.TransportMapping;
import org.snmp4j.agent.*;
import org.snmp4j.agent.io.ImportMode;
import org.snmp4j.agent.mo.ext.StaticMOGroup;
import org.snmp4j.agent.mo.snmp.*;
import org.snmp4j.agent.security.MutableVACM;
import org.snmp4j.mp.MPv3;
import org.snmp4j.security.SecurityLevel;
import org.snmp4j.security.SecurityModel;
import org.snmp4j.security.USM;
import org.snmp4j.smi.*;
import org.snmp4j.transport.TransportMappings;
import org.snmp4j.util.ThreadPool;

import java.io.*;
import java.lang.reflect.Field;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * This is the core class of the {@code Snmpman}. The agent simulates the SNMP-capable devices.
 * <br>
 * This class can be instantiated via the constructor {@link #SnmpmanAgent(com.oneandone.snmpman.configuration.AgentConfiguration)}, which
 * requires an instance of the {@link com.oneandone.snmpman.configuration.AgentConfiguration}.
 */
@Slf4j
public class SnmpmanAgent extends BaseAgent {

    /**
     * The default charset for files being read.
     */
    private static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");

    /**
     * The pattern of variable bindings in a walk file.
     */
    private static final Pattern VARIABLE_BINDING_PATTERN = Pattern.compile("(((iso)?\\.[0-9]+)+) = ((([a-zA-Z0-9-]+): (.*)$)|(\"\"$))");

    /**
     * The configuration of this agent.
     */
    private final AgentConfiguration configuration;

    /**
     * The list of managed object groups.
     */
    private final List<ManagedObject> groups = new ArrayList<>();

    /**
     * Initializes a new instance of an SNMP agent.
     *
     * @param configuration the configuration for this agent
     */
    public SnmpmanAgent(final AgentConfiguration configuration) {
        super(SnmpmanAgent.getBootCounterFile(configuration), SnmpmanAgent.getConfigurationFile(configuration), new CommandProcessor(new OctetString(MPv3.createLocalEngineID())));
        this.agent.setWorkerPool(ThreadPool.create("RequestPool", 3));
        this.configuration = configuration;
    }

    // Other methods remain unchanged...

    @Override
    protected void registerManagedObjects() {
        unregisterDefaultManagedObjects(null);
        unregisterDefaultManagedObjects(new OctetString());
        final List<Long> vlans = configuration.getDevice().getVlans();
        for (final Long vlan : vlans) {
            unregisterDefaultManagedObjects(new OctetString(String.valueOf(vlan)));
        }

        log.trace("registering managed objects for agent \"{}\"", configuration.getName());
        for (final Long vlan : vlans) {
            try (final FileInputStream fileInputStream = new FileInputStream(configuration.getWalk());
                 final BufferedReader reader = new BufferedReader(new InputStreamReader(fileInputStream, DEFAULT_CHARSET))) {

                Map<OID, Variable> bindings = readVariableBindings(reader);

                final SortedMap<OID, Variable> variableBindings = this.getVariableBindings(configuration.getDevice(), bindings, new OctetString(String.valueOf(vlan)));

                final OctetString context = new OctetString(String.valueOf(vlan));

                final List<OID> roots = SnmpmanAgent.getRoots(variableBindings);
                for (final OID root : roots) {
                    MOGroup group = createGroup(root, variableBindings);
                    final Iterable<VariableBinding> subtree = generateSubtreeBindings(variableBindings, root);
                    DefaultMOContextScope scope = new DefaultMOContextScope(context, root, true, root.nextPeer(), false);
                    ManagedObject<?> mo = server.lookup(new DefaultMOQuery(scope, false)); // Changed from ManagedObject to ManagedObject<?>
                    if (mo != null) {
                        for (final VariableBinding variableBinding : subtree) {
                            group = new MOGroup(variableBinding.getOid(), variableBinding.getOid(), variableBinding.getVariable());
                            scope = new DefaultMOContextScope(context, variableBinding.getOid(), true, variableBinding.getOid().nextPeer(), false);
                            mo = server.lookup(new DefaultMOQuery(scope, false)); // Changed from ManagedObject to ManagedObject<?>
                            if (mo != null) {
                                log.warn("could not register single OID at {} because ManagedObject {} is already registered.", variableBinding.getOid(), mo);
                            } else {
                                groups.add(group);
                                registerGroupAndContext(group, context);
                            }
                        }
                    } else {
                        groups.add(group);
                        registerGroupAndContext(group, context);
                    }
                }
            } catch (final FileNotFoundException e) {
                log.error("walk file {} not found", configuration.getWalk().getAbsolutePath());
            } catch (final IOException e) {
                log.error("could not read walk file " + configuration.getWalk().getAbsolutePath(), e);
            }
        }
        createAndRegisterDefaultContext();
    }

    // Remaining methods remain unchanged...

}
</client_code>

 And here is the error message:
<error_message>
[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[80,9] cannot find symbol
  symbol:   method unregisterDefaultManagedObjects(org.snmp4j.smi.OctetString)
  location: class com.oneandone.snmpman.SnmpmanAgent

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[100,63] cannot find symbol
  symbol:   method generateSubtreeBindings(java.util.SortedMap<org.snmp4j.smi.OID,org.snmp4j.smi.Variable>,org.snmp4j.smi.OID)
  location: class com.oneandone.snmpman.SnmpmanAgent

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[83,13] cannot find symbol
  symbol:   method unregisterDefaultManagedObjects(org.snmp4j.smi.OctetString)
  location: class com.oneandone.snmpman.SnmpmanAgent

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[99,37] cannot find symbol
  symbol:   method createGroup(org.snmp4j.smi.OID,java.util.SortedMap<org.snmp4j.smi.OID,org.snmp4j.smi.Variable>)
  location: class com.oneandone.snmpman.SnmpmanAgent

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[79,9] cannot find symbol
  symbol:   method unregisterDefaultManagedObjects(<nulltype>)
  location: class com.oneandone.snmpman.SnmpmanAgent

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[70,27] method getBootCounterFile in class org.snmp4j.agent.BaseAgent cannot be applied to given types;
  required: no arguments
  found: com.oneandone.snmpman.configuration.AgentConfiguration
  reason: actual and formal argument lists differ in length

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[117,25] cannot find symbol
  symbol:   method registerGroupAndContext(com.oneandone.snmpman.snmp.MOGroup,org.snmp4j.smi.OctetString)
  location: class com.oneandone.snmpman.SnmpmanAgent

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[91,47] cannot find symbol
  symbol:   method readVariableBindings(java.io.BufferedReader)
  location: class com.oneandone.snmpman.SnmpmanAgent

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[126,9] cannot find symbol
  symbol:   method createAndRegisterDefaultContext()
  location: class com.oneandone.snmpman.SnmpmanAgent

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[93,71] cannot find symbol
  symbol: method getVariableBindings(com.oneandone.snmpman.configuration.Device,java.util.Map<org.snmp4j.smi.OID,org.snmp4j.smi.Variable>,org.snmp4j.smi.OctetString)

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[97,53] cannot find symbol
  symbol:   method getRoots(java.util.SortedMap<org.snmp4j.smi.OID,org.snmp4j.smi.Variable>)
  location: class com.oneandone.snmpman.SnmpmanAgent

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[112,33] cannot find symbol
  symbol:   method registerGroupAndContext(com.oneandone.snmpman.snmp.MOGroup,org.snmp4j.smi.OctetString)
  location: class com.oneandone.snmpman.SnmpmanAgent

[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[42,8] com.oneandone.snmpman.SnmpmanAgent is not abstract and does not override abstract method addCommunities(org.snmp4j.agent.mo.snmp.SnmpCommunityMIB) in org.snmp4j.agent.BaseAgent


</error_message>

 Before proposing a fix, please analyze the error message and client code. Wrap your analysis inside <code_analysis> tags:

<code_analysis>
1. Examine the error message:
   - Identify the specific issue related to the dependency update.
   - Note the line number or method where the error occurs.
   - Determine which dependency and version is causing the issue.

2. Review the client code:
   - Locate the problematic areas mentioned in the error message.
   - Identify any related code that might be affected by the changes.

3. Consider potential fixes that adhere to the following constraints:
   - Do not change any function signatures.
   - Only remove the @Override annotation if the method no longer overrides a method in the updated dependency version.
   - Ensure correct imports are used, considering the newer dependency version.
   - Avoid removing existing code unless it directly causes a compilation or functionality error.

4. Plan the necessary changes to fix the issue:
   - List the specific modifications required.
   - Consider potential side effects of the proposed changes.
   - Ensure the fix addresses the root cause of the error.
</code_analysis>

Based on your analysis, propose a patch to fix the issue. Your response should be a complete and compilable Java class in a fenced code block. Adhere to these guidelines:

1. Do not change any function signatures.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Avoid removing any existing code unless it directly causes a compilation or functionality error.
6. Ensure the entire class is included and that it will compile correctly.

Please provide your fixed class in the following format:

```java
// Your complete, fixed Java class here
```

Remember to focus specifically on issues related to the dependency update when proposing your fix.
 