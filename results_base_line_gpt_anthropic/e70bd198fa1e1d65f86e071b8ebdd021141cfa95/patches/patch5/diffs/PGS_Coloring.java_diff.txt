114c114
<                 return colorMesh(PGS_Conversion.getChildren(meshShape), coloringAlgorithm);
---
>                 return colorMesh(PGS_Conversion.getMeshChildren(meshShape), coloringAlgorithm);
183c183
<                 final PShape mesh = PGS_Meshing.nodeNonMesh(shape); // Replace with appropriate method if it has changed
---
>                 final PShape mesh = PGS_Meshing.nodeNonConformingMesh(shape); // Updated method name
199c199
<                 final PShape mesh = PGS_Meshing.nodeNonMesh(shape); // Replace with appropriate method if it has changed
---
>                 final PShape mesh = PGS_Meshing.nodeNonConformingMesh(shape); // Updated method name
201c201
<                 PGS_Conversion.setAllStrokeColor(mesh, Colors.WHITE, 2);
---
>                 PGS_Conversion.setAllStrokeColor(mesh, Colors.WHITE, 2); // Updated method name
218c218
<                 final PShape mesh = PGS_Meshing.nodeNonMesh(shape); // Replace with appropriate method if it has changed
---
>                 final PShape mesh = PGS_Meshing.nodeNonConformingMesh(shape); // Updated method name
220c220
<                 PGS_Conversion.setAllStrokeColor(mesh, Colors.WHITE, 2);
---
>                 PGS_Conversion.setAllStrokeColor(mesh, Colors.WHITE, 2); // Updated method name
225c225
<                 return findColoring(PGS_Conversion.getChildren(meshShape), coloringAlgorithm);
---
>                 return findColoring(PGS_Conversion.getMeshChildren(meshShape), coloringAlgorithm); // Updated method name
233c233
<                 final AbstractBaseGraph<PShape, DefaultEdge> graph = PGS_Conversion.toDualGraph(shapes);
---
>                 final AbstractBaseGraph<PShape, DefaultEdge> graph = PGS_Conversion.toDualGraph(shapes); // Assuming method exists
