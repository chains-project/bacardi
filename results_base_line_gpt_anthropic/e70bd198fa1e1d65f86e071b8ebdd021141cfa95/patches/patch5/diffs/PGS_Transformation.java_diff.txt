3d2
< import static micycle.pgs.PGS_Conversion.fromPShape;
25c24
<  * of shapes only (and thereby leave vertex coordinates in-tact).
---
>  * of shapes only (and thereby leave vertex coordinates intact).
44c43
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
59c58
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
74c73
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
90c89
<                 Geometry geometry = fromPShape(shape);
---
>                 Geometry geometry = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
106c105
<                 Geometry geometry = fromPShape(shape);
---
>                 Geometry geometry = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
126c125
<                 Geometry geometry = fromPShape(shape);
---
>                 Geometry geometry = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
150c149
<                 Geometry geometry = fromPShape(shape);
---
>                 Geometry geometry = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
174c173
<                 Geometry geometry = fromPShape(shape);
---
>                 Geometry geometry = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
199c198
<                 Envelope e = fromPShape(shape).getEnvelopeInternal();
---
>                 Envelope e = PGS_Conversion.fromPShape(shape).getEnvelopeInternal(); // Changed to use the correct import
217,218c216,217
<                 final IndexedFacetDistance index = new IndexedFacetDistance(fromPShape(boundary));
<                 Geometry scaleShape = fromPShape(shape);
---
>                 final IndexedFacetDistance index = new IndexedFacetDistance(PGS_Conversion.fromPShape(boundary)); // Changed to use the correct import
>                 Geometry scaleShape = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
272c271
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
311c310
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
338c337
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
366c365
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
382c381
<                 final Geometry g = fromPShape(shape);
---
>                 final Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
401c400
<                 Polygon geom = (Polygon) fromPShape(shape);
---
>                 Polygon geom = (Polygon) PGS_Conversion.fromPShape(shape); // Changed to use the correct import
461,462c460,461
<                 final Geometry g1 = fromPShape(alignShape);
<                 final Geometry g2 = fromPShape(baseShape);
---
>                 final Geometry g1 = PGS_Conversion.fromPShape(alignShape); // Changed to use the correct import
>                 final Geometry g2 = PGS_Conversion.fromPShape(baseShape); // Changed to use the correct import
481c480
<                 double[] m = ProcrustesAlignment.transform((Polygon) fromPShape(sourceShapeT), (Polygon) fromPShape(transformShapeT));
---
>                 double[] m = ProcrustesAlignment.transform((Polygon) PGS_Conversion.fromPShape(sourceShapeT), (Polygon) PGS_Conversion.fromPShape(transformShapeT)); // Changed to use the correct import
495c494
<          * @param shape the shape to tranform/rotate
---
>          * @param shape the shape to transform/rotate
502c501
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
516c515
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
529c528
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
544c543
<                 return toPShape(t.transform(fromPShape(shape)));
---
>                 return toPShape(t.transform(PGS_Conversion.fromPShape(shape))); // Changed to use the correct import
554c553
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
569c568
<                 return toPShape(t.transform(fromPShape(shape)));
---
>                 return toPShape(t.transform(PGS_Conversion.fromPShape(shape))); // Changed to use the correct import
585c584
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = PGS_Conversion.fromPShape(shape); // Changed to use the correct import
