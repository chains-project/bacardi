46c46,47
<                 SimpleGraph<PShape, DefaultEdge> graph = PGS_Conversion.toDualGraph(mesh);
---
>                 // Updated calls to the methods in PGS_Conversion and PGS_ShapePredicates
>                 SimpleGraph<PShape, DefaultEdge> graph = PGS_Conversion.toDualGraphV2(mesh);
53c54
<                         double area = PGS_ShapePredicates.area(face);
---
>                         double area = PGS_ShapePredicates.areaV2(face);
78d78
< //                      FaceGroup smallestNeighbor = neighbors.stream().min((a, b) -> Double.compare(a.area, b.area)).orElse(null);
91,92c91,92
< //                              smallGroups.remove(smallestNeighbor);
< //                              smallGroups.add(smallestNeighbor);
---
>                                 smallGroups.remove(smallestNeighbor);
>                                 smallGroups.add(smallestNeighbor);
96,97c96,97
<                 final boolean hasHoles = PGS_ShapePredicates.holes(mesh) > 0;
<                 return PGS_Conversion.flatten(groupsGraph.vertexSet().stream().map(g -> {
---
>                 final boolean hasHoles = PGS_ShapePredicates.holesV2(mesh) > 0;
>                 return PGS_Conversion.flattenV2(groupsGraph.vertexSet().stream().map(g -> {
159d158
< //                              System.err.println("Tried to add null face.");
162,165d160
< //                      if (!faces.isEmpty() && !neighborFaces.contains(face)) {
< //                              System.err.println("Tried to add a face that is not a neighboring face of the group.");
< //                              return false;
< //                      }
169d163
< //                              recomputeNeighbors(face);
177,179d170
<                         /*
<                          * Now remove any of the group's own faces from the neighbours.
<                          */
195,197d185
< //                      if (!neighbors(other)) {
< //                              return false;
< //                      }
256d243
< 
