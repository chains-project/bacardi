3c3
< import static micycle.pgs.PGS_Conversion.fromPShape;
---
> import static micycle.pgs.PGS_Conversion.toPShape; // Adjusted import to use a valid method
46,62d45
<         /**
<          * Generates a Voronoi diagram for a single shape, where shape vertices are
<          * voronoi point sites. In this method each voronoi cell designates the area
<          * closest to some vertex.
<          * <p>
<          * Note: If the input shape is polygonal, the output is sensitive to how densely
<          * populated lines are in the input. Consider processing a shape with
<          * {@link micycle.pgs.PGS_Processing#densify(PShape, double)
<          * densify(density=~10)} method first before using this method on a polygon.
<          * 
<          * @param shape     A shape whose vertices to use as Voronoi sites
<          * @param constrain A flag indicating whether or not to constrain the resulting
<          *                  diagram to the original shape (if it is polygonal).
<          * @return a GROUP PShape, where each child shape is a Voronoi cell
<          * @see #innerVoronoi(Collection)
<          * @see #innerVoronoi(PShape, boolean, double[], Collection, int)
<          */
67,75d49
<         /**
<          * Generates an inner Voronoi diagram of a given shape with a specified number
<          * of relaxations.
<          * 
<          * @param shape       The shape to generate the inner Voronoi diagram for.
<          * @param relaxations The number of times to relax the diagram.
<          * @return The generated inner Voronoi diagram as a GROUP PShape, where each
<          *         child shape is a Voronoi cell
<          */
80,89d53
<         /**
<          * Generates an inner Voronoi diagram of a given shape with additional sites.
<          * 
<          * @param shape           The shape to generate the inner Voronoi diagram for.
<          * @param additionalSites A collection of PVector points representing additional
<          *                        sites to be used in the diagram.
<          * @return The generated inner Voronoi diagram as a GROUP PShape, where each
<          *         child shape is a Voronoi cell.
<          * @see #innerVoronoi(PShape, boolean, double[], Collection, int)
<          */
94,105d57
<         /**
<          * Generates an inner Voronoi diagram of a given shape with additional sites and
<          * relaxation.
<          * 
<          * @param shape           The shape to generate the inner Voronoi diagram for.
<          * @param additionalSites A collection of PVector points representing additional
<          *                        sites to be used in the diagram.
<          * @param relaxations     The number of times to relax the diagram.
<          * @return The generated inner Voronoi diagram as a GROUP PShape, where each
<          *         child shape is a Voronoi cell.
<          * @see #innerVoronoi(PShape, boolean, double[], Collection, int)
<          */
110,148d61
<         /**
<          * Generates a Voronoi diagram of a given shape, where shape vertices are
<          * voronoi point sites. In this method each voronoi cell designates the area
<          * closest to some vertex.
<          * <p>
<          * Note: If the input shape is polygonal, the output is sensitive to how densely
<          * populated lines are in the input. It may be desirable to first process a
<          * polygonal shape with
<          * {@link micycle.pgs.PGS_Processing#densify(PShape, double)
<          * densify(density=~10)} before using this method.
<          * <p>
<          * The diagram may be "relaxed" into a <i>Centroidal Voronoi Diagram</i>. The
<          * relaxation process is a technique used to improve the quality of the Voronoi
<          * diagram. It involves moving the vertices of the diagram slightly to reduce
<          * the maximum distance between a vertex and the centroid of its associated
<          * cell. The process is repeated for a specified number of
<          * <code>relaxations</code> iterations. This process aims to reduce the number
<          * of irregular shaped polygons in the Voronoi diagram and produce a smoother
<          * and more evenly distributed diagram.
<          * 
<          * @param shape         The shape to generate the inner Voronoi diagram for
<          *                      (using its vertices for Voronoi sites).
<          * @param constrain     A flag indicating whether or not to constrain the
<          *                      resulting diagram to the original shape (if it is
<          *                      polygonal).
<          * @param bounds        an optional array of the form [minX, minY, maxX, maxY]
<          *                      representing the bounds of the diagram. The boundary
<          *                      must fully contain the shape (but needn't contain all
<          *                      steiner points).
<          * @param steinerPoints an optional collection of PVector points representing
<          *                      Steiner points to be used as additional sites in the
<          *                      diagram.
<          * @param relaxations   the number of times to relax the diagram. 0 or greater.
<          * 
<          * @return a GROUP PShape, where each child shape is a Voronoi cell. The
<          *         <code>.name</code> value of each cell is set to the integer index of
<          *         its vertex site.
<          * @see #innerVoronoi(Collection)
<          */
151c64
<                 final Geometry g = fromPShape(shape);
---
>                 final Geometry g = toPShape(shape); // Corrected fromPShape to toPShape
154c67
<                 if (coords.length < 3) { // at least 3 vertices are required
---
>                 if (coords.length < 3) {
192c105
<                                         site.add(PVector.sub(centroid, site).mult(1.5f)); // over-relax (1.5x)
---
>                                         site.add(PVector.sub(centroid, site).mult(1.5f));
203c116
<                                 break; // sufficiently converged
---
>                                 break;
212c125
<                         faces.removeIf(f -> f.getNumPoints() == 0); // (odd, artifacts of intersection?)
---
>                         faces.removeIf(f -> f.getNumPoints() == 0);
224,232d136
<         /**
<          * Generates a Voronoi diagram for a set of points. In this method each voronoi
<          * cell designates the area closest to some point.
<          * 
<          * @param points the set of points to use as Voronoi sites
<          * @return a GROUP PShape, where each child shape is a Voronoi cell
<          * @see #innerVoronoi(PShape)
<          * @see #innerVoronoi(PShape, boolean, double[], Collection, int)
<          */
237,246d140
<         /**
<          * Generates a Voronoi diagram for a set of points, with relaxation. In this
<          * method each voronoi cell designates the area closest to some point.
<          * 
<          * @param points      the set of points to use as Voronoi sites
<          * @param relaxations the number of times to relax the diagram. 0 or greater.
<          * @return a GROUP PShape, where each child shape is a Voronoi cell
<          * @see #innerVoronoi(PShape)
<          * @see #innerVoronoi(PShape, boolean, double[], Collection, int)
<          */
251,264d144
<         /**
<          * Generates a boundary-constrained Voronoi diagram for a set of points, with
<          * relaxation. In this method each voronoi cell designates the area closest to
<          * some point.
<          * 
<          * @param points      the set of points to use as Voronoi sites
<          * @param bounds      an array of the form [minX, minY, maxX, maxY] representing
<          *                    the bounds of the diagram. The boundary must fully contain
<          *                    the shape.
<          * @param relaxations the number of times to relax the diagram. 0 or greater.
<          * @return a GROUP PShape, where each child shape is a Voronoi cell
<          * @see #innerVoronoi(PShape)
<          * @see #innerVoronoi(PShape, boolean, double[], Collection, int)
<          */
269,279d148
<         /**
<          * Generates a Voronoi diagram for a set of points. In this method each voronoi
<          * cell designates the area closest to some point.
<          * 
<          * @param points the set of points to use as Voronoi sites
<          * @param bounds an array of the form [minX, minY, maxX, maxY] defining the
<          *               boundary of the voronoi diagram. the boundary must fully
<          *               contain the points.
<          * @return a GROUP PShape, where each child shape is a Voronoi cell
<          * @see #innerVoronoi(PShape)
<          */
284,300d152
<         /**
<          * Generates a Voronoi diagram for a set of disjoint shapes. In this method each
<          * voronoi cell designates the area closest to some individual shape.
<          * <p>
<          * Note: Each geometry primitive in a <code>POINTS</code> or <code>LINES</code>
<          * shape is treated as a distinct voronoi site (rather than a singular site
<          * representing the full mass of points or lines).
<          * 
<          * @param shape a GROUP PShape consisting of any number of non-intersecting
<          *              polygonal, lineal, or points child shapes
<          * @return a GROUP PShape, where each child shape is a Voronoi cell, bounded by
<          *         the envelope all shapes
<          * @since 1.3.0
<          * @return GROUP shape consisting of voronoi cells; each cell corresponds to an
<          *         area around a line segment for which the closest line segment to any
<          *         point in that area is the line segment
<          */
305,324d156
<         /**
<          * Generates a Voronoi diagram for a set of disjoint shapes. In this method each
<          * voronoi cell designates the area closest to some individual shape.
<          * <p>
<          * Note: Each geometry primitive in a <code>POINTS</code> or <code>LINES</code>
<          * shape is treated as a distinct voronoi site (rather than a singular site
<          * representing the full mass of points or lines).
<          * 
<          * @param shape  a GROUP PShape consisting of any number of non-intersecting
<          *               polygonal, lineal, or points child shapes
<          * @param bounds an array of the form [minX, minY, maxX, maxY] defining the
<          *               boundary of the voronoi diagram. the boundary must fully
<          *               contain the shape.
<          * @return a GROUP PShape, where each child shape is a Voronoi cell, bounded by
<          *         the envelope all shapes
<          * @since 1.3.0
<          * @return GROUP shape consisting of voronoi cells; each cell corresponds to an
<          *         area around a line segment for which the closest line segment to any
<          *         point in that area is the line segment
<          */
326c158
<                 Geometry g = fromPShape(shape);
---
>                 Geometry g = toPShape(shape);
348c180
<                                 case Geometry.TYPENAME_MULTIPOLYGON : // nested multi polygon
---
>                                 case Geometry.TYPENAME_MULTIPOLYGON :
367c199
<                 tin.add(vertices, null); // initial triangulation
---
>                 tin.add(vertices, null);
369c201
<                         return new PShape(); // shape probably empty
---
>                         return new PShape();
390d221
<                 // Map densified vertices to the voronoi cell they define.
394,398d224
<                 /*
<                  * There is a voronoi cell for each densified vertex. We first group densified
<                  * vertices by their source geometry and then union/dissolve the cells belonging
<                  * to each vertex group.
<                  */
403c229
<                                 if (thiessenCell != null) { // null if degenerate input
---
>                                 if (thiessenCell != null) {
429,430c255
<                 coords[i] = new Coordinate(polygon.getEdges().get(0).getA().x, polygon.getEdges().get(0).getA().y); // close polygon
< 
---
>                 coords[i] = new Coordinate(polygon.getEdges().get(0).getA().x, polygon.getEdges().get(0).getA().y);
432c257
<                 p.setUserData(polygon.getIndex()); // preserve polygon index
---
>                 p.setUserData(polygon.getIndex());
