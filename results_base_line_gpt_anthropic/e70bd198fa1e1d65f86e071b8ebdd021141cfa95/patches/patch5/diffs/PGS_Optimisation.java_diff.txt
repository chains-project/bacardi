3,4d2
< import static micycle.pgs.PGS_Conversion.fromPShape;
< import static micycle.pgs.PGS_Conversion.toPShape;
14d11
< import org.locationtech.jts.algorithm.MinimumAreaRectangle;
16,19d12
< import org.locationtech.jts.algorithm.MinimumDiameter;
< import org.locationtech.jts.algorithm.construct.LargestEmptyCircle;
< import org.locationtech.jts.algorithm.construct.MaximumInscribedCircle;
< import org.locationtech.jts.algorithm.locate.IndexedPointInAreaLocator;
21,22d13
< import org.locationtech.jts.geom.CoordinateList;
< import org.locationtech.jts.geom.Envelope;
25d15
< import org.locationtech.jts.geom.Location;
27d16
< import org.locationtech.jts.geom.Polygon;
30d18
< import org.locationtech.jts.util.GeometricShapeFactory;
32,33d19
< import almadina.rectpacking.RBPSolution;
< import almadina.rectpacking.Rect;
36,39d21
< import micycle.pgs.commons.ClosestPointPair;
< import micycle.pgs.commons.FarthestPointPair;
< import micycle.pgs.commons.LargestEmptyCircles;
< import micycle.pgs.commons.MaximumInscribedAARectangle;
42d23
< import micycle.pgs.commons.MinimumBoundingTriangle;
47d27
< import whitegreen.dalsoo.DalsooPack;
93d72
<         // same as 'Simple Methods to Represent Shapes with Sample Spheres'
96c75
<         points.addAll(PGS_Conversion.toPVector(shape)); // incl. shape vertices
---
>         points.addAll(PGS_Conversion.toPVectorList(shape)); // Updated method to retrieve PVector list
101,102c80
<         // This could be a simple heuristic or an alternative library function
<         PGS_PointSet.cluster(points, n, seed).forEach(group -> { // Update to use the new method
---
>         PGS_PointSet.clusterPoints(points, n, seed).forEach(group -> { // Updated method name
129c107
<         PGS_Conversion.getChildren(mesh).forEach(child -> {
---
>         PGS_Conversion.getChildrenList(mesh).forEach(child -> { // Updated method to retrieve children list
135c113
<         return PGS_Conversion.flatten(PGS_PointSet.hilbertSort(points).stream().map(map::get).collect(Collectors.toList())); // Update to use the new method
---
>         return PGS_Conversion.flatten(PGS_PointSet.sortHilbert(points).stream().map(map::get).collect(Collectors.toList())); // Updated method name
