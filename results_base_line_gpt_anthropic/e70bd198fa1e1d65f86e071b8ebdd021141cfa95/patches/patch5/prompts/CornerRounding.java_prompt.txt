 You are an Automatic Program Repair (APR) tool specialized in fixing Java code issues caused by breaking dependency updates.
Your task is to analyze the provided code and error message, then propose a patch that can be applied to the client code to resolve the issue.

 Here is the client code that is failing:
<client_code>
package micycle.pgs.commons;

import java.util.List;

import micycle.pgs.PGS_Conversion;
import micycle.pgs.color.Colors;
import processing.core.PApplet;
import processing.core.PConstants;
import processing.core.PShape;
import processing.core.PVector;

/**
 * Corner rounding for PShape polygons. Replaces corners with arcs.
 * 
 * @author Michael Carleton
 *
 */
public final class CornerRounding {

	// Inspired by https://observablehq.com/@daformat/rounding-polygon-corners

	private CornerRounding() {
	}

	/**
	 * 
	 * @param shape
	 * @param extent 0...1
	 * @return
	 */
	public static PShape round(PShape shape, double extent) {
		if (shape.getChildCount() > 1) {
			PShape groupRound = new PShape(PConstants.GROUP);
			for (PShape child : shape.getChildren()) {
				groupRound.addChild(roundPolygon(child, extent));
			}
			return groupRound;
		}
		else {
			return roundPolygon(shape, extent);			
		}
	}
	
	private static PShape roundPolygon(PShape shape, double extent) {
		PShape rounded = new PShape(PShape.GEOMETRY);
		PGS_Conversion.setAllFillColor(rounded, Colors.PINK);
		rounded.beginShape();

		final List<PVector> l = PGS_Conversion.toPVector(shape);
		final int size = l.size();
		for (int i = 0; i < l.size(); i++) {
			final PVector p1 = l.get(Math.floorMod(i - 1, size));
			final PVector p2 = l.get(i);
			final PVector p3 = l.get((i + 1) % size);
			roundCorner(p1, p2, p3, extent, rounded);
		}
		rounded.endShape(PConstants.CLOSE);
		return rounded;
	}

	/**
	 * Round a triplet of points.
	 * 
	 * @param a
	 * @param b      middle/enclosed point
	 * @param c
	 * @param extent
	 * @param shape
	 */
	private static void roundCorner(PVector a, PVector b, PVector c, double extent, PShape shape) {
		if (clockwise(a, b, c)) {
			PVector temp = a;
			a = c;
			c = temp;
		}

		// line vectors
		PVector ab = PVector.sub(a, b);
		PVector cb = PVector.sub(c, b);

		float theta = PApplet.acos(ab.dot(cb) / (ab.mag() * cb.mag())); // same as a.angleBetween(a, c)

//		final float maxRadius = PApplet.min(ab.div(2).mag(), cb.div(2).mag());
//		extent = extent * maxRadius;
		final float extentF = (float) extent;

		final PVector A = PVector.add(b, ab.mult(extentF / ab.mag())); // where circle touches AB
		final PVector C = PVector.add(b, cb.mult(extentF / cb.mag())); // where circle touches CB

		PVector vBC = PVector.sub(C, b);

		final float lengthBC = vBC.mag();
		final float lengthBD = PApplet.cos(theta / 2); // length
		final float lengthFD = PApplet.sin(theta / 2) * lengthBD; // length
		final float lengthBF = lengthBD * lengthBD; // length
		final float r = lengthFD / (lengthBF / lengthBC); // radius of circle
		PVector tangent = ab.normalize().rotate(PConstants.HALF_PI).mult(r); // tangent to ab
		tangent.add(A); // find tangent to ab at point A -- this is circle center

		shape.vertex(C.x, C.y);
		final float a1 = angleBetween(C, tangent);
		final float a2 = angleBetween(A, tangent);
		sampleArc(tangent, r, a1, a2, shape);
		shape.vertex(A.x, A.y);
	}

	/**
	 * Sub-sample an arc into invididual vertices.
	 * 
	 * @param center
	 * @param r          arc radius
	 * @param startAngle
	 * @param endAngle
	 * @param shape
	 */
	private static void sampleArc(PVector center, float r, float startAngle, float endAngle, PShape shape) {
		if (startAngle > endAngle) {
			startAngle -= PConstants.TWO_PI;
		}
		final float n = 4; // every n degrees // TODO magic constant
		final float angleInc = (endAngle - startAngle) / (360 / n);
		float angle = startAngle;
		while (angle < endAngle) {
			shape.vertex(r * PApplet.cos(angle) + center.x, center.y + r * PApplet.sin(angle));
			angle += angleInc;
		}
	}

	/**
	 * Are the three given points in clockwise order?
	 * 
	 * @param p1
	 * @param p2 middle point
	 * @param p3
	 * @return true if the points consitute a "right turn" or clockwise orientation
	 */
	private static boolean clockwise(PVector p1, PVector p2, PVector p3) {
		float val = (p2.y - p1.y) * (p3.x - p2.x) - (p2.x - p1.x) * (p3.y - p2.y);
		return val < 0;
	}

	/**
	 * East = 0; North = -1/2PI; West = -PI; South = -3/2PI | 1/2PI
	 * 
	 * @param tail PVector Coordinate 1.
	 * @param head PVector Coordinate 2.
	 * @return float Î¸ in radians.
	 */
	private static float angleBetween(PVector tail, PVector head) {
		float a = FastAtan2.atan2(tail.y - head.y, tail.x - head.x);
		if (a < 0) {
			a += PConstants.TWO_PI;
		}
		return a;
	}

}

</client_code>

 And here is the error message:
<error_message>
[ERROR] /PGS/src/main/java/micycle/pgs/commons/CornerRounding.java:[49,55] cannot find symbol
  symbol:   method toPVector(processing.core.PShape)
  location: class micycle.pgs.PGS_Conversion

[ERROR] /PGS/src/main/java/micycle/pgs/commons/CornerRounding.java:[46,31] cannot find symbol
  symbol:   method setAllFillColor(processing.core.PShape,int)
  location: class micycle.pgs.PGS_Conversion


</error_message>

 Before proposing a fix, please analyze the error message and client code. Wrap your analysis inside <code_analysis> tags:

<code_analysis>
1. Examine the error message:
   - Identify the specific issue related to the dependency update.
   - Note the line number or method where the error occurs.
   - Determine which dependency and version is causing the issue.

2. Review the client code:
   - Locate the problematic areas mentioned in the error message.
   - Identify any related code that might be affected by the changes.

3. Consider potential fixes that adhere to the following constraints:
   - Do not change any function signatures.
   - Only remove the @Override annotation if the method no longer overrides a method in the updated dependency version.
   - Ensure correct imports are used, considering the newer dependency version.
   - Avoid removing existing code unless it directly causes a compilation or functionality error.

4. Plan the necessary changes to fix the issue:
   - List the specific modifications required.
   - Consider potential side effects of the proposed changes.
   - Ensure the fix addresses the root cause of the error.
</code_analysis>

Based on your analysis, propose a patch to fix the issue. Your response should be a complete and compilable Java class in a fenced code block. Adhere to these guidelines:

1. Do not change any function signatures.
2. You may create variables if it simplifies the code.
3. Remove the @Override annotation only if the method no longer overrides a method in the updated dependency version.
4. If fixing the issue requires addressing missing imports, ensure the correct package or class is used in accordance with the newer dependency version.
5. Avoid removing any existing code unless it directly causes a compilation or functionality error.
6. Ensure the entire class is included and that it will compile correctly.

Please provide your fixed class in the following format:

```java
// Your complete, fixed Java class here
```

Remember to focus specifically on issues related to the dependency update when proposing your fix.
 