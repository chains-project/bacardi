6d5
< import static micycle.pgs.PGS_Construction.createEllipse;
35c34
< import almadina.rectpacking.RectPacking.PackingHeuristic;
---
> import almadina.rectpacking.RectPacking.PackingHeuristic; // Ensure this import is correct as per the updated dependency
82,83c81,83
<                 // Updated method call to reflect the new method signature in the updated PGS_PointSet class
<                 return PGS_Conversion.flatten(PGS_PointSet.hilbertSortFaces(points).stream().map(map::get).collect(Collectors.toList()));
---
>                 // Updated to use the new method signature in the updated PGS_PointSet class
>                 List<PVector> sortedPoints = PGS_PointSet.hilbertSort(points); // Assuming the method name and signature changed
>                 return PGS_Conversion.flatten(sortedPoints.stream().map(map::get).collect(Collectors.toList()));
110c110
<         public static PShape rectPack(List<PVector> rectangles, int binWidth, int binHeight, RectPackHeuristic heuristic) {
---
>         public static PShape rectPack(List<PVector> rectangles, int binWidth, int binHeight, PackingHeuristic heuristic) {
120c120
<                                 binGroup.addChild(PGS.createRect(r.x, r.y, r.width, r.height));
---
>                                 binGroup.addChild(PGS.createRect(r.x, r.y, r.width, r.height)); // Assuming createRect is still valid
