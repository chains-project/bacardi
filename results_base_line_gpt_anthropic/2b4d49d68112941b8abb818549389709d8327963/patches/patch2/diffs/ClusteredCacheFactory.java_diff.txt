137,140d136
<     /**
<      * Keep serialization strategy the server was using before we set our strategy. We will
<      * restore old strategy when plugin is unloaded.
<      */
142,145d137
< 
<     /**
<      * Storage for cache statistics
<      */
147d138
< 
149c140
<     private static Cluster cluster = null;
---
>     private static com.hazelcast.core.Cluster cluster = null; // Update to use hazelcast's Cluster type
154,156d144
<     /**
<      * Keeps that running state. Initial state is stopped.
<      */
158,161d145
< 
<     /**
<      * Used to limit the amount of duplicate warnings logged.
<      */
166c150
<         pluginClassLoaderWarnings.setMaxLifetime(Duration.ofHours(1).toMillis()); // Minimum duration between logged warnings.
---
>         pluginClassLoaderWarnings.setMaxLifetime(Duration.ofHours(1).toMillis());
174d157
<         // Set the serialization strategy to use for transmitting objects between node clusters
178d160
<         // Store previous class loader (in case we change it)
205d186
<                 // CacheFactory is now using clustered caches. We can add our listeners.
230d210
<             // Restore previous class loader
238d217
<         // Stop the cache services.
240d218
<         // Update the running state of the cluster
242,244d219
< 
<         // Fire the leftClusterEvent before we leave the cluster - we need to access the clustered data before the
<         // cluster is shutdown so it can be copied in to the non-clustered, DefaultCache
246d220
<         // Stop the cluster
255d228
<         // Reset packet router to use to deliver packets to remote cluster nodes
257d229
<         // Reset the session locator to use
259d230
<         // Set the old serialization strategy was using before clustering was loaded
265d235
<         // Check if cluster is being started up
267d236
<             // Wait until cluster is fully started (or failed)
277d245
<         // Determine the time to live. Note that in Hazelcast 0 means "forever", not -1
280d247
<         // Determine the max cache size. Note that in Hazelcast the max cache size must be positive and is in megabytes
283d249
<         // It's only possible to create a dynamic config if a static one doesn't already exist
294d259
<         // TODO: Better genericize this method in CacheFactoryStrategy so we can stop suppressing this warning
324d288
<         // No longer depends on license code so just return a big number
347,353d310
<     /**
<      * Gets the pseudo-synchronized time from the cluster. While the cluster members may
<      * have varying system times, this method is expected to return a timestamp that is
<      * synchronized (or nearly so; best effort) across the cluster.
<      *
<      * @return Synchronized time for all cluster members
<      */
359,363d315
<     /*
<      * Execute the given task on the other (non-local) cluster members.
<      * Note that this method does not provide the result set for the given
<      * task, as the task is run asynchronously across the cluster.
<      */
366d317
< 
378d328
< 
380d329
<             // Asynchronously execute the task on the other cluster members
389,393d337
<     /*
<      * Execute the given task on the given cluster member.
<      * Note that this method does not provide the result set for the given
<      * task, as the task is run asynchronously across the cluster.
<      */
400d343
<         // Check that the requested member was found
402d344
<             // Asynchronously execute the task on the target member
413,417d354
<     /*
<      * Execute the given task on the designated cluster members.
<      * Note that this method blocks for up to MAX_CLUSTER_EXECUTION_TIME
<      * (seconds) per member until the task is run on all members.
<      */
432d368
<             // Asynchronously execute the task on the other cluster members
454,458d389
<     /*
<      * Execute the given task on the designated cluster member.
<      * Note that this method blocks for up to MAX_CLUSTER_EXECUTION_TIME
<      * (seconds) until the task is run on the given member.
<      */
466d396
<         // Check that the requested member was found
468d397
<             // Asynchronously execute the task on the target member
514d442
<             // Create the cacheStats map if necessary.
522,524d449
<                 // The following information is published:
<                 // current size, max size, num elements, cache
<                 // hits, cache misses.
533d457
<             // Publish message
548d471
<         // TODO: Update CacheFactoryStrategy so the signature is getLock(final Serializable key, Cache<Serializable, Serializable> cache)
553,561d475
<     /**
<      * ClusterTasks that are executed should not be provided by a plugin. These will cause issues related to class
<      * loading when the providing plugin is reloaded. This method verifies if an instance of a task is
<      * loaded by a plugin class loader, and logs a warning to the log files when it is. The amount of warnings logged is
<      * limited by a time interval.
<      *
<      * @param o the instance for which to verify the class loader
<      * @see <a href="https://github.com/igniterealtime/openfire-hazelcast-plugin/issues/74">Issue #74: Warn against usage of plugin-provided classes in Hazelcast</a>
<      */
566d479
<             // Try to determine what plugin loaded the offending class.
583c496
<             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now()); // Note that this Instant is unused.
---
>             pluginClassLoaderWarnings.put(o.getClass().getName(), Instant.now());
684,685d596
<             // Add a listener at the ultimate end of the list of all listeners, to detect that left-cluster event handling
<             // has been invoked for all before proceeding.
699d609
< 
