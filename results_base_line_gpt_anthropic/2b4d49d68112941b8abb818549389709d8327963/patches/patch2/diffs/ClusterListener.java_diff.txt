22,24c22,25
< import com.hazelcast.lifecycle.LifecycleEvent;
< import com.hazelcast.lifecycle.LifecycleListener;
< import com.hazelcast.cluster.MemberAttributeEvent;
---
> import com.hazelcast.lifecycle.LifecycleEvent; // Ensure the correct import for LifecycleEvent
> import com.hazelcast.lifecycle.LifecycleListener; // Ensure the correct import for LifecycleListener
> import com.hazelcast.cluster.MemberAttributeEvent; // Ensure the correct import for MemberAttributeEvent
> import com.hazelcast.core.EntryListener; // Ensure the correct import for EntryListener
61,65d61
<     /**
<      * Flag that indicates if the listener has done all clean up work when noticed that the
<      * cluster has been stopped. This will force Openfire to wait until all clean
<      * up (e.g. changing caches implementations) is done before destroying the plugin.
<      */
67,69d62
<     /**
<      * Flag that indicates if we've joined a cluster or not
<      */
74d66
< 
87d78
<                 // Keep track of the listener that we added to the cache
99c90
<         if (!isDone()) { // already joined
---
>         if (!isDone()) {
103d93
<         // Trigger events
115d104
<         // Let the other nodes know that we joined the cluster
125d113
<         // first cluster member is the oldest
131c119
<         if (isDone()) { // not a cluster member
---
>         if (isDone()) {
138,139d125
<         // Trigger event. Wait until the listeners have processed the event. Caches will be populated
<         // again with local content.
143,144d128
<             // Remove traces of directed presences sent from local entities to handlers that no longer exist
<             // At this point c2s sessions are gone from the routing table so we can identify expired sessions
158d141
<         // local member only
160c143
<         if (event.getMember().localMember()) { // We left and re-joined the cluster
---
>         if (event.getMember().localMember()) {
162d144
< 
171c153
<                     logger.debug("Postponing notification of other nodes for 30 seconds. This allows all local leave/join processing to be finished and local cache backups to be stabilized before receiving events from other nodes.");
---
>                     logger.debug("Postponing notification of other nodes for 30 seconds.");
177,179d158
<                 // The following line was intended to wait until all local handling finishes before informing other
<                 // nodes. However that proved to be insufficient. Hence the 30 second default wait in the lines above.
<                 // TODO Instead of the 30 second wait, we should look (and then wait) for some trigger or event that signifies that local handling has completed and caches have stabilized.
182d160
<                 // Let the other nodes know that we joined the cluster
187,188c165
<         clusterNodesInfo.put(nodeID,
<                 new HazelcastClusterNodeInfo(event.getMember(), cluster.getClusterTime()));
---
>         clusterNodesInfo.put(nodeID, new HazelcastClusterNodeInfo(event.getMember(), cluster.getClusterTime()));
191,200d167
<     /**
<      * Blocks the current thread until the cluster cache is guaranteed to support clustering. This is especially useful
<      * for executing cluster tasks immediately after joining. If this wait is not performed, the cache factory may still
<      * be using the 'default' strategy instead of the 'hazelcast' strategy, which leads to cluster tasks being silently
<      * discarded.
<      *
<      * The method will keep trying this for 10 minutes. After that the thread is released regardless of the result.
<      *
<      * @return Boolean indicating whether the clustered cache was actually observed to be installed.
<      */
204c171
<             logger.debug("This node now joined a cluster, but the cache factory has not been swapped to '{}' yet. Waiting for that to happen.", ClusteredCacheFactory.PLUGIN_NAME);
---
>             logger.debug("This node now joined a cluster, but the cache factory has not been swapped to '{}' yet.", ClusteredCacheFactory.PLUGIN_NAME);
217c184
<                 logger.warn("Cache factory was not swapped to '{}', but still remains '{}' after a 10 minute wait. Cluster join is not guaranteed to have completed.", ClusteredCacheFactory.PLUGIN_NAME, CacheFactory.getPluginName());
---
>                 logger.warn("Cache factory was not swapped to '{}', but still remains '{}' after a 10 minute wait.", ClusteredCacheFactory.PLUGIN_NAME, CacheFactory.getPluginName());
234d200
<             // This node may have realized that it got kicked out of the cluster
237d202
<             // Trigger event that a node left the cluster
245,246d209
<             // Remove traces of directed presences sent from local entities to handlers that no longer exist.
<             // At this point c2s sessions are gone from the routing table so we can identify expired sessions
249d211
<         // Delete nodeID instance (release from memory)
